<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: script | Hegel2011的博客]]></title>
  <link href="https://swachian.github.io//blog/categories/script/atom.xml" rel="self"/>
  <link href="https://swachian.github.io//"/>
  <updated>2025-05-03T21:40:28+08:00</updated>
  <id>https://swachian.github.io//</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is Numa and the effect of it]]></title>
    <link href="https://swachian.github.io//blog/2012/04/08/what-is-numa-and-the-effect-of-it/"/>
    <updated>2012-04-08T22:38:00+08:00</updated>
    <id>https://swachian.github.io//blog/2012/04/08/what-is-numa-and-the-effect-of-it</id>
    <content type="html"><![CDATA[<p>研究mongod的时候，知道了一个关于cpu的概念--numa，但又不知道干嘛的。只知道需要在前面加上numactl来执行:</p>

<p><code>numactl --interleave=all mongod --dbpath /data/db --fork  --logpath /data/db.log</code></p>

<p>而拜读了这篇<a href="http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/">mysql 和 numa架构关联</a>
的文章，让人豁然开朗。</p>

<p>实际上，numa的本质就是牵涉到如何对内存进行分配，是一个在多cpu、多核中引入的概念。</p>

<p>比如，一个cpu时，那么全部的内存自然只有这个u可用。 但是，2个时呢? 如果一个u里面又有多个核心时，该怎么处理呢？</p>

<p>简而言之，numa的方法是让内存按cpu所属的node进行隔离，好处是提高了内存分配的公平性。但是对于mongod mysqld这样会
吃尽内存的应用，这种确保公平的分配方案并不好。因为根本没有其他核心需要用内存，但需要用内存的核心却会吃不饱。所以需要加上参数，使得这种公平性被取消，从而提高整体效能，其实就是发挥出mongod和mysqld的能力。因为这些应用都是单进程多线程的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Svnlook与代码统计]]></title>
    <link href="https://swachian.github.io//blog/2012/03/01/svnlook/"/>
    <updated>2012-03-01T11:48:00+08:00</updated>
    <id>https://swachian.github.io//blog/2012/03/01/svnlook</id>
    <content type="html"><![CDATA[<p>发现svnlook是一个很好的命令，可以帮助获得不少代码版本库中有用的信息。
有了这个东西后，各种统计都会变得有可能。</p>

<p>个人感觉，最有用的当属svn tree 命令</p>

<pre><code>svn tree . --full-paths
</code></pre>

<p>就能打出成排的版本库中的文件和目录。</p>

<p>比如为了获得java文件、jsp、xml的文件列表，可以分别执行下面的命令。
    svnlook tree . --full-paths | grep java$ | grep -v tags
    svnlook tree . --full-paths | grep jsp$ | grep -v tags
    svnlook tree . --full-paths | grep xml$ | grep -v tags</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给shell加上显示git的分支]]></title>
    <link href="https://swachian.github.io//blog/2011/06/28/display-git-branch-in-shell/"/>
    <updated>2011-06-28T18:48:00+08:00</updated>
    <id>https://swachian.github.io//blog/2011/06/28/display-git-branch-in-shell</id>
    <content type="html"><![CDATA[<p><code>
function find_git_branch {
    local dir=. head
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            head=$(&lt; "$dir/.git/HEAD")
            if [[ $head == ref:\ refs/heads/* ]]; then</p>

<pre><code>        head=$(&lt; "$dir/.git/HEAD")
        if [[ $head == ref:\ refs/heads/* ]]; then
            git_branch=" (${head#*/*/})"
        elif [[ $head != '' ]]; then
            git_branch=' (detached)'
        else
            git_branch=' (unknown)'
        fi
        return
    fi
    dir="../$dir"
done
git_branch=''
</code></pre>

<p>}
PROMPT_COMMAND="find_git_branch; $PROMPT_COMMAND"
green=$'\e[1;32m'
magenta=$'\e[1;35m'
normal_colours=$'\e[m'</p>

<p>PS1="[$green]\u@\h:\w[$magenta]\$git_branch[$green]\$[$normal_colours] "
</code>
秘密在于PROMPT_COMMAND，以保证每次都会执行以下find_git_branch函数</p>
]]></content>
  </entry>
  
</feed>
