<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 读书笔记 | Hegel2011的博客]]></title>
  <link href="https://swachian.github.io//blog/categories/读书笔记/atom.xml" rel="self"/>
  <link href="https://swachian.github.io//"/>
  <updated>2025-05-03T21:32:56+08:00</updated>
  <id>https://swachian.github.io//</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DDD的蓝书和红书]]></title>
    <link href="https://swachian.github.io//blog/2021/02/16/dddde-lan-shu-he-hong-shu/"/>
    <updated>2021-02-16T21:37:00+08:00</updated>
    <id>https://swachian.github.io//blog/2021/02/16/dddde-lan-shu-he-hong-shu</id>
    <content type="html"><![CDATA[<p>跟着Vlad的「Unit Testing Principles, Practices, and Patterns」 学习单元测试的原理实践和模式之后，
一路追踪，自然会发现要写好测试自然会要用到Domain-Driven Design的分析和设计方式。因为要写出容易测试代码，
首先需要写出业务上的好代码，而要做到这一点，目前已知的解法殊途同归，就是要运用DDD的方式，解除业务代码对框架和技术细节的依赖，而专注于业务（领域）本身。加上多年以前DHH推荐的5本他膺服的编程书籍中，就有Eric Evans的「Domain-Driven Design」，也就是蓝皮书。</p>

<p>但这本书确实很不好读。中文版的购于去年3月份，反反复复并看不下去，7月份开始看英文版，废了半年的时间，才断断续续终于看完了。蓝皮书确实写的是不容易褪色和随着时间流逝而跌价的书籍，内里的原则和一些很细节的建议应该只要OO继续是编程的主要范式，那么蓝皮书的价值和地位就会持续存在。比如他评价OO把一切都看成对象，就是等于建筑师把一切都看成房间。过于抽象，其实反而失去了运用时的指导意义。为此，开发出了七种武器来分别描述不同的用于处理业务的OO。</p>

<p>而统一语言，则是强调分析人员、设计人员和最终使用人员使用同一种语言来进行沟通，就像厨房、卫生间、客厅等并非只是建筑师的用语。这样可以用一套原则来进行指导和沟通。DDD本身强调独立性的目的，是通过解除对外部的依赖从而达到可以把核心问题暴露出来并予以解决。从而可以让运维逻辑丰富且清晰，将Domain作为软件的核心，而把APP层做薄。沿着这条路前进了多年之后，随着TDD等实践的进一步发展，获得了易测试等突破性的好处。因此，在国外甚至国内部分项目中，都取得了广泛的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage It]]></title>
    <link href="https://swachian.github.io//blog/2019/12/01/manage-it/"/>
    <updated>2019-12-01T10:49:00+08:00</updated>
    <id>https://swachian.github.io//blog/2019/12/01/manage-it</id>
    <content type="html"><![CDATA[<p>项目的驱动因素、约束以及活动余地。少问“为什么”，少问“怎么做”</p>

<p>镀金类需求和核心需求。</p>

<h3>项目章程模板：</h3>

<ul>
<li>远景：项目的意义，远景式的话语</li>
<li>需求：项目的驱动因素</li>
<li>目标：解决技术债务、添加更多的自动化测试、设计冒烟测试，这些都可能是项目目标</li>
<li>成功标准：包括功能1、2、3，提升产品性能，测出相关数值，项目经理要确保成功标准中不会包含非项目人员才能完成的任务，比如卖出50000套软件，要确保成功标准在项目经理的掌控之中。</li>
<li>ROI估算：投资回报率</li>
</ul>


<p>质量在产品的不同市场应用阶段，可以的需求有很大区别。到大众市场之间有着摩尔鸿沟。越进入成熟阶段，对质量的要求更高，即缺陷的容忍度越低。</p>

<h3>开发项目规划模板</h3>

<ul>
<li>产品意图：（类似远景，但远景可能不够用），与远景大方向一致，但又不安全相同</li>
<li>历史记录：知道的越少，越容易惊讶</li>
<li>发布条件</li>
<li>目标：同章程中的目标，但章程编写时可能目标还不明确</li>
<li>项目组织：明确团队在项目中的职责分配，指明如何使用周期以及哪些关键实践</li>
<li>日程总览：让我的领导知道项目的实际进展</li>
<li>人员配备（人员曲线）</li>
<li>建议日程</li>
<li>风险列表：识别和管理风险</li>
</ul>


<h3>制定发布计划</h3>

<p>通过制定发布计划，和各个职能部门的人共同商讨“成功”的含义，可以意识到自己不仅只是完成分内的工作，也为项目经理指明了成功的方向。</p>

<ol>
<li>确定当前项目最重要的因素：时间、功能、低缺陷率</li>
<li>草拟发布条件，加入测试经理等人</li>
<li>SMART原则，确定的、可测量的、可达成的、相关的、可跟踪的指标和条件</li>
<li>发布条件上达成多方共识：揭示众人对于产品和项目的假定和忧虑的过程</li>
</ol>


<p>很多软件开发人员都是很乐观的。在学校时接受的训练就是要让他们变得乐观，因为那
时每个项目都会在一个学期内完成（还要花费许多个通宵）。这些训练会一直停留在他们
脑海中，直到学会估算小的功能，并接收对于估算的反馈</p>

<p>如果项目经理必须遵循某个截止日期，那就干脆什么都别估算了。把所有的功能进行排
序，并按优先级进行开发。这种状况下，我强力推荐使用敏捷生命周期，这样就可以快
速地实现功能，并马上得到反馈</p>

<p>管理项目：管理风险，留意测试的进度，产生仪表盘上的数据，评估版本发布条件，要帮助大家看清目标、移除障碍，监控他们的进度，是没有时间做技术工作的。</p>

<p>保持合理的工作时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[凤凰项目读后记]]></title>
    <link href="https://swachian.github.io//blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji/"/>
    <updated>2019-11-05T12:16:00+08:00</updated>
    <id>https://swachian.github.io//blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji</id>
    <content type="html"><![CDATA[<p>在人邮图灵1024半价优惠日买的一本书，主要以小说的形式，描述了一个资深运维经理比尔接手内部的凤凰项目部署，并在世外高人埃瑞克的指导下，如何通过看板、精益、敏捷能方法打通任督二脉，满足业务部门的<strong>真实</strong>需求，从而使整个系统（集团公司）业绩达标的故事。形式相当引人入胜，也很有收获，关键是提供了和人沟通的场景和范本。</p>

<p>上手，讲述了主角被选中的原因：他过去几年组建的大型机团队，是最有组织、最值得信赖的团队，比尔本人也是一个可靠、务实，而且愿意表达真实想法的人。不过，作为运维主管，比尔对开发的印象不是很好，比如开发人员经常粗心大意弄坏东西，然后就丢给运维了；而开发人员和信息安全部门的人联手，更容易给运维添乱。而主人公的冷静坦率的做法，甚至让他在第一部分丢了工作。</p>

<p>然而，这个公司其实并不真正重视IT。比如在总体评估指标中，一个IT经理都没资格参与，即IT引起的运营风险并未被重视，也未得到管理，然而IT风险实质上是业务风险。</p>

<p>下面是一些主要的知识点：</p>

<p>倒逼项目 == 日期驱动项目，开发用完了全部的时间。这种玩法，基本后续就是起飞。大家即使都是为了公司好，关键仍然在于有限的时间里能够做什么。对工作需求、优先等级、工作进度、可用资源都了如指掌。真正令人沮丧的是无法把精力集中在对公司最为重要的事情上。</p>

<p>约束点=瓶颈，在瓶颈之外的任何地方做出改进都是假象。作为IT部副总裁，你的工作要确保形成一条迅速、可预测、持续不断的计划内工作流，从而交付价值，同时尽可能降低计划外工作的影响和破坏。</p>

<p>三步工作法：第一步，帮助我们理解在工作从开发部向运维部移动时建立快速工作流，第二步缩短及放大整个系统的反馈回路，第三步形成勇于探索且吸取教训的先进文化。（勇于冒险以及从失败中汲取教训的价值观，并强调通过反复实践以致炉火纯青的必要性）</p>

<p>四种主要的工作类型：<br/>
1. 业务项目<br/>
2. 内部IT项目<br/>
3. 变更类工作<br/>
4. 计划外（救火）工作，堪比反物质</p>

<p>在发射当口，还往太空飞船安装零件，可不是好兆头。</p>

<p>缺乏能力才是成事的大敌。</p>

<p>你的开发，把所有工作周期都用在了功能，而忽略了稳定性、安全性、可扩展性、可维护性、可操作性、持续性等。</p>

<p>相比向系统中投入更多的工作，将无用的工作剔出系统更为重要。重要的是结果，而非过程、管理或者我们完成了什么。</p>

<p>冷静、坦率应对愤怒。但上级还是会认为工程师们懒骨头。然而团队内需要信任感。</p>

<p>技术债务必将导致公司唯一能够完成的工作就是计划外工作。</p>

<p>工作中心：机器、人员、方法、测评</p>

<p>对安全中心负责人的评价：可以不对IT系统做过多无用功就保护公司，这才是你的胜利。这句话很适用于之前单位的BA。即要做过滤器，而不是放大器，要把无用的东西拒之门外。</p>

<p>和高层打交道，告诉他们坏消息要找适当的时机、适当的场合。</p>

<p>不断降低周期时间的需求是第一工作法的内容，增强回收成本的能力，是第二工作法的内容。要向高层表明‘IT导致的业务风险’。</p>

<p>之后的devops环节，将IT和运维整合在一起，通过降低发布规模，提高发版频次，比如一天10次，来实现快速交付。然而并没有提到相应的验证开销过大怎么办？</p>

<p>未来十年，每一个称职的COO都会是从IT部门出来的。否则，只能是金玉其外的傀儡，需要依靠别人来开展工作。</p>

<p>尾声当然是美好的，比尔获得了同事和上司的信任，他们业务部门的死对头莎拉也离开了公司，他和业务部门的其他人建立了良好的合作关系。公司上下更懂IT，IT也更懂公司的业务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring In Action 4]]></title>
    <link href="https://swachian.github.io//blog/2015/06/01/spring-in-action-4/"/>
    <updated>2015-06-01T10:31:00+08:00</updated>
    <id>https://swachian.github.io//blog/2015/06/01/spring-in-action-4</id>
    <content type="html"><![CDATA[<p>大约两年前，又读了In action的第三版，感觉离实际的开发已经有点远了，里面讲的内容反应不了当时Spring主要的用法。于是换了
《Spring In Practice》学习，比当时的in action贴近实际反应现状多了。<br/>
好在，In action在14年年末又出了新的版本。
经典的Spring系列又出了第4版，这一版是完全跟上了Spring发展的脚步，呈现的也是最新的Spring开发内容，而且聚焦于Spring Web。</p>

<p>内容比较新颖，作者的文章也总喜欢和读者拉拉家常，所以整个书读起来也比较有意思。不过，这本书不适合完全没Java Web开发基础的读者，
其整个书还是写给已经使用Spring进行开发或者至少已经略懂什么是Java Web开发的人，所以，学这本书前必须要有一点基础。</p>

<h2>Spring的基础介绍</h2>

<p>这部分也是整个系列一直的拿手好戏，现在总结的是越来越精彩，在Xml配置和Java Config中也完全倒向后者了，不过更多的也是通过这两个配置结合了自动扫描的配置方法，即Annotation。</p>

<h3>Spring 的四大法宝：</h3>

<ol>
<li>PoJo</li>
<li>DI（依赖注入，取代各个类之间的内部new）</li>
<li>Aspect（Feature），给每个method加上chain，主要用于Transaction、logging、security、cacching这些领域</li>
<li>Template（JDBCTemplate等等)，即模板方法，用于减少冗长代码的写入。</li>
</ol>


<p>而这一切的基础是Java的动态编程，除了Java自带的反射，其实大量使用了CGLib库。</p>

<h3>Profile</h3>

<p>通过<code>@Profile("dev")</code>来表明在什么情况下使用下面的标注或配置，即激活哪一种配置属性。有两个变量可以指定值</p>

<pre><code>spring.profiles.active
spring.profiles.default
</code></pre>

<p>其中，<code>default</code>可以在web.xml中定义，而<code>active</code>可以在系统属性、环境变量、JNDI或者@ActiveProfiles中定义，因为<code>active</code>的优先级更高。</p>

<h3>其他一些标注</h3>

<p>@Primary 用于消除bean的歧义性（比如有多个同名或同类型、同接口），在声明是可以使用表明这个为主。<br/>
@Qualifier，用于一步一步的Narrow指定匹配，不过似乎耦合了点，个人觉得不推荐使用<br/>
@Scope，这个很关键，指定了生成bean使用的容器, Prototype是每次new一个，大部分默认是单例，还有基于Session和Scope的bean注入，解决了web开发时的有些信息注入的难题。具体可参看<a href="/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/">HttpSession在Spring中的配法和问题</a>。</p>

<h2>Aop</h2>

<p>Aop 提供了在method的前后增加功能（Feature）的能力，而这些功能往往是针对业务某些统一的能力的，所以称之为切面，意在把日志、事物、安全等功能提取出来，并且Spring配套了一系列术语称呼AOP中的各个角色。
但本质上还是一种定义Hook的模式。</p>

<ul>
<li>Advice ， 功能本身</li>
<li>PointCut，实际需要使用的Join Points</li>
<li>Joinpoints，在哪些点（方法中插入）</li>
</ul>


<p>插入的时机有：
1. Before: method调用前
2. After all: method调用后
3. After returning success: method调用成功
4. After throwing: method调用出现例外
5. Around: 写法最复杂，需要把调用的chain写在Advice里面</p>

<p>具体用分为:<br/>
1. Introductions: 给现有的class <strong>加</strong>(新增)方法或属性, 类似加入一个模块
2. weaving（编织、插入）：代理插入，可以在编译时、加载class时以及运行时混入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何伟的甲骨文]]></title>
    <link href="https://swachian.github.io//blog/2014/09/14/he-wei-de-jia-gu-wen/"/>
    <updated>2014-09-14T11:49:00+08:00</updated>
    <id>https://swachian.github.io//blog/2014/09/14/he-wei-de-jia-gu-wen</id>
    <content type="html"><![CDATA[<p>书接上回，之前说寻路中国应该叫寻路中国乡村，因为欠缺的城市的内容。但实际上关于城市中国的何伟的书出版的更早，
就是这本《Oracle》，而且由于某些原因无法在大陆出版。因为一旦
牵涉到城市，难免会有更敏感的话题出现。
本书的时间也要稍早，描述的是2000年前后的中国。当时的国家已经有了寻路中国里的一些倾向，只是还没那么严重。</p>

<p>本书主要描写了在三四个大陆城市：北京、深圳、温州、南京。
北京主要作者自己、一个维吾尔人以及一些老知识分子。深圳和温州的
主线是作者在涪陵任外教时的学生在那里闯荡情况的反应。南京等则只是一笔带过。
而所谓甲骨文的发现地--安阳，书中尽管多次提到，但并未加以详细描述。安阳只是作为介绍甲骨文专家
<strong>陈梦家</strong>（甲骨文专家、留美学者、右派、66年自杀）的引子。
简单地说，甲骨文其实是在讲文革中一些知识分子的命运，和作者的几个学生的人身经历并没有直接的关系。
而维吾尔的故事，则是在北京和华盛顿两个地方展开。这里面敏感内容较多，作者的描述并没有很明显的倾向性，
尽管作者和维吾尔人是朋友。</p>

<p>阅读2000年前后中国故事，从中可以反映出彼时的一些政策制定有其合理之处。但在2003之后
还是坚持某些策略，则产生很多问题。例如，当时的汇率是固定，后来的汇率也是固定的。
但是，当时的黑市价格美元更值钱，所以政府坚持汇率对人民有益。而后来人民币早就该升值，
美元已不如过去那么有价，还坚守汇率就是对使用人民币的人不负责任了。
即便是同样的措施，在不同的条件下实施其后果是完全不同的。</p>

<p>所以，尽管这本书谈了很多政治的东西，但却完全没有读上本书
时常常会发出的未尝不痛恨于桓灵也的感觉。很多选择对政府来讲也是别无选择，
完全不像后10年那样政府其实可以有多种选择。</p>

<p>作者也在新疆采访了当时正在拍摄天地英雄的姜文，也提到了他因为鬼子来了而受到封杀。
姜文故事的系统性并不强，可能只是作者曾经写过的一篇报道也放了进来。</p>

<p>总体而言，作者的视角很独特，借助甲骨文也介绍了中国的近代文字变革历史，确实是调查研究后的优秀记者的水平。
整本书读完后，会对中国的文字变化、政策导向、年轻人在城市的奋斗生活有更深入或更新鲜的认识。是一本开卷有益的好书。</p>
]]></content>
  </entry>
  
</feed>
