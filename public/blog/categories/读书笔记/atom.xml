<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 读书笔记 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/读书笔记/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2019-11-05T14:42:51+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[凤凰项目读后记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji/"/>
    <updated>2019-11-05T12:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji</id>
    <content type="html"><![CDATA[<p>在人邮图灵1024半价优惠日买的一本书，主要以小说的形式，描述了一个资深运维经理比尔接手内部的凤凰项目部署，并在世外高人埃瑞克的指导下，如何通过看板、精益、敏捷能方法打通任督二脉，满足业务部门的<strong>真实</strong>需求，从而使整个系统（集团公司）业绩达标的故事。形式相当引人入胜，也很有收获，关键是提供了和人沟通的场景和范本。</p>

<p>上手，讲述了主角被选中的原因：他过去几年组建的大型机团队，是最有组织、最值得信赖的团队，比尔本人也是一个可靠、务实，而且愿意表达真实想法的人。不过，作为运维主管，比尔对开发的印象不是很好，比如开发人员经常粗心大意弄坏东西，然后就丢给运维了；而开发人员和信息安全部门的人联手，更容易给运维添乱。而主人公的冷静坦率的做法，甚至让他在第一部分丢了工作。</p>

<p>然而，这个公司其实并不真正重视IT。比如在总体评估指标中，一个IT经理都没资格参与，即IT引起的运营风险并未被重视，也未得到管理，然而IT风险实质上是业务风险。</p>

<p>下面是一些主要的知识点：</p>

<p>倒逼项目 == 日期驱动项目，开发用完了全部的时间。这种玩法，基本后续就是起飞。大家即使都是为了公司好，关键仍然在于有限的时间里能够做什么。对工作需求、优先等级、工作进度、可用资源都了如指掌。真正令人沮丧的是无法把精力集中在对公司最为重要的事情上。</p>

<p>约束点=瓶颈，在瓶颈之外的任何地方做出改进都是假象。作为IT部副总裁，你的工作要确保形成一条迅速、可预测、持续不断的计划内工作流，从而交付价值，同时尽可能降低计划外工作的影响和破坏。</p>

<p>三步工作发：第一步，帮助我们理解在工作从开发部向运维部移动时简历快速工作流，第二部缩短及放大整个系统的反馈回路，第三步形成勇于探索且吸取教训的先进文化。（勇于冒险以及从失败中汲取教训的价值观，并强调通过反复实践以致炉火纯青的必要性）</p>

<p>四种主要的工作类型：<br/>
1. 业务项目<br/>
2. 内部IT项目<br/>
3. 变更类工作<br/>
4. 计划外（救火）工作，堪比反物质</p>

<p>在发射当口，还往太空飞船安装零件，可不是好兆头。</p>

<p>缺乏能力才是成事的大敌。</p>

<p>你的开发，把所有工作周期都用在了功能，而忽略了稳定性、安全性、可扩展性、可维护性、可操作性、持续性等。</p>

<p>相比向系统中投入更多的工作，将无用的工作剔出系统更为重要。重要的是结果，而非过程、管理或者我们完成了什么。</p>

<p>冷静、坦率应对愤怒。但上级还是会认为工程师们懒骨头。然而团队内需要信任感。</p>

<p>技术债务必将导致公司唯一能够完成的工作就是计划外工作。</p>

<p>工作中心：机器、人员、方法、测评</p>

<p>对安全中心负责人的评价：可以不对IT系统做过多无用功就保护公司，这才是你的胜利。这句话很适用于之前单位的BA。即要做过滤器，而不是放大器，要把无用的东西拒之门外。</p>

<p>和高层打交道，告诉他们坏消息要找适当的时机、适当的场合。</p>

<p>不断降低周期时间的需求是第一工作法的内容，增强回收成本的能力，是第二工作法的内容。要向高层表明‘IT导致的业务风险’。</p>

<p>之后的devops环节，将IT和运维整合在一起，通过降低发布规模，提高发版频次，比如一天10次，来实现快速交付。然而并没有提到相应的验证开销过大怎么办？</p>

<p>未来十年，每一个称职的COO都会是从IT部门出来的。否则，只能是金玉其外的傀儡，需要依靠别人来开展工作。</p>

<p>尾声当然是美好的，比尔获得了同事和上司的信任，他们业务部门的死对头莎拉也离开了公司，他和业务部门的其他人建立了良好的合作关系。公司上下更懂IT，IT也更懂公司的业务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring In Action 4]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4/"/>
    <updated>2015-06-01T10:31:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4</id>
    <content type="html"><![CDATA[<p>大约两年前，又读了In action的第三版，感觉离实际的开发已经有点远了，里面讲的内容反应不了当时Spring主要的用法。于是换了
《Spring In Practice》学习，比当时的in action贴近实际反应现状多了。<br/>
好在，In action在14年年末又出了新的版本。
经典的Spring系列又出了第4版，这一版是完全跟上了Spring发展的脚步，呈现的也是最新的Spring开发内容，而且聚焦于Spring Web。</p>

<p>内容比较新颖，作者的文章也总喜欢和读者拉拉家常，所以整个书读起来也比较有意思。不过，这本书不适合完全没Java Web开发基础的读者，
其整个书还是写给已经使用Spring进行开发或者至少已经略懂什么是Java Web开发的人，所以，学这本书前必须要有一点基础。</p>

<h2>Spring的基础介绍</h2>

<p>这部分也是整个系列一直的拿手好戏，现在总结的是越来越精彩，在Xml配置和Java Config中也完全倒向后者了，不过更多的也是通过这两个配置结合了自动扫描的配置方法，即Annotation。</p>

<h3>Spring 的四大法宝：</h3>

<ol>
<li>PoJo</li>
<li>DI（依赖注入，取代各个类之间的内部new）</li>
<li>Aspect（Feature），给每个method加上chain，主要用于Transaction、logging、security、cacching这些领域</li>
<li>Template（JDBCTemplate等等)，即模板方法，用于减少冗长代码的写入。</li>
</ol>


<p>而这一切的基础是Java的动态编程，除了Java自带的反射，其实大量使用了CGLib库。</p>

<h3>Profile</h3>

<p>通过<code>@Profile("dev")</code>来表明在什么情况下使用下面的标注或配置，即激活哪一种配置属性。有两个变量可以指定值</p>

<p><code>
spring.profiles.active
spring.profiles.default
</code></p>

<p>其中，<code>default</code>可以在web.xml中定义，而<code>active</code>可以在系统属性、环境变量、JNDI或者@ActiveProfiles中定义，因为<code>active</code>的优先级更高。</p>

<h3>其他一些标注</h3>

<p>@Primary 用于消除bean的歧义性（比如有多个同名或同类型、同接口），在声明是可以使用表明这个为主。<br/>
@Qualifier，用于一步一步的Narrow指定匹配，不过似乎耦合了点，个人觉得不推荐使用<br/>
@Scope，这个很关键，指定了生成bean使用的容器, Prototype是每次new一个，大部分默认是单例，还有基于Session和Scope的bean注入，解决了web开发时的有些信息注入的难题。具体可参看<a href="/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/">HttpSession在Spring中的配法和问题</a>。</p>

<h2>Aop</h2>

<p>Aop 提供了在method的前后增加功能（Feature）的能力，而这些功能往往是针对业务某些统一的能力的，所以称之为切面，意在把日志、事物、安全等功能提取出来，并且Spring配套了一系列术语称呼AOP中的各个角色。
但本质上还是一种定义Hook的模式。</p>

<ul>
<li>Advice ， 功能本身</li>
<li>PointCut，实际需要使用的Join Points</li>
<li>Joinpoints，在哪些点（方法中插入）</li>
</ul>


<p>插入的时机有：
1. Before: method调用前
2. After all: method调用后
3. After returning success: method调用成功
4. After throwing: method调用出现例外
5. Around: 写法最复杂，需要把调用的chain写在Advice里面</p>

<p>具体用分为:<br/>
1. Introductions: 给现有的class <strong>加</strong>(新增)方法或属性, 类似加入一个模块
2. weaving（编织、插入）：代理插入，可以在编译时、加载class时以及运行时混入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何伟的甲骨文]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/14/he-wei-de-jia-gu-wen/"/>
    <updated>2014-09-14T11:49:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/14/he-wei-de-jia-gu-wen</id>
    <content type="html"><![CDATA[<p>书接上回，之前说寻路中国应该叫寻路中国乡村，因为欠缺的城市的内容。但实际上关于城市中国的何伟的书出版的更早，
就是这本《Oracle》，而且由于某些原因无法在大陆出版。因为一旦
牵涉到城市，难免会有更敏感的话题出现。
本书的时间也要稍早，描述的是2000年前后的中国。当时的国家已经有了寻路中国里的一些倾向，只是还没那么严重。</p>

<p>本书主要描写了在三四个大陆城市：北京、深圳、温州、南京。
北京主要作者自己、一个维吾尔人以及一些老知识分子。深圳和温州的
主线是作者在涪陵任外教时的学生在那里闯荡情况的反应。南京等则只是一笔带过。
而所谓甲骨文的发现地--安阳，书中尽管多次提到，但并未加以详细描述。安阳只是作为介绍甲骨文专家
<strong>陈梦家</strong>（甲骨文专家、留美学者、右派、66年自杀）的引子。
简单地说，甲骨文其实是在讲文革中一些知识分子的命运，和作者的几个学生的人身经历并没有直接的关系。
而维吾尔的故事，则是在北京和华盛顿两个地方展开。这里面敏感内容较多，作者的描述并没有很明显的倾向性，
尽管作者和维吾尔人是朋友。</p>

<p>阅读2000年前后中国故事，从中可以反映出彼时的一些政策制定有其合理之处。但在2003之后
还是坚持某些策略，则产生很多问题。例如，当时的汇率是固定，后来的汇率也是固定的。
但是，当时的黑市价格美元更值钱，所以政府坚持汇率对人民有益。而后来人民币早就该升值，
美元已不如过去那么有价，还坚守汇率就是对使用人民币的人不负责任了。
即便是同样的措施，在不同的条件下实施其后果是完全不同的。</p>

<p>所以，尽管这本书谈了很多政治的东西，但却完全没有读上本书
时常常会发出的未尝不痛恨于桓灵也的感觉。很多选择对政府来讲也是别无选择，
完全不像后10年那样政府其实可以有多种选择。</p>

<p>作者也在新疆采访了当时正在拍摄天地英雄的姜文，也提到了他因为鬼子来了而受到封杀。
姜文故事的系统性并不强，可能只是作者曾经写过的一篇报道也放了进来。</p>

<p>总体而言，作者的视角很独特，借助甲骨文也介绍了中国的近代文字变革历史，确实是调查研究后的优秀记者的水平。
整本书读完后，会对中国的文字变化、政策导向、年轻人在城市的奋斗生活有更深入或更新鲜的认识。是一本开卷有益的好书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[普鲁士不含传说]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/03/pu-lu-shi-bu-han-chuan-shuo/"/>
    <updated>2014-05-03T15:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/03/pu-lu-shi-bu-han-chuan-shuo</id>
    <content type="html"><![CDATA[<p>哈夫纳的名著之一，篇幅很短但内容很丰富，只读一遍肯定是不够的。
此书出版于2012年，国内的图书馆基本都还没货，所以是购买的台湾纸版书。
印刷和包装相对一般，价格倒是还好，折扣下来只有
300台币，折合60元人民币。</p>

<p>本书一如哈夫纳的风格，逻辑清晰、还原事实。去除了那些覆盖在普鲁士
身上的传说，而把普鲁士的崛起与特性追根溯源，来龙去脉介绍的十分
清晰。作为后天形成的理性国家，普鲁士有其巨大的优势，即人为组合而成，
因此其本身必须有许多的优点才能存活下来。为了生存，他具备了很多
先进的东西。比如法治、自由、不在乎以及最重要的--责任。国家对
公民尽责，公民对国家尽责，除此之外则公民爱干嘛就干嘛。这为他吸引
了大量的移民，使得这个国家在经济、军事上都保持了高于同时代国家的
活力。这也是普鲁士最吸引人的地方。</p>

<p>但是，普鲁士的弱点也在于此。因为他本身就是一个人为组合的国家，没有
民族和地理的基础，过的好时大家可以在一起，而过的不好或者可以用其他
方式过的更好时，他似乎就没有存在的必要了。这方面完全不如有民族或者
部族基础的国家。普鲁士作为一个国家，其结合点主要是霍恩佐伦家族，当
这个家族融入德意志之后，整个普鲁士也只能溶解于德意志了。</p>

<p>普鲁士的名称在历史上主要指向3个事物：</p>

<ol>
<li>生活在这片地区，丹泽到波罗的海沿岸，<strong>原始</strong>的部族。这部分人很早就被
灭族了。</li>
<li>原始部族是被<strong>条顿骑士</strong>殖民征服，并逐渐与西斯拉夫人融合，而征服者使用了被征服者的称呼。</li>
<li>由<strong>霍恩佐伦家族</strong>夹起来的地区性强权国家，条顿骑士团的最后一任大团长出自霍恩佐伦。第3个普鲁士即教科书里出现的普鲁士。</li>
</ol>


<p>其崛起充满了偶然性，也需要极大的运气，中间有着数个优秀但又性格迥异的君主。
比如，士兵国王，腓特烈大帝，以及他们的先辈和后代。其中，有的热衷于文化事业，
喜欢排场，有的则很节俭，有的则是军事天才。无论如何，他们都很有责任感，也
往往具备了坚强的毅力。</p>

<p>普鲁士其实打仗的时候并不多，即使是腓特烈大帝，所谓的欧洲最杰出的统帅之一，一生
大部分时间也是处理内政为主的，即便打也只是<strong>内阁战争</strong>。但普鲁士以善战闻名主要还是因为
不打则已，一打则往往是轰轰烈烈，而且常常伴随着惊人的胜利，交战双方也往往都要付出
极其惨重的代价。</p>

<p>普鲁士的崛起，离不开同<strong>俄罗斯</strong>的良好关系。这类似于近代东德和苏俄的关系。
腓特烈时代，普鲁士成为了一个<strong>双民族</strong>的<strong>大</strong>国家，国土的一半属于波兰并生活着
波兰人。但随着拿破仑横扫欧洲，普鲁士经历了巨大的考验。在反法同盟胜利后，其波兰
部分被去除，而得到了鲁尔区作为补贴。但在当时，这并不是一个划算的买卖。但也因祸得福，
普鲁士变成了德意志的单民族国家，鲁尔区后来成为最重要的煤产区和工业基地。反而摆脱了日后奥地利的命运。</p>

<p>三只老鹰即指，俄罗斯，普鲁士和奥地利。欧洲在德国崛起前，其实是波旁王朝（法国）和
哈夫斯堡王朝（奥地利）双雄争霸的格局。其后，才是俄罗斯和普鲁士崛起。普俄的关系在
1877年前都很好，之后因为土耳其退出了巴尔干，其遗产在英法奥俄间引起了巨大冲突，
才使得德俄关系进入了不良的阶段。直到现在也是如此。</p>

<p>随后，就是三场战争建立了一个国家，真正的日尔曼大国德意志。三场战争是普丹、普奥、普法，
杰出的政治家则是俾斯麦。而普鲁士军队的改革则是俾斯麦的领导，普鲁士国王完成的。国王
60多才即位，90高龄才离世。俾斯麦 毛奇均是他的选择。当然，他选择俾斯麦也多少有点无奈。</p>

<p>普鲁士的崛起也是符合顺应时代精神的结果。从腓特烈时代起，流行的是<strong>国家主义</strong>、<strong>民族主义</strong>,
这些东西塑造了整个近现代史。也有失败的主义运动，如<strong>种族主义</strong>。如果不符合时代精神，那么人为
怎么努力其结果必然还是要失败的。但这也意味着，爱国主义和爱民族主义其实并不是天经地义的。
实际上更早流行的是<strong>国王主义</strong>，国家只要有个国王就好了，曾经这个比民主二字还要吸引人。
我国其实一直是为<strong>国王</strong>服务的思想长期占据统治地位，现代化后逐步引入了国家、民族和民主，也算
一种进步吧。</p>

<p>普鲁士是一个伟大的国家，最后溶解于德国了。但普鲁士毕竟不是德国，溶解于德国未必是
他的领导人所希望的。只是普鲁士太人工合成了，所以一旦遇到德意志，就立马水乳交融了。
但有一点，普鲁士并不是一个扩张成性的国家，真的有着欧洲大国梦和传统的是奥地利，希特勒其实
是奥地利的传人，而绝不是腓特烈大帝、俾斯麦的继承者。</p>

<p>一国的崛起有其必然性，但运气的成分也是举足轻重的。普鲁士的辉煌绝对也离不开腓特烈的冒险。
做其他事情的道理也是类似的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT系统架构的模式]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi/"/>
    <updated>2014-04-12T16:18:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi</id>
    <content type="html"><![CDATA[<p>近日终于得以拜读了Martin Fowler的大作《The Patterns of Enterprise Application Architecture》。</p>

<p>最早了解这本书是从robbin那里，在距今很多年前的一个Java书单里。彼时他对这本书的评价大意是适合要自己动手开发框架的人看，对应用开发没什么直接的帮助。同时，他认为读下来并没有太多感觉。而回过头来看，读过这本书的中国程序员应该是不少的，但真的从中汲取营养做出东西来的人几乎没有。从这也可以看出中国工程师在动手和创新方面确实有些先天不足。</p>

<p>然而，这本书对于DHH、对于Rails则可以说是一切的开端。对这本书贯彻的最到位、突破的最有力的，非DHH用Ruby开创Rails莫属。本书成书于2002年，彼时企业应用这个称呼比较时髦，按作者的说法，他的本意是IT系统的架构，而这也符合后来软件架构所适用的范围。如病人记录、订单跟踪、信用系统、保险、汇率兑换，这些都是IT系统，也就是企业应用。而文字处理、电梯控制、交换机、编译器、操作系统、游戏则基本不能算作企业应用。只是，2002年之后，企业应用这个名字被用的烂了，反而成了大慢笨的代表，导致07/08年的时候，甚至有不少人认为Rails不适合做企业应用。但彼时我感觉Rails对这些简单的所谓企业应用才是大杀器，毕竟大部分企业应用其实就是重度的CRUD应用，而这方面Rails堪比马克沁机枪对单兵的作战效果。至于互联网类的Web应用，交互、设计是占大头的，Rails投入使用的实际效果反而不如企业应用那么明显。</p>

<p>这本书确实是rails的设计指南，或者说是rails的设计文档。但DHH的突破和创新之处还是很明显的：</p>

<ol>
<li>本书是基于.Net 和 Java的，但提及了Python和Ruby，而作者更多的应该只是一种不抱希望的假设罢了，然而DHH真的用Ruby把这本书实作了出来。</li>
<li>虽然ActiveRecord取自于本书，然而作者本身并不是把这种模式看成一种自动化的ORM方案。广义的ORM，可以包含Dao(Table Gateway)、Data Transfer Object（json，xml）以及datamapper这些把记录化作内存对象所有模式，但狭义来看ORM是仅包含datamapper的。ActiveRecord在Fowler处其实只是一种Dao的变种。而DHH直接将ActiveRecord升格成了更高度自动化的ORM模式。</li>
<li>在视图层，坚决使用了Helper模式，未加入标签也未停留在scriplet阶段。</li>
</ol>


<p>对我而言，遗憾的一点是很晚才真的读了这本书，不知是喜是优的是因为晚读所以对这本书的内容很认可，而聊以自我安慰的是如果早读了说不定我也能
创造点什么东西，当然，最后一点纯属自娱自乐。<br/>
不过，这本书以及Rails，确实定义了过去10年Web开发的发展方向。因为Rails框架实际上已经成为了Web后台框架的一个标杆，
例如Spring MVC现在走的也是类似的道路。所以，这本书确实深深影响了Web应用的开发。</p>

<p>还有一点值得一提，就是这本书是真的基于Web总结的。很多模式的书籍，其实来源于客户端界面程序，比如从做菜单中提取出来的那些模式，而本书
是基于Web的，这就使得它和很多模式的书籍很不一样了。也因此，它才可以作为Rails的设计蓝图。而所有这些模式，大都来自于实践。实际上，
至今Rails也是Web开发优秀实践的最佳代表。而且Web开发的实践模式也不止书中提到的这些，实际上了解这些模式最好的方法就是接触Rails。虽然现在的模式比本书包含的更多了，本书依然很值得推荐阅读。</p>

<h2>笔记整理</h2>

<p>业务逻辑其实是业务反逻辑： complex business illogic</p>

<h3>分层的坏处</h3>

<ol>
<li>级联变更（Cascading Changes），就是改了一个地方往往要改n个地方</li>
<li>性能损害</li>
</ol>


<p>三层模型之所以能够流行，也是因为Web的流行。Client-Server工具中，是很难实现三层配置使用的。不过如今的App开发，好像也是三层模式。<br/>
但总体而言三层模型的流行是Web和Java等崛起的后果。</p>

<h3>常见的业务代码组织形式</h3>

<ul>
<li>Transaction Script</li>
<li>Domain Module , OO对TS的改变</li>
<li>Service层</li>
</ul>


<h3>会话状态</h3>

<ul>
<li>客户端 Cookie</li>
<li>服务端（内存）</li>
<li>共享服务端（数据库 Redis Memcache 共享文件夹）</li>
</ul>


<h3>分布式</h3>

<p>i
* 不要把不同的功能（对象）组件放在不同的服务器上，这样性能有问题
* 进程间只能尽量使用粗粒度接口，如N+1一次性读取同时返回很多信息
* 同一台服务器内部使用细粒度调用，远程外观模式<br/>
* Data Transfer Object ，传输对象，上面的那种是调用方法
* 同步的接口为主
* 异步的基于消息的处理方式
* 推动你思考而不是代替你思考，最终享受乐趣的是你，承担痛苦的也是你</p>

<h3>锁的种类</h3>

<ol>
<li>乐观锁，比如自己建立版本号；</li>
<li>悲观锁，就是常见的for lock；</li>
<li>粗颗粒（coarse-grainned)锁，就是一堆对象映射成一个入口，在入口处实施加锁；</li>
<li>隐含锁，把锁加到框架里，由Lock Manager和Lock Mapper来实现<strong>模板方法</strong>。</li>
</ol>


<h3>Stub和Mock</h3>

<p>Stub：用一个类直接替换某接口的实现，在测试或开发过程中使用这个替换类<br/>
Mock：用一个服务的重写来模拟某服务</p>
]]></content>
  </entry>
  
</feed>
