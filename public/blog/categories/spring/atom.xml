<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: spring | Hegel2011的博客]]></title>
  <link href="https://swachian.github.io//blog/categories/spring/atom.xml" rel="self"/>
  <link href="https://swachian.github.io//"/>
  <updated>2025-05-03T21:32:56+08:00</updated>
  <id>https://swachian.github.io//</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[spring cloud 服务治理]]></title>
    <link href="https://swachian.github.io//blog/2017/10/07/spring-cloud-fu-wu-zhi-li/"/>
    <updated>2017-10-07T13:54:00+08:00</updated>
    <id>https://swachian.github.io//blog/2017/10/07/spring-cloud-fu-wu-zhi-li</id>
    <content type="html"><![CDATA[<p>服务治理是近年来架构中的热点部分，尽管比照ICE这些内容其实十几年前就已经有了，
只是五六年前伴随着系统越做越庞大，才变得必要起来。</p>

<p>简单理解一下，其主要内容基本是：</p>

<ul>
<li>要有一个服务中心，服务中心最好是集群的</li>
<li>要能向中心注册服务，服务的地址用名称而不是ip硬绑</li>
<li>要能发现一个服务，其实就是用名称通过服务中心找到服务的ip和端口</li>
<li>要一个可以轮流访问服务集群的客户端</li>
<li>此外再配合上消息总线等内容</li>
</ul>


<p>有了这些，基本一个服务治理的框架就基本形成了。</p>

<p>《Spring Cloud 微服务实战》是一本很不错的书，有动手的介绍，有源码的分析，写的也算精炼。</p>

<h3>Eureka 服务治理中心</h3>

<p>启动服务中心后，配置客户端主要包含两部分：</p>

<ul>
<li>服务注册相关信息： 包括服务中心地址、服务获取间隔时间、可用区域，以<code>eureka.client</code>为前缀</li>
<li>服务实例相关的配置信息： 包括实例的名称、IP地址、端口号、健康检查路径等，以<code>eureka.instance</code>为前缀</li>
</ul>


<h3>Ribbon</h3>

<p>Spring Cloud的负载均衡是在客户端实现的。
<code>WeightedResponseTimeRule</code>是个比较复杂的实现。</p>

<h3>Hystrix</h3>

<p>这是一个容错断路器，当出现超时等状况时直接调用指定的回掉函数。使用了RxJava库的异步操作模式，
实现了发送+观察的效果，所以可以中断请求。</p>

<h3>Feign</h3>

<p>在RestTemplate上进一步抽象，实现和Spring MVC对等的method封装。因为要组client，所以<code>@RequestParam</code>
中的value不能少。</p>

<pre><code class="java">@FeignClient("Hello-Service")
public interface HelloService {
  @RequestMapping(value="/hello1", method=RequestMethod.GET) //指明要访问的路径和方法
  User hello(@RequestParam("name") String name, @RequestHeader("age") Integer age); //指明构造请求是的参数名称
}

//调用方式
helloService.hello("DiDi", 30);
</code></pre>

<h3>Zuul Api 网关</h3>

<p>网关的事情就两条：<br/>
1. 路由
2. 过滤</p>

<p>Zuul的路由结合了治理服务，下面就把一个路径全部转发去了一个服务</p>

<pre><code>zuul.routes.service-a.path=/aaa/**
zuul.routes.service-a.serviceId=Hello-Service
</code></pre>

<p>过滤器则可以通过继承一个抽象类<code>ZuulFilter</code>并实现4个方法来实现。</p>

<pre><code class="java">public class AccessFilter extends ZuulFilter {
  ....
}

@EnableZuulProxy
@SpringCloudApplication
public class Application {
  public static void main(String[] args) {
    new SpringApplicationBuilder(Application.class).web(true).run(args);
  }

  @Bean
  public AccessFilter accessFilter() {
    return new AccessFilter();
  }
}
</code></pre>

<h3>Spring Cloud Config</h3>

<p>基于git（也可以是svn或本地目录）的配置中心，其实就是一个可以保存各种配置信息，然后由其他微服务读取后拉起应用。</p>

<h3>Bus 和 Stream 消息总线和消息流</h3>

<p>目前只支持RabbitMQ和kafka两种队列，kafka更多的好像和实时日志处理流相关</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thymeleaf感想]]></title>
    <link href="https://swachian.github.io//blog/2017/05/21/thymeleafgan-xiang/"/>
    <updated>2017-05-21T00:07:00+08:00</updated>
    <id>https://swachian.github.io//blog/2017/05/21/thymeleafgan-xiang</id>
    <content type="html"><![CDATA[<p>刚使用spring boot时得知thymeleaf取代了jsp的默认地位，我是有所抵触的，做法就是重新配置回了jsp。
然而随着java web开发前后端业已分离的现实，逐步明白view层是thymeleaf还是jsp已经不再重要。因为java已变成
服务成守候在服务器侧，而原先页面的工作已经完全交给了（不需要会java）的前端人员，且他们是完全可以胜任的。</p>

<p>实际上截至目前，最新版的thymeleaf已经到了3.0以上的版本，而spring boot最新版集成的还是<strong>2.x</strong>的thymeleaf的版本，
可以认为这块已经处于冷淡的状态。</p>

<p>不过，凡是总有例外。这次又碰见了需要产生静态页面的业务场景，其中有不少的业务逻辑，所以还是需要一个view层，考虑到
新团队的习惯，决定采用thymeleaf吧，这样以后维护可以交给前端来做。于是简易学习了一下leaf，感觉还是不错的。</p>

<p>leaf最大的特色就是前端人员可以直接打开leaf所在的html页面，并做到完全的无异物感。脚本、链接完全动态静态可以分开。
这样解决了jsp长期以来美工介入很困难的问题,同时做的又比freemaker等更加到位。内置标签支持的语言语法也很现代化和好用，一般有jsp经验的程序员，
花个半天看一下一百来页的手册并动手实践一下，就完全可上手了。至于<code>jsp</code>，是可以退出历史舞台了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring boot in action]]></title>
    <link href="https://swachian.github.io//blog/2016/09/19/spring-boot-in-action/"/>
    <updated>2016-09-19T14:47:00+08:00</updated>
    <id>https://swachian.github.io//blog/2016/09/19/spring-boot-in-action</id>
    <content type="html"><![CDATA[<ul>
<li>Auto-Config</li>
<li>用starter处理依赖</li>
<li>CLI 命令行处理启动等</li>
<li>Actuator 监控组件 , 通过web或者shell</li>
</ul>


<pre><code>spring version 
spring --version
spring shell # windows下打开可以自动补全的功能
</code></pre>

<h3>工程初始化</h3>

<pre><code>spring init -dweb,jpa,security --build gradle -p jar -x //-x表示生成到当前目录
spring init -dweb,jpa,security --build gradle -p war myapp //表示生成工程到myapp目录
</code></pre>

<pre><code>@SpringBootApplication
public class DemoddfApplication {

public static void main(String[] args) {
SpringApplication.run(DemoddfApplication.class, args);
}
}
</code></pre>

<p>@SpringBootApplication 起到了过去3个标注的作用，打开了自动配置和自动扫描。如果有新的配置要求，@Configuration用在其他配置类中进行配置的扩充。而主class可以不必修改</p>

<p>用starter定义可实现更高度的抽象，也不必给出每个组件的版本号。通过<code>mvn dependency:tree</code>可查看实际的包依赖关系.
starter就是普通的maven或gradle依赖，所以可以exclude也可以指定更直接的版本。</p>

<h3>自动配置定制化的举例</h3>

<p>安全是最好的需要自己自行设置的例子，not one--size-fits-all。
这是yml方式
<code>
server:
port: 8443
ssl:
key-store: file:///path/to/mykeys.jks
key-store-password: letmein
key-password: letmein
</code></p>

<p>配置数据源</p>

<pre><code>spring:
datasource:
url: jdbc:mysql://localhost/readinglist
username: dbuser
password: dbpass
driver-class-name: com.mysql.jdbc.Driver
</code></pre>

<h3>属性信息的几种来源</h3>

<ol>
<li>Command-line arguments</li>
<li>JNDI attributes from java:comp/env</li>
<li>JVM system properties</li>
<li>Operating system environment variables</li>
<li>Randomly generated values for properties prefixed with random.* (referenced when setting other properties, such as `${random.long})</li>
<li>An application.properties or application.yml file outside of the application</li>
<li>An application.properties or application.yml file packaged inside of the application</li>
<li>Property sources specified by @PropertySource</li>
<li>Default properties</li>
</ol>


<p>在application.properties中指定<code>spring.profiles.active</code>的值后，boot就会读取application-{active}.properties的值</p>

<h3>自动化测试</h3>

<p>@WebIntegrationTest Test class有这个标注就会让spring启动一个测试的tomcat或jetty进程</p>

<pre><code>@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(
classes=ReadingListApplication.class)
@WebIntegrationTest

public class SimpleWebTest {
@Test(expected=HttpClientErrorException.class)
public void pageNotFound() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject(
"http://localhost:8080/bogusPage", String.class);
fail("Should result in HTTP 404");
} catch (HttpClientErrorException e) {
assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
throw e;
}
}
}
</code></pre>

<p>代入参数
<code>@WebIntegrationTest(value={"server.port=0"})</code> 和 <code>@WebIntegrationTest("server.port=0")</code></p>

<p>selenium的用ie模拟访问自己的服务很有意思，值得制作一个。</p>

<pre><code class="java">                FirefoxDriver browser = new FirefoxDriver();
    browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
    String baseUrl = "http://www.baidu.com/";
    browser.get(baseUrl);
    String currentUrl = browser.getCurrentUrl();
    assertEquals(baseUrl +"/readingList", currentUrl);

    assertEquals("You have no books in your book list", 
                 browser.findElementByTagName("div").getText());

    browser.findElementByName("title").sendKeys("BOOK TITLE");
    browser.findElementByName("author").sendKeys("BOOK AUTHOR");
    browser.findElementByName("isbn").sendKeys("1234567890");
    browser.findElementByName("description").sendKeys("DESCRIPTION");
    browser.findElementByTagName("form").submit();

    WebElement dl = 
        browser.findElementByCssSelector("dt.bookHeadline");
    assertEquals("BOOK TITLE by BOOK AUTHOR (ISBN: 1234567890)", 
                 dl.getText());
    WebElement dt = 
        browser.findElementByCssSelector("dd.bookDescription");
    assertEquals("DESCRIPTION", dt.getText());
</code></pre>

<p>《Selenium WebDriver in Practice》但还没完成，可能要到2016年10月份才能出版</p>

<p>/beans 列出创建的全部bean<br/>
/autoconfig 列出自动配置生效和未生效的内容<br/>
/env 列出设置的环境<br/>
/configprops 列出所有的参数<br/>
/metrics 列出访问的指标<br/>
/trace 给出近100个http请求的处理信息<br/>
/dump 给出所有线程的情况<br/>
/health 表明是否UP<br/>
/info 列出属性文件中info.开头的信息，但似乎有乱码</p>

<p>actuator的remote shell
默认启动一个端口在2000，每次启动时会生成一个密码，可以用ssh访问</p>

<pre><code>ssh user@localhost -p 2000
Password authentication
Password:
</code></pre>

<p>自己定义metrics：</p>

<p>actuator有CounterService服务，可以用于增加值。
```
public interface CounterService {
void increment(String metricName);
void decrement(String metricName);
void reset(String metricName);
}</p>

<pre><code>
GaugeService是记录值
</code></pre>

<p>public interface GaugeService {
void submit(String metricName, double value);
}
```</p>

<p>自定义Health</p>

<pre><code>@Component
public class AmazonHealth implements HealthIndicator {
@Override
public Health health() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject("http://www.amazon.com", String.class);
return Health.up().build();
} catch (Exception e) {
return Health.down().build();
}
}
}

//还可以加入更多的细节内容，使用withDetail

return Health.down().withDetail("reason", e.getMessage()).build();
</code></pre>

<p>上述endPoint的保护需采用所有spring暴露的链接一致的方式</p>

<p><code>management.context-path=/mgmt</code>，其中的<code>management.context-path</code>可以给spring actuator定义全部的前缀</p>

<p>这样可便于统一控制
<code>.antMatchers("/mgmt/**").access("hasRole('ADMIN')")</code></p>

<h3>部署时调整production环境变量</h3>

<p><code>@Profile("production")</code></p>

<p><code>export SPRING_PROFILES_ACTIVE=production</code></p>

<p>最简单的是export active的环境变量为<code>production</code></p>

<h3>spring的db migrate，不算很实用吧</h3>

<p>Spring Boot includes auto-configuration support for two popular database migration
libraries:<br/>
■ Flyway (http://flywaydb.org)  --- 直接采用SQL编写ddl<br/>
■ Liquibase (www.liquibase.org) --- 使用yaml json等</p>

<h3>附录</h3>

<pre><code>&lt;dependency&gt;
&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>

<p>开发工具具备自动重启的功能，但下面这些静态资源默认是exclude的: /META-INF/resources, /resources, /static, /
public, /templates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StringHttpMessageConverter的头属性]]></title>
    <link href="https://swachian.github.io//blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing/"/>
    <updated>2016-05-19T17:22:00+08:00</updated>
    <id>https://swachian.github.io//blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing</id>
    <content type="html"><![CDATA[<p>使用Spring MVC中的<code>@ResponseBody</code>或者<code>@RestController</code>产生的json消息格式会产生一个很大的响应头。
其主要内容就是<code>Accept-Charset</code>会罗列几乎所有的charset变量，从utf到gbk再到iso等等。而这很大程度上是无谓的开销。</p>

<p>要解决可以在xml的配置中设置</p>

<pre><code class="xml">
  &lt;mvc:annotation-driven&gt;
    &lt;mvc:message-converters register-defaults="true"&gt;
      &lt;!-- 将StringHttpMessageConverter的默认编码设为UTF-8 --&gt;
      &lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;
        &lt;constructor-arg value="UTF-8" /&gt;
        &lt;property name="writeAcceptCharset" value="false" /&gt;
      &lt;/bean&gt;
    &lt;/mvc:message-converters&gt;
  &lt;/mvc:annotation-driven&gt;
</code></pre>

<p>注意给<code>StringHttpMessageConverter</code>的属性<code>writeAcceptCharset</code>设置成<code>false</code></p>

<p>---- update on 2016.10.17</p>

<p><code>RestTemplate</code>作为客户端发送请求时也有类似的问题，会带出一串过长的Charset。解决办法如下:</p>

<pre><code class="java">static RestTemplate restTemplate = new RestTemplate();
  static {
    List&lt;HttpMessageConverter&lt;?&gt;&gt; converts = restTemplate.getMessageConverters();
    for (HttpMessageConverter&lt;?&gt; convert : converts) {
      if (convert.getClass() == StringHttpMessageConverter.class) {
        ((StringHttpMessageConverter) convert).setWriteAcceptCharset(false);
      }
    }
  }
</code></pre>

<p>获得converts，然后对String的Convert进行设置</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring的@SessionAttributes和@ModelAttribute在Redirect时的特殊表现]]></title>
    <link href="https://swachian.github.io//blog/2015/11/14/springde-at-sessionattributeshe-at-modelattribute/"/>
    <updated>2015-11-14T22:50:00+08:00</updated>
    <id>https://swachian.github.io//blog/2015/11/14/springde-at-sessionattributeshe-at-modelattribute</id>
    <content type="html"><![CDATA[<p><code>@ModelAttribute</code> 在Spring中有两个地方可以填写：</p>

<ul>
<li><p>Controller的Action method的参数前标注，提示需要设置该值<br/>
```java
@ModelAttribute
public void getUser(HttpServletRequest request, HttpServletResponse response, HttpSession session, Model model) {</p>

<p>...
model.addAttribute("mdn", mdn);
model.addAttribute("userInfo", userInfo);
model.addAttribute("helper", new HomeHelper(userInfo));</p></li>
</ul>


<p>}
```</p>

<ul>
<li>Controller中单独的方法前标注，该方法通常不是action，但加注<code>@ModelAttribute</code>后会在Action method执行前被调用<br/>
<code>java
@RequestMapping(value = "/addDiy", method = RequestMethod.GET)
public ModelAndView addDiy(@ModelAttribute("operator") String operator) {
...
}
</code></li>
</ul>


<p>使用效果来讲就是确保第一种情况下，action method的参数会被设置，而设置的根据主要是以下4种：</p>

<ol>
<li>来自<code>@SessionAttributes</code>使用中被设置在session中的<code>ModelAttribute</code></li>
<li>上面提到的第二个使用的方法中产生的对象</li>
<li>基于URI的模板变量+type converter</li>
<li>直接new的，即默认的构建方法</li>
</ol>


<pre><code class="java">@Controller
@RequestMapping(value = "/home")
@SessionAttributes({"operator" })
public class HomeController {
    ...
    /*登陆验证，成功后转至home action，验证失败则继续显示login页面*/
    @RequestMapping(value="login", method = RequestMethod.POST)
    public String loginPost(HttpSession session, Model model, String username, String password, String yzm, RedirectAttributes redirectAttributes) {
        redirectAttributes.addFlashAttribute("username", username);
        redirectAttributes.addFlashAttribute("password", password);

        /*检测验证码是否正确*/
        if (!StringUtils.equals((String) session.getAttribute("rand"), yzm)) {
            redirectAttributes.addFlashAttribute("errorMessage", "验证码不正确，请输入正确的验证码");
            return "redirect:/home/login";
        }

        CInterfaceOper ciop = null;
        String status = null;
        try {
            ciop = new CInterfaceOper(username, password);
            status = ciop.getUserStatus();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        if (StringUtils.equals(status, ConstVar.Status.Normal)) { //用户业务状体正常


            //由modelattribute获取operator时使用
            // redirect的情况下，加在model里面不会被sessionAttributes处理到session中
            //model.addAttribute("operator", operator);
            redirectAttributes.addFlashAttribute("operator", username);

            String lastUri = (String)session.getAttribute(ConstVar.REQUEST_URI);
            if (StringUtils.isEmpty(lastUri)) {
                return "redirect:/home";
            } else {
                return "redirect:"+lastUri;
            }

        } else {
            redirectAttributes.addFlashAttribute("errorMessage", "登录失败，请检查用户名和密码");
            return "redirect:/home/login";
        }
    }
}
</code></pre>

<p>在<code>Controller</code>类前标注的<code>@sessionAttributes</code>就可以把action中的model包含的同名属性固化在session中。
但是，因为整个action的返回不是直接渲染jsp，而是使用了<code>redirect:/home</code>这样的重定向语句，所以起初并没有奏效。
而是要把<code>operator</code>放在<code>redirectAttributes</code>中，才会被固化。这说明spring选择固化属性是当且仅当
在渲染页面前。</p>

<p>在需要使用该session的属性action处，直接使用下面代码即可。</p>

<pre><code class="java">@RequestMapping(value = "/addDiy", method = RequestMethod.GET)
public ModelAndView addDiy(@ModelAttribute("operator") String operator) {
  ModelAndView mav = new ModelAndView();
    List&lt;RingRequest&gt; ringrequest=ConstVar.DIV_LIST;
    RingRequest ringrequest1=null;
    if(ringrequest!=null&amp;&amp;ringrequest.size()&gt;0){
       ringrequest1=lingyingdiyService.add(ringrequest.get(0), operator);
    }
  mav.setViewName("webapp/ringDiy/lingyindiy4");
  mav.addObject("ringrequest", ringrequest1);
  return mav;
}
</code></pre>

<p>在Session范围内使用注入的逻辑还是很清晰的，只是需要注意一下redirect带来的坑。</p>
]]></content>
  </entry>
  
</feed>
