<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: rails | Hegel2011的博客]]></title>
  <link href="https://swachian.github.io//blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://swachian.github.io//"/>
  <updated>2025-05-03T21:32:56+08:00</updated>
  <id>https://swachian.github.io//</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于handling rails view的神作]]></title>
    <link href="https://swachian.github.io//blog/2015/08/01/guan-yu-handling-rails-viewde-shen-zuo/"/>
    <updated>2015-08-01T22:25:00+08:00</updated>
    <id>https://swachian.github.io//blog/2015/08/01/guan-yu-handling-rails-viewde-shen-zuo</id>
    <content type="html"><![CDATA[<p>http://tutor.lugolabs.com/articles/18-handling-csv-views-in-ruby-on-rails</p>

<p>确实扩展的够方便，实施的够优雅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己生产sdoc]]></title>
    <link href="https://swachian.github.io//blog/2015/04/09/zi-ji-sheng-chan-sdoc/"/>
    <updated>2015-04-09T12:26:00+08:00</updated>
    <id>https://swachian.github.io//blog/2015/04/09/zi-ji-sheng-chan-sdoc</id>
    <content type="html"><![CDATA[<p>很长时间以来，使用ruby rails查api时都喜欢用Searchable API，又称sdoc。
原先都是直接去sdoc维护的站点下载的，只是这个站点的更新频率越来越低，所提供的ruby和rails的版本也略老，于是决定自己使用sdoc的gem来生成一下。</p>

<ol>
<li><p>先安装sdoc， <code>gem install sdoc</code>, 安装完成后会新增两个可执行文件<code>sdoc</code>和<code>sdoc-merge</code></p></li>
<li><p>进入自己下载的ruby源代码的父目录，执行
<code>sdoc --main ruby-2.2.1/README.md  -x test -x example -x bin -N -x lib/rdoc  --title "Ruby 2.2" --op ~/sdocruby-2.2 ruby-2.2.1 ruby-2.2.1/README</code></p></li>
</ol>


<p>其中，ruby-2.2.1是当前rails的版本，--op指示生成的sdoc所在的目录，-x是不要去解析这些内容，运行几分钟后，文件就生成了。</p>

<p>然后把生成的目录放到自己方便的地方即可。</p>

<p>参考链接：</p>

<p><a href="http://pjkh.com/articles/building-your-own-rails-and-ruby-searchable-api-docs/">1</a>
<a href="http://pan.baidu.com/s/1i3vgC09">2 懒人下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Rails Hosting 调查]]></title>
    <link href="https://swachian.github.io//blog/2014/08/16/2014-rails-hosting-diao-cha/"/>
    <updated>2014-08-16T16:03:00+08:00</updated>
    <id>https://swachian.github.io//blog/2014/08/16/2014-rails-hosting-diao-cha</id>
    <content type="html"><![CDATA[<p>2014年是DHH公开Rails的10周年，整个社区范围又进行了一次关于
Rails部署主机的<a href="http://rails-hosting.com/Results/2014/index.html">调查</a>.
参加的人数并不算多，1000+。</p>

<p>一. 人口分布</p>

<p>参加调查的人，普遍拥有3-5年和5-7年的Rails工作经历。
个人差不多是7年了，再早的也确实不多。而小于1年的比例很低，
或许是新手都还不会参与部署的事情吧。</p>

<p>除了Rails之外，使用其他Ruby 框架的用户依然不多。
而且大都只是在一些特定的项目上使用Sinatra Padrino这些更轻量的框架。</p>

<p>参加调研的主要群体还是Web开发者（Web Developer），
以及部分系统管理员和DevOps（含义为开发带运营）。</p>

<p>大部分现在日常维护的Rails应用在5个以内，超过15个的就比较少了。</p>

<p>二. 软件</p>

<p>Ruby的版本，主流已经是2.0和2.1，但还有很大一部分在继续使用1.9.3</p>

<p>Rails的版本，则使用最多的是4.0，3.2和2.3.x。
和我手头的也比较接近吧。</p>

<p>开发环境，这方面当然是Mac占据了75%的优势，剩下20%是Linux，
还有低于3%是Windows。这个毫无疑问，运行Rails至少需要一个
Linux，而最方便和快捷的确实Mac。而部署的话，最后还是绕不开Linux。</p>

<p>有一半以上的人在生产环境也使用了Rvm和Rbenv这些ruby版本管理工具。
不过rvm的占有率还是比rbenv高那么多倒是没有想到。<br/>
30%的人都不跟踪生产环境的运行产生的例外.目前也没有一统江湖的工具选择。
以前的霸主是Airbrake，不知道<strong>HoneyBadger</strong>是什么状态。</p>

<p>Rails不使用监控工具的比例很高，超过一半了，这可能也是一种社区文化吧。
<strong>Pingdom</strong>和Nagios使用的还是挺多的。</p>

<p>Nginx+Unicorn已经取代了Nginx+Passenger，成为最主流的部署方式。
<strong>Puma</strong>也获得了良好的增长。</p>

<p>三. 社区</p>

<p>大部分Rails的软件都是新软件，说不清这点是好是坏。
参加社区大会活动的也是少数。程序员还是宅男居多啊。</p>

<p>有过部署其他语言应用的调查者比例显著下降，看来新人不少。
而且即使部署过其他语言的，也是Php,Node.js，3个js前端框架和Django。</p>

<p>Rails的部署大部分人认为比其他的容易。大部分都认为自己的Linux水平是胜任的、精通的、专家级别的。
是Rails的开发者都那么自信、还是认为这样就算够用了？</p>

<p>性能监控工具的使用比例很高，New Relic是统治者。
Monit是主要的保证程序继续运行的工具。考虑到Unicorn，确实不是必须的了。</p>

<p><strong>Chef</strong>和<strong>Puppet</strong>是最主要的配置管理工具。</p>

<p>四. 版本控制</p>

<p>不使用版本控制的Rails开发者是不存在的。
毫无疑问，主流是git，大部分svn的用户都迁移了过来。</p>

<p>github bitbucket是最主要的服务托管主机。当然，也有很多是使用
自己的主机。</p>

<p>五. 自动化部署</p>

<p>Capistrano是首要的选择，但Git也变成了一种主要是部署工具。
Heroku是这方面的典型代表吧。</p>

<p>至于对部署过程的满意程度，则是永远没有终点的。</p>

<p>六. 数据库</p>

<p>MySQL 和 PostgreSQL是主要Rails数据库选择。
其实互联网行业去IOE应该是个伪命题，因为互联网企业普遍起步的时候各种资源紧张，
一直是以免费的开源的软件为主，也只有阿里这种以前学银行让IBM Sun
给他们做项目的半路出家的互联网公司，才有去IOE的需求。但反过来对银行、金融界、大国企都带来了冲击。</p>

<p>个人觉得二者之间还是MySQL吧。只是很多托管站点确实不再提供MySQL的选项。</p>

<p>NoSQL里面不出意外，Redis和Mongodb的接触者是较多的。
但是，竟然把<strong>ElasticSearch</strong>也算作一种NoSQL。
HBase CouchDB和Rails社区还是不搭。</p>

<p>七. 主机</p>

<p>Amazon的云服务是国外最流行的。自己的业务，确实还是找个虚拟机就好。</p>

<p>大部分人满意现在的部署选择，而最大的不满还是价格。看来用Rails的普遍喜欢精打细算。
单个应用的月开销集中在25美金一个月以下，但是上万美金一个月的也不少。</p>

<p>大部分在部署和主机上的预算小于月预算的10%。同运营一个公司比较起来，
部署和服务器方面的开销确实只是小头。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails2.3老版本的迁移安装手记]]></title>
    <link href="https://swachian.github.io//blog/2014/05/08/rails2-dot-3lao-ban-ben-de-qian-yi-an-zhuang-shou-ji/"/>
    <updated>2014-05-08T22:08:00+08:00</updated>
    <id>https://swachian.github.io//blog/2014/05/08/rails2-dot-3lao-ban-ben-de-qian-yi-an-zhuang-shou-ji</id>
    <content type="html"><![CDATA[<p>一个五六年前开发的Rails应用更换主机需要重新部署。这个Rails的版本还是2.3.5，Ruby版本只是1.8.7. 因为是内部的一个小应用，所以一直也没翻新升级。彼时还没有bundle，而现在对版本依赖的管理已经离不开bundle了。
下面就是记录一下如何用bundle来安装Rails 2.3的应用。</p>

<h3>下载ruby 1.8.7</h3>

<p>减少麻烦，还是保持一致的版本迁移。新机器暂时没有安装其他ruby版本的需求，所以暂不考虑rbenv。</p>

<pre><code class="sh">wget http://ruby.taobao.org/mirrors/ruby/ruby-1.8.7-p358.tar.gz
tar -zxvf ruby-1.8.7-p358.tar.gz 
cd ruby-1.8.7-p358
./configure --prefix=/usr/local/ruby187
make
make install
/usr/local/ruby187/bin/ruby -ropenssl -rzlib -rreadline -e "puts :success" 
</code></pre>

<p>看到输出<code>success</code>后，证明ruby各安装库已全部编译进去。主机是一台CentOS 6.4，所以安装1.8.7相当之顺利。
安装完毕后，把ruby的运行路径加到环境变量PATH的最前面。</p>

<h3>安装rubygems</h3>

<p>这个已经很久没有手动安装了，ree和ruby1.9之后rubygems都集成到ruby里面去了，1.8.7还是需要手工安装的。为了减少麻烦，比如能安装thin、能使用bundle、又尽量满足五年前的gem环境，选择了1.4.0.</p>

<pre><code class="sh">wget http://rubyforge.org/frs/download.php/73763/rubygems-1.4.0.tgz
tar -zxvf rubygems-1.4.0.tgz 
cd rubygems-1.4.0
ruby setup.rb 
</code></pre>

<h3>安装Oracle即时客户端和ruby-oci8</h3>

<p>这个东西现在安装倒比以前简单些了。具体可以参考ruby-oci8的官方帮助，关键是要下载3个instant相关的客户端。其实sdk等两个包是很小的，最后都解压到一个目录下。随后，就是设置<code>LD_LIBRARY_PATH</code>的值。关键一点是注意不要配错这个环境变量指向的路径。</p>

<pre><code class="sh">export LD_LIBRARY_PATH=/opt/instantclient_10_2:/usr/local/lib:/usr/lib
wget http://dl.bintray.com/kubo/generic/ruby-oci8-2.0.6.tar.gz
tar -zxvf ruby-oci8-2.0.6.tar.gz 
cd ruby-oci8-2.0.6
make
make install
</code></pre>

<h3>Gemfile和bundle</h3>

<pre><code class="ruby">source "http://ruby.taobao.org"

gem 'rails', '2.3.5'

gem 'activeresource', '2.3.5'
gem 'activesupport', '2.3.5'
gem 'capistrano', '2.5.17'
gem 'fastthread', '1.0.7'
gem 'highline', '1.5.2'
gem 'json_pure', '1.4.3'
gem 'nokogiri', '1.4.1'
gem 'rack', '1.0.1'
gem 'rake', '0.8.7'
gem 'RedCloth', '4.2.0'
gem 'rubyforge', '2.0.4'

gem "haml",  '3.0.12'
gem 'will_paginate', '2.2.2'
gem 'paperclip', '2.3.1'
gem 'formtastic', '0.9.8'
gem 'jintastic', '1.1.0'
gem 'ruby-mp3info', '0.6.13'
gem 'mime-types', '1.16'
gem "authlogic", '2.1.5'
gem "acl9", '0.12.0'
gem "paginator", '1.1.1'
gem "spreadsheet", '0.6.4.1'

gem "thin", "0.5.2"
gem 'activerecord-oracle_enhanced-adapter', '1.2.4'   

gem 'sqlite3-ruby'
gem  'rest-client',  '1.6.7'  
</code></pre>

<p>然后执行<code>bundle install</code> , 相关的Gem就可以安装到位了。 <code>thin start -e production</code> ， 通过这个命令应用就能在生产环境下启动了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT系统架构的模式]]></title>
    <link href="https://swachian.github.io//blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi/"/>
    <updated>2014-04-12T16:18:00+08:00</updated>
    <id>https://swachian.github.io//blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi</id>
    <content type="html"><![CDATA[<p>近日终于得以拜读了Martin Fowler的大作《The Patterns of Enterprise Application Architecture》。</p>

<p>最早了解这本书是从robbin那里，在距今很多年前的一个Java书单里。彼时他对这本书的评价大意是适合要自己动手开发框架的人看，对应用开发没什么直接的帮助。同时，他认为读下来并没有太多感觉。而回过头来看，读过这本书的中国程序员应该是不少的，但真的从中汲取营养做出东西来的人几乎没有。从这也可以看出中国工程师在动手和创新方面确实有些先天不足。</p>

<p>然而，这本书对于DHH、对于Rails则可以说是一切的开端。对这本书贯彻的最到位、突破的最有力的，非DHH用Ruby开创Rails莫属。本书成书于2002年，彼时企业应用这个称呼比较时髦，按作者的说法，他的本意是IT系统的架构，而这也符合后来软件架构所适用的范围。如病人记录、订单跟踪、信用系统、保险、汇率兑换，这些都是IT系统，也就是企业应用。而文字处理、电梯控制、交换机、编译器、操作系统、游戏则基本不能算作企业应用。只是，2002年之后，企业应用这个名字被用的烂了，反而成了大慢笨的代表，导致07/08年的时候，甚至有不少人认为Rails不适合做企业应用。但彼时我感觉Rails对这些简单的所谓企业应用才是大杀器，毕竟大部分企业应用其实就是重度的CRUD应用，而这方面Rails堪比马克沁机枪对单兵的作战效果。至于互联网类的Web应用，交互、设计是占大头的，Rails投入使用的实际效果反而不如企业应用那么明显。</p>

<p>这本书确实是rails的设计指南，或者说是rails的设计文档。但DHH的突破和创新之处还是很明显的：</p>

<ol>
<li>本书是基于.Net 和 Java的，但提及了Python和Ruby，而作者更多的应该只是一种不抱希望的假设罢了，然而DHH真的用Ruby把这本书实作了出来。</li>
<li>虽然ActiveRecord取自于本书，然而作者本身并不是把这种模式看成一种自动化的ORM方案。广义的ORM，可以包含Dao(Table Gateway)、Data Transfer Object（json，xml）以及datamapper这些把记录化作内存对象所有模式，但狭义来看ORM是仅包含datamapper的。ActiveRecord在Fowler处其实只是一种Dao的变种。而DHH直接将ActiveRecord升格成了更高度自动化的ORM模式。</li>
<li>在视图层，坚决使用了Helper模式，未加入标签也未停留在scriplet阶段。</li>
</ol>


<p>对我而言，遗憾的一点是很晚才真的读了这本书，不知是喜是优的是因为晚读所以对这本书的内容很认可，而聊以自我安慰的是如果早读了说不定我也能
创造点什么东西，当然，最后一点纯属自娱自乐。<br/>
不过，这本书以及Rails，确实定义了过去10年Web开发的发展方向。因为Rails框架实际上已经成为了Web后台框架的一个标杆，
例如Spring MVC现在走的也是类似的道路。所以，这本书确实深深影响了Web应用的开发。</p>

<p>还有一点值得一提，就是这本书是真的基于Web总结的。很多模式的书籍，其实来源于客户端界面程序，比如从做菜单中提取出来的那些模式，而本书
是基于Web的，这就使得它和很多模式的书籍很不一样了。也因此，它才可以作为Rails的设计蓝图。而所有这些模式，大都来自于实践。实际上，
至今Rails也是Web开发优秀实践的最佳代表。而且Web开发的实践模式也不止书中提到的这些，实际上了解这些模式最好的方法就是接触Rails。虽然现在的模式比本书包含的更多了，本书依然很值得推荐阅读。</p>

<h2>笔记整理</h2>

<p>业务逻辑其实是业务反逻辑： complex business illogic</p>

<h3>分层的坏处</h3>

<ol>
<li>级联变更（Cascading Changes），就是改了一个地方往往要改n个地方</li>
<li>性能损害</li>
</ol>


<p>三层模型之所以能够流行，也是因为Web的流行。Client-Server工具中，是很难实现三层配置使用的。不过如今的App开发，好像也是三层模式。<br/>
但总体而言三层模型的流行是Web和Java等崛起的后果。</p>

<h3>常见的业务代码组织形式</h3>

<ul>
<li>Transaction Script</li>
<li>Domain Module , OO对TS的改变</li>
<li>Service层</li>
</ul>


<h3>会话状态</h3>

<ul>
<li>客户端 Cookie</li>
<li>服务端（内存）</li>
<li>共享服务端（数据库 Redis Memcache 共享文件夹）</li>
</ul>


<h3>分布式</h3>

<p>i
* 不要把不同的功能（对象）组件放在不同的服务器上，这样性能有问题
* 进程间只能尽量使用粗粒度接口，如N+1一次性读取同时返回很多信息
* 同一台服务器内部使用细粒度调用，远程外观模式<br/>
* Data Transfer Object ，传输对象，上面的那种是调用方法
* 同步的接口为主
* 异步的基于消息的处理方式
* 推动你思考而不是代替你思考，最终享受乐趣的是你，承担痛苦的也是你</p>

<h3>锁的种类</h3>

<ol>
<li>乐观锁，比如自己建立版本号；</li>
<li>悲观锁，就是常见的for lock；</li>
<li>粗颗粒（coarse-grainned)锁，就是一堆对象映射成一个入口，在入口处实施加锁；</li>
<li>隐含锁，把锁加到框架里，由Lock Manager和Lock Mapper来实现<strong>模板方法</strong>。</li>
</ol>


<h3>Stub和Mock</h3>

<p>Stub：用一个类直接替换某接口的实现，在测试或开发过程中使用这个替换类<br/>
Mock：用一个服务的重写来模拟某服务</p>
]]></content>
  </entry>
  
</feed>
