<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 项目管理 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/项目管理/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2025-05-02T17:47:49+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[俞军的产品经理方法论]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/12/29/yu-jun-de-chan-pin-jing-li-fang-fa-lun/"/>
    <updated>2019-12-29T20:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/12/29/yu-jun-de-chan-pin-jing-li-fang-fa-lun</id>
    <content type="html"><![CDATA[<p>先是在caoz的微信上拜读了俞军产品方法论中关于产品经理的选拔方式，同样是从事脑力劳动，依赖主观能动性，发现招聘一个好的产品和一个好的程序员，很大程度上是相通的或者类似的。于是在书籍上市后就火速订购了一本。花了四五天时间看完，对产品和俞军的产品观都有了新的认识。</p>

<p>俞军的经历主要是00年-09年在百度，以及16年被滴滴请出山（加拿大）之后到19年离开滴滴。而滴滴的架构下，俞军是向他们的CTO汇报的。这个以他的段位而言，似乎有点委屈。</p>

<p>从已有的报道看，俞军在滴滴的成绩和他在百度的成就有很大的差距，当然这个主要是说产品结果，然而在团队培养和传道授业解惑上则较百度时又提高了档次。</p>

<h1>1. 什么是产品经理？</h1>

<p>最早的产品经理就是营销经理，后来是项目经理，在后来是需求经理。分别对应产品从产生、生产、销售的不同环节。其实，本身老板才是公司最主要的产品经理，决定了业务的方向和重要细节。</p>

<p>产品经理需要学习心理学，需要明白产品效用、边际、成本和供需关系。产品需要明白用户模型和交易模型，明白产品的价值和成本。</p>

<h1>2. 企业、用户、产品的关系</h1>

<p>企业以产品为媒介，与用户进行价值交换，达成创造商业价值的目的。用户价值是那些被企业选择过的“用户价值”，即媒介是产品经理选择出来的。</p>

<p>用户不是自然人，而是需求的集合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage It]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/12/01/manage-it/"/>
    <updated>2019-12-01T10:49:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/12/01/manage-it</id>
    <content type="html"><![CDATA[<p>项目的驱动因素、约束以及活动余地。少问“为什么”，少问“怎么做”</p>

<p>镀金类需求和核心需求。</p>

<h3>项目章程模板：</h3>

<ul>
<li>远景：项目的意义，远景式的话语</li>
<li>需求：项目的驱动因素</li>
<li>目标：解决技术债务、添加更多的自动化测试、设计冒烟测试，这些都可能是项目目标</li>
<li>成功标准：包括功能1、2、3，提升产品性能，测出相关数值，项目经理要确保成功标准中不会包含非项目人员才能完成的任务，比如卖出50000套软件，要确保成功标准在项目经理的掌控之中。</li>
<li>ROI估算：投资回报率</li>
</ul>


<p>质量在产品的不同市场应用阶段，可以的需求有很大区别。到大众市场之间有着摩尔鸿沟。越进入成熟阶段，对质量的要求更高，即缺陷的容忍度越低。</p>

<h3>开发项目规划模板</h3>

<ul>
<li>产品意图：（类似远景，但远景可能不够用），与远景大方向一致，但又不安全相同</li>
<li>历史记录：知道的越少，越容易惊讶</li>
<li>发布条件</li>
<li>目标：同章程中的目标，但章程编写时可能目标还不明确</li>
<li>项目组织：明确团队在项目中的职责分配，指明如何使用周期以及哪些关键实践</li>
<li>日程总览：让我的领导知道项目的实际进展</li>
<li>人员配备（人员曲线）</li>
<li>建议日程</li>
<li>风险列表：识别和管理风险</li>
</ul>


<h3>制定发布计划</h3>

<p>通过制定发布计划，和各个职能部门的人共同商讨“成功”的含义，可以意识到自己不仅只是完成分内的工作，也为项目经理指明了成功的方向。</p>

<ol>
<li>确定当前项目最重要的因素：时间、功能、低缺陷率</li>
<li>草拟发布条件，加入测试经理等人</li>
<li>SMART原则，确定的、可测量的、可达成的、相关的、可跟踪的指标和条件</li>
<li>发布条件上达成多方共识：揭示众人对于产品和项目的假定和忧虑的过程</li>
</ol>


<p>很多软件开发人员都是很乐观的。在学校时接受的训练就是要让他们变得乐观，因为那
时每个项目都会在一个学期内完成（还要花费许多个通宵）。这些训练会一直停留在他们
脑海中，直到学会估算小的功能，并接收对于估算的反馈</p>

<p>如果项目经理必须遵循某个截止日期，那就干脆什么都别估算了。把所有的功能进行排
序，并按优先级进行开发。这种状况下，我强力推荐使用敏捷生命周期，这样就可以快
速地实现功能，并马上得到反馈</p>

<p>管理项目：管理风险，留意测试的进度，产生仪表盘上的数据，评估版本发布条件，要帮助大家看清目标、移除障碍，监控他们的进度，是没有时间做技术工作的。</p>

<p>保持合理的工作时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[凤凰项目读后记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji/"/>
    <updated>2019-11-05T12:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji</id>
    <content type="html"><![CDATA[<p>在人邮图灵1024半价优惠日买的一本书，主要以小说的形式，描述了一个资深运维经理比尔接手内部的凤凰项目部署，并在世外高人埃瑞克的指导下，如何通过看板、精益、敏捷能方法打通任督二脉，满足业务部门的<strong>真实</strong>需求，从而使整个系统（集团公司）业绩达标的故事。形式相当引人入胜，也很有收获，关键是提供了和人沟通的场景和范本。</p>

<p>上手，讲述了主角被选中的原因：他过去几年组建的大型机团队，是最有组织、最值得信赖的团队，比尔本人也是一个可靠、务实，而且愿意表达真实想法的人。不过，作为运维主管，比尔对开发的印象不是很好，比如开发人员经常粗心大意弄坏东西，然后就丢给运维了；而开发人员和信息安全部门的人联手，更容易给运维添乱。而主人公的冷静坦率的做法，甚至让他在第一部分丢了工作。</p>

<p>然而，这个公司其实并不真正重视IT。比如在总体评估指标中，一个IT经理都没资格参与，即IT引起的运营风险并未被重视，也未得到管理，然而IT风险实质上是业务风险。</p>

<p>下面是一些主要的知识点：</p>

<p>倒逼项目 == 日期驱动项目，开发用完了全部的时间。这种玩法，基本后续就是起飞。大家即使都是为了公司好，关键仍然在于有限的时间里能够做什么。对工作需求、优先等级、工作进度、可用资源都了如指掌。真正令人沮丧的是无法把精力集中在对公司最为重要的事情上。</p>

<p>约束点=瓶颈，在瓶颈之外的任何地方做出改进都是假象。作为IT部副总裁，你的工作要确保形成一条迅速、可预测、持续不断的计划内工作流，从而交付价值，同时尽可能降低计划外工作的影响和破坏。</p>

<p>三步工作法：第一步，帮助我们理解在工作从开发部向运维部移动时建立快速工作流，第二步缩短及放大整个系统的反馈回路，第三步形成勇于探索且吸取教训的先进文化。（勇于冒险以及从失败中汲取教训的价值观，并强调通过反复实践以致炉火纯青的必要性）</p>

<p>四种主要的工作类型：<br/>
1. 业务项目<br/>
2. 内部IT项目<br/>
3. 变更类工作<br/>
4. 计划外（救火）工作，堪比反物质</p>

<p>在发射当口，还往太空飞船安装零件，可不是好兆头。</p>

<p>缺乏能力才是成事的大敌。</p>

<p>你的开发，把所有工作周期都用在了功能，而忽略了稳定性、安全性、可扩展性、可维护性、可操作性、持续性等。</p>

<p>相比向系统中投入更多的工作，将无用的工作剔出系统更为重要。重要的是结果，而非过程、管理或者我们完成了什么。</p>

<p>冷静、坦率应对愤怒。但上级还是会认为工程师们懒骨头。然而团队内需要信任感。</p>

<p>技术债务必将导致公司唯一能够完成的工作就是计划外工作。</p>

<p>工作中心：机器、人员、方法、测评</p>

<p>对安全中心负责人的评价：可以不对IT系统做过多无用功就保护公司，这才是你的胜利。这句话很适用于之前单位的BA。即要做过滤器，而不是放大器，要把无用的东西拒之门外。</p>

<p>和高层打交道，告诉他们坏消息要找适当的时机、适当的场合。</p>

<p>不断降低周期时间的需求是第一工作法的内容，增强回收成本的能力，是第二工作法的内容。要向高层表明‘IT导致的业务风险’。</p>

<p>之后的devops环节，将IT和运维整合在一起，通过降低发布规模，提高发版频次，比如一天10次，来实现快速交付。然而并没有提到相应的验证开销过大怎么办？</p>

<p>未来十年，每一个称职的COO都会是从IT部门出来的。否则，只能是金玉其外的傀儡，需要依靠别人来开展工作。</p>

<p>尾声当然是美好的，比尔获得了同事和上司的信任，他们业务部门的死对头莎拉也离开了公司，他和业务部门的其他人建立了良好的合作关系。公司上下更懂IT，IT也更懂公司的业务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日式高效团队开发]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/10/05/nipon-software-team/"/>
    <updated>2019-10-05T16:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/10/05/nipon-software-team</id>
    <content type="html"><![CDATA[<p>日式《高效团队开发》</p>

<p>成书于2014年上半年，作者是日本人，参与了Play这个框架的开发。在日本，做到了书中提供的版本管理、缺陷管理、CI、CD公司的生产效率高很多，原因在于两点：1. 基础设施本身的效率 2. 对优秀工程师的吸引力。</p>

<p>死亡行军状态的项目---项目岌岌可危，人员身心俱疲</p>

<p>问题1：邮件内容多 -- 引入缺陷管理<br/>
问题2：没有仿真环境  -- 搭建持续、自动地向验证环境、staging 环境以及正式环 境进行发布，并一直保持正常运行的环境<br/>
问题3：没有分支和tag管理  -- 利用分支和标签<br/>
问题4：重新制作数据库的困难  -- 数据库变更管理</p>

<p>问题5: 不运行就就无法察觉问题  -- CI<br/>
问题6：代码合并后产生了degrade  -- CI+merge<br/>
问题7：重构代码没信心  -- CI+测试代码<br/>
问题9：环境依赖</p>

<p>日本的信息技术传入比美国晚3-4年，貌似中国也差不多。</p>

<p>分布式版本控制系统的缺点：<br/>
1. 没有真正的版本号<br/>
2. 没有最新的版本<br/>
3. 过于灵活，容易混乱<br/>
4. 思维方式</p>

<p>git中，应该避免分支和标签使用相同的名字，可以大致类似但细节之处有所区别</p>

<p>如果不经过长期的回归测试就不能发布，那么发布分支和开发分支应该分开来。
反之，都使用一个master为好。</p>

<p>使用Play框架的Evolution对数据库sql进行管理。类似ror的migrate，但直接使用sql。其对比语句文件是否已执行也比较巧妙。</p>

<p>缺陷驱动开发(TiDD),即以Ticket驱动开发。怎么建立gitlab和ticket之间的关联？</p>

<p>epic采用excel管理，story介于采用excel或ticket工具之间，task采用ticket工具管理</p>

<p>因成本收益和市场变化，才使得CI流行起来。
Jenkins是事实上CI工具的标准，其前身是Oracle收购Sun之前的Hudson。它的作者是一个日本人。</p>

<p>Ant、Maven、Gradle三者的关系。Ant最灵活，Maven是基于CoC后的简化版的Ant，Gradle则介于二者之间，使用groovy来完成其中灵活的那部分。</p>

<p>CI集成的测试对象：</p>

<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>用户验收测试UAT</li>
<li>回归测试</li>
</ul>


<p>.git/hooks/post-receive 用于触发向jenkins push构建请求</p>

<p>CI -> CD，直接把代码库中的代码发布到产线环境</p>

<p>A 要全部采用版本管理<br/>
B 所有的环境都要用同样的方式来构建<br/>
C 要实现发布工作的自动化，并事先进行验证<br/>
D 要反复多次进行测试</p>

<p>Chef是配置并启动虚机里面的服务的，例如nginx、apache等等</p>

<p>Infrastructure as Code</p>

<p>编配（Orchestration）：<br/>
即让多个组件一起演奏起来。主要有Capistrano、Fabric（python编写）和Jenkins几种工具。
Jenkins的buidl periodically可以从多台机器上收集日志
如果采用K8S + Docker, 那么很多玩法又将大大的不同了。</p>

<p>测试四象限：</p>

<pre><code>
                业务层面
                |
                |
团队的支持------- | -------产品的评价    
                |
                |
                技术层面
</code></pre>

<p>单元测试属于技术和团队方面的支持，集成测试属于业务和团队方面的支持</p>

<p>总体来讲，这本书讲的日式团队软件开发，和我目前接触的有很多类似的地方。作者提到的版本管理、CI、CD我们也做了一部分，可以提高和借鉴的地方确实不少。不过时代毕竟在前进，实现栈方面作者是不提及docker和k8s的，然而这些的存在确实可以让CI/CD更进一步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Agile： 理解Scrum, XP, Lean and Kanban]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile/"/>
    <updated>2019-02-08T12:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile</id>
    <content type="html"><![CDATA[<p>初次接触敏捷的概念是很早的事情了，可能始自于Uncle Bob的那本ASD。
其后，因为一直以来认为的软件开发很多事情在做之前其实很多是不确定的，因此日常的开发中虽然没有采用站会之类的形势，也没有单独的产品经理，
但实际上是按照敏捷的精神在进行开发。这些精神包括：</p>

<ul>
<li>个体和互动高于流程和工具（不过我认为工具十分重要）</li>
<li>可工作的软件高于详尽的文档</li>
<li>客户协作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ul>


<p>这些都是在多年开发实践中所坚持的原则。但是，一直以来忽略了其中最重要的一点：人。</p>

<p>因为之前工作的单位，从客户、领导到同事、下属都是合作多年，彼此也知道对方的能力以及可以信赖的程度，所以敏捷的精神得以贯彻。
然而在两年前去到新环境后，身边合作人员的水平较以往参差不齐的多，主要是上游的产品、BA等怎么合作都没有及时地确立或调整出新的办法，
导致敏捷的原则压根没法贯彻。<br/>
直到大约一年半以前，才发现敏捷的形式（实践）其实已较为普及。今年在新单位，有专职的敏捷教练和产品经理，在一年的实践中，体会了不少敏捷的好处，但也
发现了不少问题，尤其是随着时间的流逝敏捷实施似乎越来越难了。而问题依然很类似：</p>

<ol>
<li>人员水平参差不齐，其实不是每个人都知道怎么配合</li>
<li>上游虽然有产品经理，但公司还会安排其他人来提需求，但很可能完全不懂软件开发，导致沟通合作困难</li>
</ol>


<p>所以，下决心利用假期好好弄明白当前的敏捷到底指什么，然后再看看怎么结合现在面临的情况进行调整。</p>

<p>简单的说，一般的敏捷方式和Scrum是同义词，而XP（极限编程）是软件开发中的一种敏捷模式，Scrum则更偏向项目管理以及集体协作方面。
至于Lean，则只是一种思想，没有具体的形式，Kanban也是来自于日本汽车制造商，其核心作用是找出整个流程中的瓶颈。</p>

<p>与Scrum对应的是上令下行的管理方法，这种方法下需要较完善的需求规格（极难），较强的PM规划设计（很可能是瞎计划）和计划重构能力，
而Scrum则要求团队的主人翁精神（也很难）。但本质上，Scrum把决策和风险都放给了整个团队，基于软件开发很多只有事到临头对着代码
才能明确什么方法最好，因此这种下放或者说要求一线成员能力更大、承担更多责任和决策的模式是有其道理的。整个团队中，开发、产品、PM都能拥有平等的发言权。</p>

<h2>Scrum</h2>

<p>在项目开始时，只是确定要做的任务（用户故事）有哪些，也会拆分任务，但不一定要完成所有任务的分配。即要有<strong>任务清单</strong>，但不全部确定计划完成者。
细节在例会后讨论，每天例会可以由不同的人轮流讲3个问题：</p>

<ol>
<li>我昨天干了什么？</li>
<li>我将要干什么？</li>
<li>我遇到了什么困难？</li>
</ol>


<p>本质上是让团队成为项目的主人，齐心协力去寻找更有效的工作方式，找到了整个团队就一起成长了。而告诉团队工作成果的价值要好于告诉团度业务收入的价值，对团队而言，
有价值的是软件能带来什么？让用户生活更美好是一种真实、真诚、鼓舞人心的目标。
<strong>自我管理</strong>和<strong>集体承诺</strong>是Scrum的魂（精神），要求每个人都成为猪而不是鸡，每日例会和积压工作表是Scrum的形式（实践）。产品所有者是Scrum的产物，但实际上也
很难区分和传统的业务分析人员的区别。</p>

<p>Scrum用到的概念还包括用户故事，满意条件，故事点和速度<br/>
燃尽图表示随着时间的流逝，还剩多少任务。</p>

<p>Scrum的价值观：</p>

<ul>
<li>承诺</li>
<li>尊重</li>
<li>专注</li>
<li>开放</li>
<li>勇气</li>
</ul>


<h2>极限编程(XP)</h2>

<p>极限编程强调结对以及测试驱动，一切的目的是为了方便自动化测试，比如避免过深的调用栈。着力于消灭代码异味。<br/>
有时候过多的边界情况考虑和处理也是过度设计，是某种<strong>框架陷阱</strong>误区。</p>

<p>作者还提到了<strong>反模式</strong>的概念。
所谓反模式就是会给项目带来麻烦和问题的行为模式，比如解决某人只有95%的时间在干活，喜欢称人为资源。</p>

<p>代码异味和反模式都是人制造出来的，又是人识别出来的，并且可以由人来防止或修正。所以解决方案一定是技术和团队两方面一起努力。</p>

<p>然而，测量什么就会得到什么。瀑布式开发的目标也不是文档，但最终会得到很多文档，可运行的软件反而变成了副产品。TDD的目标也不是文档或测试，但最终得到了很多测试，可运行的软件本身反而也成了副产品。</p>

<h2>精益</h2>

<p>精益针对的反模式就是<strong>浪费</strong>，目标就是减少浪费。包括无用的功能和形式。同时提到了<strong>工作进度面积图</strong>，这种图的作用可以反应当前处于各个状态的任务数量及比例。其表示状态的词汇如下：</p>

<ul>
<li>Muda 徒劳无益</li>
<li>Mura 不均衡</li>
<li>Muri 不合理或不可能</li>
</ul>


<p>衡量是否精益的一大指标是从需求提出到上线发布的间隔时长，即<strong>交付时间</strong>，这里是借用了丰田生产汽车的概念。强调0或者低库存。</p>

<p>日常项目中容易遇到两个反精益的模式：</p>

<ul>
<li>老板的神奇思维（Magic thinking）：只要我想要，只要我施压，团队就一定会做出来。</li>
<li>英雄员工：十分肯加班加点的员工</li>
</ul>


<p>敏捷是无法同上面两个共存的。</p>

<p>神奇思维和英雄员工制造的最大问题是会导致软件产品的质量和测试都很差，最终开发速度会变的慢上2倍以上。因为欠的债太多最终都会变成成本。</p>

<h2>Kanban</h2>

<p>看板可以让经理不再动不动就分配新功能。比任务处理的内容要更“大”一些。看板中的每个栏目表示工作流程中的容器，是一种分析问题出在哪个环节的可视化分析方法。</p>

<p><strong>Shuhari</strong>，借用武学概念，守破离。</p>

<ul>
<li>守：按套路来</li>
<li>破：打破套路</li>
<li>离：自成一派</li>
</ul>


<p>小结： 确实如一个十分能干的小朋友曾经跟我交流的，中国的企业没有真正实行敏捷开发的。其实敏捷本身和中国大部分软件企业的文化并不兼容，因此大部分只是具备了敏捷的一些实践，而没有敏捷真正的灵魂。至于我司到底是否能敏捷起来，也只能把决策留到最后再说了。</p>
]]></content>
  </entry>
  
</feed>
