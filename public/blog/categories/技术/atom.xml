<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2021-03-18T17:46:28+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CORS问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2021/03/18/corswen-ti/"/>
    <updated>2021-03-18T13:40:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2021/03/18/corswen-ti</id>
    <content type="html"><![CDATA[<p>动手搞了一下Nginx和Chrome的CORS问题，顺手记录一下一些基本概念。</p>

<p>CORS的本意是限制Http请求中Origin的来源，主要是用于保护浏览器客户端的，可以一定程度上防止浏览器访问页面A时，莫名其妙连去B站资源的情况发生。</p>

<p>原理上，CORS工作时会先发出一个OPTIONS请求，并携带Origin消息头：</p>

<p><code>
OPTIONS /
Host: service.example.com
Origin: http://www.example.com
Access-Control-Request-Method: PUT
</code></p>

<p>然后，服务器端如果支持跨域，则会返回Access-Control-Allow-Origin消息头，里面给出允许访问的Origin域名。如果用<code>*</code>，则表示没有任何限制。如果要允许多个域名，则可以使用Nginx中动态变量的方法，这种情况下每次还是只返回一个域名。</p>

<p>```
location / {</p>

<pre><code>            root html;
         if ($request_method = "OPTIONS") {
</code></pre>

<p>add_header Access-Control-Allow-Origin *;</p>

<pre><code>            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With';
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS';
            add_header 'Access-Control-Max-Age' 10;
            return 204;
         }

            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With' always;
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS' always;
            add_header 'Access-Control-Max-Age' 10 always;
            proxy_set_header host $host;
            proxy_set_header X-real-ip $remote_addr;
            proxy_set_header X-forward-for $proxy_add_x_forwarded_for;
            proxy_pass http://127.0.0.1:8080;
    }
</code></pre>

<p>```</p>

<p>Nginx的配置需要注意两点：</p>

<ol>
<li>add_header在proxy_pass时默认不会起作用，如果需要起作用，则要加上<code>always</code>参数。</li>
<li>Access-Control-Allow-Origin 要严格的只有1条，不能有多条。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD的蓝书和红书]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2021/02/16/dddde-lan-shu-he-hong-shu/"/>
    <updated>2021-02-16T21:37:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2021/02/16/dddde-lan-shu-he-hong-shu</id>
    <content type="html"><![CDATA[<p>跟着Vlad的「Unit Testing Principles, Practices, and Patterns」 学习单元测试的原理实践和模式之后，
一路追踪，自然会发现要写好测试自然会要用到Domain-Driven Design的分析和设计方式。因为要写出容易测试代码，
首先需要写出业务上的好代码，而要做到这一点，目前已知的解法殊途同归，就是要运用DDD的方式，解除业务代码对框架和技术细节的依赖，而专注于业务（领域）本身。加上多年以前DHH推荐的5本他膺服的编程书籍中，就有Eric Evans的「Domain-Driven Design」，也就是蓝皮书。</p>

<p>但这本书确实很不好读。中文版的购于去年3月份，反反复复并看不下去，7月份开始看英文版，废了半年的时间，才断断续续终于看完了。蓝皮书确实写的是不容易褪色和随着时间流逝而跌价的书籍，内里的原则和一些很细节的建议应该只要OO继续是编程的主要范式，那么蓝皮书的价值和地位就会持续存在。比如他评价OO把一切都看成对象，就是等于建筑师把一切都看成房间。过于抽象，其实反而失去了运用时的指导意义。为此，开发出了七种武器来分别描述不同的用于处理业务的OO。</p>

<p>而统一语言，则是强调分析人员、设计人员和最终使用人员使用同一种语言来进行沟通，就像厨房、卫生间、客厅等并非只是建筑师的用语。这样可以用一套原则来进行指导和沟通。DDD本身强调独立性的目的，是通过解除对外部的依赖从而达到可以把核心问题暴露出来并予以解决。从而可以让运维逻辑丰富且清晰，将Domain作为软件的核心，而把APP层做薄。沿着这条路前进了多年之后，随着TDD等实践的进一步发展，获得了易测试等突破性的好处。因此，在国外甚至国内部分项目中，都取得了广泛的应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mybatis-plus的字段为复杂对象的读取和装载]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2021/01/14/mybatis-plusde-zi-duan-wei-fu-za-dui-xiang-de-du-qu-he-zhuang-zai/"/>
    <updated>2021-01-14T21:19:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2021/01/14/mybatis-plusde-zi-duan-wei-fu-za-dui-xiang-de-du-qu-he-zhuang-zai</id>
    <content type="html"><![CDATA[<p>如果核心代码写的非常OO，那么Entity中自然会出现很多Value Object。一旦这些VO需要存入数据库，则会牵涉到一个数据库字段转换到Java类型的ORM问题。<br/>
比如有下面的代码：</p>

<p>```java
@Data
// @TableName(autoResultMap = true)
public class Validator {</p>

<pre><code>private Long id;

// @TableField(typeHandler = CommissionTypeHandler.class)
private Commission commission;
</code></pre>

<p>}</p>

<p>public class Commission {</p>

<pre><code>final private BigDecimal commission;
</code></pre>

<p>}
```</p>

<p>Commission作为一个VO，也需要保存到Validator的表格中。Mybatis通过typeHandler的方式来实现这种钩子，完成这种转换。具体做法为先定义相应的handler, 即<code>TypeHandler&lt;T&gt;</code>接口的实现类</p>

<p>```java
import com.walletguard.polkadotprx.entity.Commission;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedJdbcTypes;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;</p>

<p>import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;</p>

<p>@MappedJdbcTypes(JdbcType.DECIMAL)  //数据库类型
@MappedTypes(Commission.class)
public class CommissionTypeHandler implements TypeHandler<Commission> {</p>

<pre><code>@Override
public void setParameter(PreparedStatement ps, int i, Commission parameter, JdbcType jdbcType) throws SQLException {
    ps.setBigDecimal(i, parameter.getCommission());
}

@Override
public Commission getResult(ResultSet rs, String columnName) throws SQLException {
    BigDecimal co = rs.getBigDecimal(columnName);
    return new Commission(co);
}

@Override
public Commission getResult(ResultSet rs, int columnIndex) throws SQLException {
    BigDecimal co = rs.getBigDecimal(columnIndex);
    return new Commission(co);
}

@Override
public Commission getResult(CallableStatement cs, int columnIndex) throws SQLException {
    BigDecimal co = cs.getBigDecimal(columnIndex);
    return new Commission(co);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>该接口有4个需要实现的method，其中3个是读取，1个是写入，这里又用到了很传统的JdbcTemplate的方式类设置和读取相应的值，读出后转换成自己需要的对象。
<code>MappedJdbcTypes</code>指明了Jdbc中的类型， <code>MappedTypes</code>指明了OO中的对象类型，也就是接口<code>TypeHandler&lt;T&gt;</code>中的T。</p>

<p>然后，在上面类型的对象中，作<code>@TableField(typeHandler = CommissionTypeHandler.class)</code>声明，即意味着该字段用这个typeHandler来进行处理。<br/>
但是，这只是确保可以写入，如果要支持读取，还需要在Class的开头，加上<code>@TableName(autoResultMap = true)</code>，这样这个ORM就实现了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Architecture]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/10/06/clean-architecture/"/>
    <updated>2020-10-06T22:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/10/06/clean-architecture</id>
    <content type="html"><![CDATA[<p>Rober C. Martin的另一部Clean系列，总体来讲不如Clean Code，但书还值得一读。Bob大叔开发经验丰富，但仔细分析的话，他的主要经验还是基于C的通信软件的开发，之前有过很多的汇编经历。Java看起来真正做过的大的项目似乎并不多。因为按他90年代以前的经历，基本没有使用Java开发过什么，而之后，则转去了做咨询和主编，写的项目按常理应该不多。</p>

<p>书中首先使用龟兔赛跑的隐喻，讽刺了程序员们的迷之自信，总以为自己是聪明的兔子能够有朝一日把一团乱的东西Clean干净，但实际上从来没有发生。以此告诫读者必须脚踏实地做好整洁架构和整洁代码：The only way to go fast is to go well. 随后，提出Software的精髓在于<strong>soft</strong>，也就是easy to change，这是软件设计和开发的根本。并且应用类软件的开发，一般是由urgent behavior驱动的，但维护好clean Architecture则是开发人员的责任。</p>

<p>第二部分里，讲了3种基本的编程范式，强调的都是纪律的重要性。如结构化编程取消了goto，只保留了if/then/else,
do/while/until; OO则是限制函数间的调用，抽象、封装、继承、多态，并且举了IO device的C接口的例子。同时提出了<strong>Plugin</strong>架构的思想。因为所有的Device其实都是作为一种附件，plugin到OS上面去的。接口是OS定义的，实现则是plugin的事情。</p>

<p>第三第四部分则是作者提出过的SOLID设计原理以及组件的原理。<br/>
SRP，OCP，LSP，ISP，DIP。一个Module应该只对一个Actor负责。Actor通常是source，是使用者。<br/>
组件主要是耦合问题。REP、CCP、CRP，这其实是一个CAP的不可能三角。组件之间要削减循环依赖，被依赖多的Stable，不被依赖的Unstable，Stable的东西需要加入Abstract来实现弹性的增加。同时要减少对易变（volatile）组件的依赖，即在Stable的东西中加入Abstract以使软件变软。</p>

<p>第五部分是全书的的主体，主讲架构。<br/>
架构的目的是为了便于软件开发、部署、运行（非功能性要求）。维护，让细节开放，这样细节可以很晚才被决定。架构师的目标则是make software soft， 实现Policy和Detail之间的decouple，同时也负责设计Policy。</p>

<p>所谓Policy指business rules and procedures，Detail则是和policy进行通信的东西。架构师的一大职责，就是在Details之间画下边界线（boundary line）。而Clean Architecture则是让Details依赖Policy的一种架构方式。也体现了Bob大叔的DIP原则，即反转依赖。低级的组件应该作为插件插入到高级组件中去，高级组件是Policy和Use cases。
这个好处是减少核心内容的复杂性和对外部的依赖。
同时，架构是关于系统的，不是关于框架的，提出了架构设计要和框架尽可能分离的概念。即Domain优先，能让人看了架构设计图就知道系统是干什么的，举了图书馆、住房的设计图例子。这样也容易形成Testable Architecture。但这种做法下，架构师就变成了传统的系统分析师。</p>

<p>举了几种Clean Architecture，主要就是Ports and Adapters（Hexagonal Architecture）。也提到了Humble模式。架构即画边界以及决定用什么作边界，Humble Objects用于架构边界处。</p>

<p>至于微服务，作者的意思是service并不是分界线，分界线在service内部，举了Kitty Finder和Ride Finder的例子。从这点来说，熔断可以作为某种服务的一种多态实现。所以K8S其实也可以实现熔断，比如在一个Login的service中部署两个不同的service，确定某一个在什么情况下生效。</p>

<p>Test可以作为系统第一部分，而且是最外层的，因为所有的代码都不依赖测试代码，而测试代码却依赖其他代码（Domain+Infrastructure）。但对测试解耦，并没有提出什么实质性的建议。</p>

<p>最后，DB、Web、Framework都是小把戏（Detail），应用本身才是大Boss，不要为了Detail而限制Boss。又举了一个作者自己卖网课的例子，但这个例子实在太短，看不出什么名堂来。</p>

<p>结束后，其实还有两大部分，一个是Simon Brown写的一章，列举了4种常见的代码目录组织方式，并提出组织之间最大的区别在于包内方法的可见性差异。Simon创造了C4架构模型，这章列举的也不错，但例子还是太浅和理想化了，设计细节太少。  另外一部分就是Bob大叔的前半生开发生涯自传，写到了1990年代。里面补充到之后的经历会写成另一本书，应该就是今年出的Clean Agile了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 删除已提交的文件]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/09/10/git-shan-chu-yi-ti-jiao-de-wen-jian/"/>
    <updated>2020-09-10T17:41:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/09/10/git-shan-chu-yi-ti-jiao-de-wen-jian</id>
    <content type="html"><![CDATA[<p>按台湾人的说法，git属于一旦有东西加入，就像把方丈请到了庙里，是很难再请出去的。
不过也不是完全不可能，但确实比较辛苦会。核心思想是通过<code>filter-branch</code>
来强制删除有关的文件，过程中类似<code>rebase</code>。在全部的分支、tag、heads、replace的
连接取消之后，再次gc，即可实际清除</p>

<p>```</p>

<h1>找出体积比较大的文件</h1>

<p>git rev-list --objects --all | grep "$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}' )"</p>

<h1>进行删除</h1>

<p>git filter-branch --force --index-filter 'git rm -rf --cached --ignore-unmatch .gradle' --prune-empty --tag-name-filter cat -- --all</p>

<h1>实际删除</h1>

<p>rm -rf .git/refs/original
git reflog expire --expire=now --all
git gc --prune=now
```</p>

<p>不过上述只是完成了本地的内容清理，远端的gitlab还有其他工作要做：</p>

<p><code>
git push origin --force 'refs/heads/*'
git push origin --force 'refs/tags/*'
git push origin --force 'refs/replace/*'
</code></p>

<p>最后，再去gitlab的settings里面手工执行一下Housekeeping，再次clone的话体积就小了。</p>
]]></content>
  </entry>
  
</feed>
