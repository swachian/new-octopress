<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2018-02-20T23:20:21+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Java 3rd Edition]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition/"/>
    <updated>2018-02-20T23:01:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition</id>
    <content type="html"><![CDATA[<p>「Effective Java」第三版在过年期间出版了，对比第二版主要补充了<code>lambda</code>和<code>stream</code>的内容，序列化方面
则希望大家不要再使用java原生的内容，其他变化不大。但是，和第一版比较起来，变化就很大了。除上述内容外，
第二版较第一版增加了<code>autoboxing/autounboxing</code>，<code>enum</code>, <code>annotation</code>,<code>generic programming</code>, 整个的编程建议也从57条增长到78条再到第三版的90条。</p>

<p>借用作者在第三版的前言，在1997年，Java的创始者Gosling描述java是一种“蓝领语言”（blue collar language），意味着当时的java相当简单（pretty simple）。与此同时，C++的创始人Stroustrup则警告所谓java的简单和其他很多新语言一样，只是误解以及功能上的不完善，随着时间的流逝，Java在尺寸和复杂性上都将大规模成长。不得不说，三者都是大师，而Java虽然依旧还是工业级的语言，但复杂度和规模已经较我十几年前初学时多了许多。或许，也因此大学里正在寻求一门其他语言来取代Java的教学地位吧。</p>

<p>此书非常经典，虽然作者说不用从头到尾通读，但是，建议还是全部都读一遍，甚至可能需要反复阅读并加以实践。比如其中的primitives和boxed primitives，即<code>int</code>和<code>Integer</code>，其间的坑在新项目中就踩过，而之前阅读后只是尽量不去用Integer这些boxed的类型，而这个新项目中由于前后交互的需要必须使用了Integer，于是就把<code>==</code>, 内容为<code>null</code>的坑都踩到了。</p>

<p>开卷有益，何况经典！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel 谈软件- 软件随想录]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu/"/>
    <updated>2018-01-31T14:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu</id>
    <content type="html"><![CDATA[<p>《Joel谈软件》，我一直是这么称呼《软件随想录》的。
倒是才注意到，原来黑客与画家、软件随想录都是阮一峰老师翻译的，而且翻译的真不错。与此同时，阮老师也很好地推销了一下自己。本书与《我编程我快乐》不同，是很有深度的书，所以决定边读边记笔记。尤其要说一句，阮老师的注解是很显功力的。</p>

<p>在2004年之前，Joel的网站文集就被按blook集合由Apress出版，而阮老师翻译的是集成了2004年之后发布的文章，英文名称《More Joel on Software》。但国内的出版顺序则是先引入了阮老师翻译的《More》，后来又有另一个译者翻译了04年的那本书作为了卷1. 所以，在中国很长时间只有《More》而没有第一本。考虑到时效性以及译者的知名度，04-09这本更值得关注就是必然的了。下面的笔记是两本合计的版本，并未区分来自哪里，毕竟原作者是一个人，所以基本是一脉相承。</p>

<h2>人员管理</h2>

<h3>第一次Bill Gates 审查</h3>

<p>微软程序经理（Program Manager）：技术水平是程序员队伍里最高级别，能做最多且最难的工作，有人格魅力，程序员队伍中最聪明的那个家伙。</p>

<p>比尔盖茨通过不断问问题来确认对方是否有实现任务的把握。</p>

<h3>怎么寻找优秀的程序员</h3>

<ol>
<li>优秀的程序员很少找工作</li>
<li>简历投的多的大部分是不怎么样的程序员</li>
<li>从应届生中招募是个发现美材的办法</li>
</ol>


<h3>从工作环境开始招募程序员</h3>

<ol>
<li>私人办公室：作者的公司在纽约，但程序员都有独立办公室，当然，这个在国外也是凤毛麟角</li>
<li>Aeron出品的名牌电脑椅</li>
<li>大显示器</li>
<li>好的办公环境和园区</li>
<li>同事要好，管理层要有程序员出身的人，物以类聚</li>
<li>像代码一样公正、有序，严格的能者上庸者下的地方，对的就能赢得任何争论的地方</li>
<li>有趣的活，或者简单的或者流行的活</li>
<li>一定自由地使用新技术</li>
<li>编程框架体现美、幸福和激励</li>
</ol>


<h3>三种管理方法</h3>

<p>团队、公司、军队、国家，问题：“使得人们去做你要他们做的事”，或者说如何使得所有人都向同一个方向前进。</p>

<h4>军事化管理法</h4>

<p>每个人做的事情都不同的情况下，军事化管理方法很难奏效，因为没有那么多经理实现微观管理。但对军队则是必须的。</p>

<h4>经济利益驱动法</h4>

<p>经济驱动把内部激励变成了外部激励。内部激励是发自内心想做好这件事情，内部激励通常比外部激励强。</p>

<p>经济驱动也容易陷入kpi骗局，鼓励大家和制度博弈。不能把铜板丢给鸡，让鸡自己去买吃的。创造一种制度的时候，不能放弃自己的职责。</p>

<h4>认同法</h4>

<p>一起干活的人要一起吃饭。团建，以及营造一致的目标，爱上这个城市和工作内容。第二部分是提供必要的信息，让下属感觉被尊重。</p>

<p>结论：hybrid根据时间和对象灵活运用各种方式。</p>

<h3>面人指南</h3>

<p>千万不要雇“可能”合适的人，招人标准：1，聪明 2，能干</p>

<h3>测试人员</h3>

<p>测试人员独立性的必要性</p>

<h2>大学生技术学习建议</h2>

<h3>大学只教java的危害</h3>

<p>危害主要是两点：1. 基础知识不够扎实 2.会有很多不达标的人浑水摸鱼通过，导致招聘困难。  
但是，国内国外都这样。</p>

<h3>耶鲁大学的演讲</h3>

<p>技术派（the geek）和务实派（the suit，穿西装的）  
消灭bug的边际报酬是递减的，即随着错误越来越少，解决bug带来的收益也在变少，务实派的理论</p>

<p>程序本身包含多少香农熵规格说明书也要包含同样的数量</p>

<p>作者在微软纽约的咨询部门做过一段时间的客户顾问</p>

<p>做外包软件开发不好之处：1.无法用正确的方法做事 2. 做不出优秀的产品，因为都是乙方外包，能用就行。</p>

<p>管理只是一种不得不做、让人讨厌的杂物活，之所以公司需要管理，只是为了不影响聪明人工作，真正的天才才能做出优秀的成果。</p>

<p>作者在大学里学会了写作，学会了从动态逻辑课里不要读研究生，进入了Unix这座宏伟的教堂，但其实作者也从微软身上获益良多，变得足够聪明，但还是没有学到怎么开发软件。</p>

<h3>给计算机系的建议</h3>

<ol>
<li>写作</li>
<li>C语言</li>
<li>微观经济学：供给和需求，竞争优势，净现值（NPV），贴现，边际效用</li>
<li>GPA反应4年的总体表现</li>
</ol>


<h2>设计的作用</h2>

<p>艺术性和实用性 form follow function</p>

<p>进入最后测试阶段就会变得特别挑剔</p>

<p>你之所以会有好运气，那是因为你寸土必争</p>

<p>设计不用太宏伟，但细节要跟上</p>

<p>太多的选择会损坏内心的幸福感</p>

<p>作者以自己软件论坛作为例子，说明了功能和倾向性方面取舍。</p>

<h2>大型的项目管理</h2>

<p>微软ie8.0的开发，雷克萨斯pk橄榄树，要不要向过去兼容的问题</p>

<p>标准也会引发误解、困惑甚至争议</p>

<p>一半是理想主义，一半是实用主义</p>

<p>项目管理其实就是做抉择</p>

<p>日程安排经验的主要依据是历史数据，但相应原则如下，不过这个前提是招的都是有能力和自我驱动程序员：</p>

<ol>
<li>只有一线程序员才能提出完成日期的估计值，管理层制定的通常效果不好</li>
<li>发现错误就更新原来的计划</li>
<li>防止管理层向程序员施压，这样的产量至多提高10%，但埋下的隐患不少</li>
<li>一份日程规划就是一个装备积木的盒子，要么删功能要么拖延</li>
</ol>


<p>优秀的项目经理会让开发者觉得所有重要的设计工作都是开发者在做，而项目经理只负责打打酱油，和一些非常官僚主义的事情周旋，比如应付客户写写规范。</p>

<p>软件开发-冰山之谜，你能看见的永远只是实现的一部分，如同冰山露出水面的部分，而水底的部分可能还有90%</p>

<p>每日编译发展到现在就是持续集成</p>

<h3>排计划</h3>

<ol>
<li>使用excel，不要用project，后者是为建造办公楼设计的  </li>
<li>保持简单，7列：feature、task、优先级、预估、现在预估、已流逝、剩余工时，最终完成时剩余工时==0，现在预估==已流逝</li>
<li>每个功能点要分解任务列表  </li>
<li>只有负责些代码的程序员才能预估时间</li>
<li>细分任务到小时单位，作者理解的设计就是决定要做什么  </li>
<li>记录原始和当前的时间估计,实现不断练习估算时间  </li>
<li>每天更新消耗时间栏  </li>
<li>考虑假期  </li>
<li>考虑调试代码的时间，考虑修复bug的时间  </li>
<li>考虑集成时间，就是几个人的工作拼接起来  </li>
<li>预留缓冲时间：第一预估可能有延时，第二可能有新任务，第三可能有冰山  </li>
<li>永远不要让开发经理压缩程序员预估的开发时间  </li>
<li>计划就像积木：通过强迫做减法（挑出不要的积木），你将开发出更强、更好、功能配比更优秀的产品，避免延期避免交付了还有很多鸡肋的功能  </li>
</ol>


<h3>软件世界的分类(5类）</h3>

<p>作者把基于网络的web应用列为<strong>盒装软件</strong>，咨询软件（SAP德勤）这样的介于盒装和内部软件之间。<br/>
如果只有一个企业使用其实就是<strong>内部软件</strong>，由于边际成本的原因，内部软件通常不用质量很好。<br/>
<strong>嵌入式软件</strong><br/>
<strong>游戏</strong>和嵌入式软件一样，对软件的质量要求高，因为一般来讲游戏和嵌入式软件很少升级，也很少会出2.0版。即往往只有一个版本。<br/>
<strong>临时性软件</strong>，比如一段脚本。</p>

<h2>编程建议</h2>

<p>应用型匈牙利命名法 vs 系统型匈牙利命名法，后者臭名昭著，前者其实意图是表明变量的用途而不是type。</p>

<h2>开软件公司</h2>

<p>做生意就像看植物增长，是一种乐趣</p>

<p>如果你想压低程序员的工资，那么你就会得到质量很垃圾的软件，而这实际上也不会为你省下很多的钱。举了耶鲁大学的例子说明程序员的生产率差距有5-10倍。</p>

<p>此外，生产率不同的同事而是“普通”程序员根本做不到优秀程序员所做的事情，“飙不出高音”</p>

<p>Seinfeld中Soup Nazi一集很看好</p>

<p>作者的程序员价值论断是针对生产最终产品的公司，如果只是为了内部使用，配合运营而不是销售，那么只要够用就行了，不需要特别优秀</p>

<p>Jonathan Ive， 苹果的设计师</p>

<p>办公室的租金成本是2004年人均700美金/月，人均建筑面积40平米，所以每个人有自己的办公室，目的就是招募到优秀的程序员</p>

<p>对你最重要最关键的部分，你一定要使用更原始的工具</p>

<p>客服不外包有利于永久性地解决问题</p>

<p>面向整个市场的软件（产品）和定制化软件</p>

<p>一家软件公司要想成功，必须要有一名程序员执掌大权</p>

<p>只有招聪明的人，才能充分授权。</p>

<p>“麦当劳的”厨师 pk 真正的大厨，军事化标准化的流程只能产出麦当劳，大厨都是随意的。</p>

<p>NIH（Nothing in Here）对于关键部分，要坚持自己的研发</p>

<p>慢慢发展和烧钱发展的适用场合</p>

<p>兼容性是先有鸡还是先有蛋问题的一大解法</p>

<p>用户粘度和离开的门槛是要在你占据优势地位之后的，在此之前，最好的办法是降低用户使用门槛。</p>

<p>开源软件的策略：是使得硬件标准化、商品化，02年就列举了sun公司的错误</p>

<p>FUD战术，就是欺骗和恐吓的意思了。所谓雾件，就是对各种功能特性和产品作出口头许诺。但实际上根本拿不出可以卖的东西。把微软黑的厉害。
因为含糊其辞，大家会产生微软与自己的观点不谋而合的错觉。</p>

<p>.net缺少链接器（linker）。把编译后版本和程序中所有函数库的编译后版本合并起来，然后剔除掉所有不需要的库函数，生成一个二进制文件。</p>

<p>发新股不分红是为了让报表的利润好看</p>

<p>以最终用户为主和以程序员为主构成了windows和unix两类不同的文化，然而实际上以最终用户为主的文化来源于Apple</p>

<h2>关于规格说明书</h2>

<p>规格说明书体现的是写作能力，他的规格说明书写的让人很容易阅读。</p>

<p>待解决的问题需要在说明书里确定，不要觉得可以先让程序员做简单的部分，之后再慢慢思考并解决剩下的难题，这不是好主意，因为在实现代码的过程中会冒出许多新问题。</p>

<p>项目经理/产品经理没有权利让程序员听命，必须努力争取大家的认同才行，这种方式才能确保团队永远在做正确的事情。</p>

<p>规格说明书古今中外其实都不太有人爱读，因此写好很难。所以要写出<strong>引人入胜</strong>的规格书可以遵循一下几点：</p>

<ol>
<li>要幽默  </li>
<li>像编写用大脑执行的代码一样写规格书，仅仅做到正确不够还要易于理解  </li>
<li>写的尽可能简单, 并擅用排版  </li>
<li>重读并修改几遍  </li>
<li>尽量不要套用模板</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我编程我快乐]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le/"/>
    <updated>2018-01-31T13:45:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le</id>
    <content type="html"><![CDATA[<p>在图灵买了本《我编程我快乐》的电子书。其实原版名字就是著名的《My job went to India》的第二版，
原书名的意思也是如何成为一个卓越的程序员。</p>

<p>由于作者出身rails背景，所以大部分的思维我之前已经了解，真的大有收获的东西并不多。摘要一下有以下几点：</p>

<h2>市场</h2>

<ol>
<li>技术是有时间差的，在成熟或者说供需平衡间可以赚到相对多的价钱。</li>
<li>不要担心做团队中最差的，反而要追求这种和高手过招的机会，这样才能走出舒适区。</li>
<li>不要听从父母的，即使西方也是一样的。父母只是希望你平安，但大部分父母的境界注定无法帮助你卓越。</li>
<li>热爱你做的事情和市场。</li>
</ol>


<h2>产品</h2>

<ol>
<li>了解行业如何运转</li>
<li>跟踪技术的原理</li>
<li>寻找良师益友，自己也要做良师</li>
</ol>


<h2>执行</h2>

<ol>
<li>8小时激情燃烧</li>
<li>公司离开哪个员工都照样转</li>
<li>说“不”</li>
</ol>


<h2>推销</h2>

<ol>
<li>推销包含了一定的迎合</li>
<li>感觉是最重要，脑力劳动的评价主要靠感觉</li>
<li>建立关系混圈子</li>
</ol>


<h2>保持技术领先</h2>

<ol>
<li>研究尖端技术</li>
<li>没有终点</li>
<li>留意市场变化，主要跟踪技术达人</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用软件需求]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/30/shi-yong-ruan-jian-xu-qiu/"/>
    <updated>2017-10-30T00:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/30/shi-yong-ruan-jian-xu-qiu</id>
    <content type="html"><![CDATA[<p>Kovitz的这本书大概是七八年前看DHH的博客时得知的，发现有中文版就买了回来。但一直没有读完。原因在于本书还是按比较正统的方法讲解如何写好明确的软件需求与规格。按作者的理解，软件开发细化的模式有二：</p>

<p>一. 所有内容都是渐进式细化的，先原型然后几轮迭代后深入到细节；
二. 每个开始的需求数量很少，但都很到位，每轮迭代就是新增几个需求并实现。</p>

<p>而在我大部分的工作都是采用的策略一，所以这本书对我的吸引力就不大。毕竟在老单位分工没有那么细，沟通相对简单，并不需要那么细节丰富的需求文档。<strong>但是</strong>，新单位就都不一样了。</p>

<p>现在的单位是一个公司人数不多，但规模建制很丰富的公司，即使我个人带的团队也大了许多，需求不单是项目负责人和客户之间沟通的东西，同时也是产品、ue、ui和研发、测试之间沟通甚至绝对对错的基础。这种情况下，如何书写需求（其实是要求产品如何书写），就变得相当重要了。</p>

<p>Kovitz 这本书的<strong>精华是第九第十章</strong>，讲的是如何描述领域中的集合（模型）和类之间的关系，以及这些模型对应的事件和发生序列。</p>

<p><code>集合</code>包含两种类型：</p>

<ol>
<li>实体类，或类。比如发票、客户</li>
<li>实体类之间的关系。（客户1， 发票1），（客户1，发票2）。。。，关系其实是类的集合</li>
</ol>


<p>每个<code>实体类</code>要文档化的信息：<br/>
1. 实体类的基本信息说明；<br/>
2. 属性值列表，包括属性的定义，可能值的集合（取值范围、类型或者枚举集合）和含义<br/>
3. 存在的标识成员的属性（主键）<br/>
4. 与该类有关的实体类，这个主要用文字描述为主、画类图为辅，要在描述中说清楚一堆多，多对一的关系<br/>
5. 影响成员的每个事件，以及影响那些属性和关系。</p>

<p><code>基数</code>是指多对一的配套关系。连线的秘密是这样的：
* 竖线表示1
* 圈表示0
* 三条线表示乌鸦脚，没有合并
* 基数最靠近两端的表示最大值，次近两端的是最小值</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji/"/>
    <updated>2017-10-08T23:02:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji</id>
    <content type="html"><![CDATA[<p>微服务是Martin Fowler定义的一个术语，出自 https://martinfowler.com/articles/microservices.html</p>

<p>是伴随着敏捷开发和云服务部署流行而兴起的一种架构。微服务架构风格[1]是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p>

<p>具备的特征包括：</p>

<ul>
<li>水平扩展服务能力时，可以扩展只需要扩展的模块而不是全部</li>
<li>组件多以服务的形式提供</li>
<li>团队多按业务能力/功能组建</li>
<li>团队始终围着产品，而不是做完了就丢给运维</li>
<li>smart endpoints and dumb pipes，其实就是管道扁平化，针对SOA中部分总线太过只能而言</li>
<li>去中心化的管理，微服务意味着可以自治化，而不是谈标准化</li>
<li>可以多个编程语言同时使用，只要保持彼此间通信简单（http+lightweight messaging）</li>
<li>数据存储也是去中心化的，Polyglot Persistence，存储/数据库也是每个服务自己定</li>
<li>基础设施自动化程度高，实现持续提交和持续集成</li>
<li>开发者和用户间会更容易建立更多的联系，要持续关注软件如何帮助用户提升业务能力，而不是把软件看成是将要完成的一组功能</li>
<li>针对失效的设计，使用服务作为组件的一个结果是，应用程序需要被设计成能够容忍服务失效，如断路器模式</li>
</ul>

]]></content>
  </entry>
  
</feed>
