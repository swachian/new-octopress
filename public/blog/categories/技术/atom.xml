<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2018-01-31T15:31:41+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Joel 谈软件- 软件随想录]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu/"/>
    <updated>2018-01-31T14:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu</id>
    <content type="html"><![CDATA[<p>《Joel谈软件》，我一直是这么称呼《软件随想录》的。
倒是才注意到，原来黑客与画家、软件随想录都是阮一峰老师翻译的，而且翻译的真不错。与此同时，阮老师也很好地推销了一下自己。本书与《我编程我快乐》不同，是很有深度的书，所以决定边读边记笔记。尤其要说一句，阮老师的注解是很显功力的。</p>

<p>在2004年之前，Joel的网站文集就被按blook集合由Apress出版，而阮老师翻译的是集成了2004年之后发布的文章。英文名称《More Joel on Software》。但国内的出版顺序则是先引入了阮老师翻译的《More》，后来又有另一个译者翻译了04年的那本书作为了卷1. 所以，在中国很长时间只有《More》而没有第一本。考虑到时效性以及译者的知名度，04-09这本更值得关注就是必然的了。</p>

<h2>人员管理</h2>

<h3>第一次Bill Gates 审查</h3>

<p>微软程序经理（Program Manager）：技术水平是程序员队伍里最高级别，能做最多且最难的工作，有人格魅力，程序员队伍中最聪明的那个家伙。</p>

<p>比尔盖茨通过不断问问题来确认对方是否有实现任务的把握。</p>

<h3>怎么寻找优秀的程序员</h3>

<ol>
<li>优秀的程序员很少找工作</li>
<li>简历投的多的大部分是不怎么样的程序员</li>
<li>从应届生中招募是个发现美材的办法</li>
</ol>


<h3>从工作环境开始招募程序员</h3>

<ol>
<li>私人办公室：作者的公司在纽约，但程序员都有独立办公室，当然，这个在国外也是凤毛麟角。</li>
<li>Aeron出品的名牌电脑椅</li>
<li>大显示器</li>
<li>好的办公环境和园区</li>
<li>同事要好，管理层要有程序员出身的人，物以类聚</li>
<li>像代码一样公正、有序，严格的能者上庸者下的地方，对的就能赢得任何争论的地方</li>
<li>有趣的活，或者简单的或者流行的活</li>
<li>一定自由地使用新技术</li>
<li>编程框架体现美、幸福和激励</li>
</ol>


<h3>三种管理方法</h3>

<p>团队、公司、军队、国家，问题：“使得人们去做你要他们做的事”，或者说如何使得所有人都向同一个方向前进。</p>

<h4>军事化管理法</h4>

<p>每个人做的事情都不同的情况下，军事化管理方法很难奏效，因为没有那么多经理实现微观管理。但对军队则是必须的。</p>

<h4>经济利益驱动法</h4>

<p>经济驱动把内部激励变成了外部激励。内部激励是发自内心想做好这件事情，内部激励通常比外部激励强。</p>

<p>经济驱动也容易陷入kpi骗局，鼓励大家和制度博弈。不能把铜板丢给鸡，让鸡自己去买吃的。创造一种制度的时候，不能放弃自己的职责。</p>

<h4>认同法</h4>

<p>一起干活的人要一起吃饭。团建，以及营造一致的目标，爱上这个城市和工作内容。第二部分是提供必要的信息，让下属感觉被尊重。</p>

<p>结论：hybrid根据时间和对象灵活运用各种方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我编程我快乐]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le/"/>
    <updated>2018-01-31T13:45:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le</id>
    <content type="html"><![CDATA[<p>在图灵买了本《我编程我快乐》的电子书。其实原版名字就是著名的《My job went to India》的第二版，
原书名的意思也是如何成为一个卓越的程序员。</p>

<p>由于作者出身rails背景，所以大部分的思维我之前已经了解，真的大有收获的东西并不多。摘要一下有以下几点：</p>

<h2>市场</h2>

<ol>
<li>技术是有时间差的，在成熟或者说供需平衡间可以赚到相对多的价钱。</li>
<li>不要担心做团队中最差的，反而要追求这种和高手过招的机会，这样才能走出舒适区。</li>
<li>不要听从父母的，即使西方也是一样的。父母只是希望你平安，但大部分父母的境界注定无法帮助你卓越。</li>
<li>热爱你做的事情和市场。</li>
</ol>


<h2>产品</h2>

<ol>
<li>了解行业如何运转</li>
<li>跟踪技术的原理</li>
<li>寻找良师益友，自己也要做良师</li>
</ol>


<h2>执行</h2>

<ol>
<li>8小时激情燃烧</li>
<li>公司离开哪个员工都照样转</li>
<li>说“不”</li>
</ol>


<h2>推销</h2>

<ol>
<li>推销包含了一定的迎合</li>
<li>感觉是最重要，脑力劳动的评价主要靠感觉</li>
<li>建立关系混圈子</li>
</ol>


<h2>保持技术领先</h2>

<ol>
<li>研究尖端技术</li>
<li>没有终点</li>
<li>留意市场变化，主要跟踪技术达人</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用软件需求]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/30/shi-yong-ruan-jian-xu-qiu/"/>
    <updated>2017-10-30T00:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/30/shi-yong-ruan-jian-xu-qiu</id>
    <content type="html"><![CDATA[<p>Kovitz的这本书大概是七八年前看DHH的博客时得知的，发现有中文版就买了回来。但一直没有读完。原因在于本书还是按比较正统的方法讲解如何写好明确的软件需求与规格。按作者的理解，软件开发细化的模式有二：</p>

<p>一. 所有内容都是渐进式细化的，先原型然后几轮迭代后深入到细节；
二. 每个开始的需求数量很少，但都很到位，每轮迭代就是新增几个需求并实现。</p>

<p>而在我大部分的工作都是采用的策略一，所以这本书对我的吸引力就不大。毕竟在老单位分工没有那么细，沟通相对简单，并不需要那么细节丰富的需求文档。<strong>但是</strong>，新单位就都不一样了。</p>

<p>现在的单位是一个公司人数不多，但规模建制很丰富的公司，即使我个人带的团队也大了许多，需求不单是项目负责人和客户之间沟通的东西，同时也是产品、ue、ui和研发、测试之间沟通甚至绝对对错的基础。这种情况下，如何书写需求（其实是要求产品如何书写），就变得相当重要了。</p>

<p>Kovitz 这本书的<strong>精华是第九第十章</strong>，讲的是如何描述领域中的集合（模型）和类之间的关系，以及这些模型对应的事件和发生序列。</p>

<p><code>集合</code>包含两种类型：</p>

<ol>
<li>实体类，或类。比如发票、客户</li>
<li>实体类之间的关系。（客户1， 发票1），（客户1，发票2）。。。，关系其实是类的集合</li>
</ol>


<p>每个<code>实体类</code>要文档化的信息：<br/>
1. 实体类的基本信息说明；<br/>
2. 属性值列表，包括属性的定义，可能值的集合（取值范围、类型或者枚举集合）和含义<br/>
3. 存在的标识成员的属性（主键）<br/>
4. 与该类有关的实体类，这个主要用文字描述为主、画类图为辅，要在描述中说清楚一堆多，多对一的关系<br/>
5. 影响成员的每个事件，以及影响那些属性和关系。</p>

<p><code>基数</code>是指多对一的配套关系。连线的秘密是这样的：
* 竖线表示1
* 圈表示0
* 三条线表示乌鸦脚，没有合并
* 基数最靠近两端的表示最大值，次近两端的是最小值</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji/"/>
    <updated>2017-10-08T23:02:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji</id>
    <content type="html"><![CDATA[<p>微服务是Martin Fowler定义的一个术语，出自 https://martinfowler.com/articles/microservices.html</p>

<p>是伴随着敏捷开发和云服务部署流行而兴起的一种架构。微服务架构风格[1]是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p>

<p>具备的特征包括：</p>

<ul>
<li>水平扩展服务能力时，可以扩展只需要扩展的模块而不是全部</li>
<li>组件多以服务的形式提供</li>
<li>团队多按业务能力/功能组建</li>
<li>团队始终围着产品，而不是做完了就丢给运维</li>
<li>smart endpoints and dumb pipes，其实就是管道扁平化，针对SOA中部分总线太过只能而言</li>
<li>去中心化的管理，微服务意味着可以自治化，而不是谈标准化</li>
<li>可以多个编程语言同时使用，只要保持彼此间通信简单（http+lightweight messaging）</li>
<li>数据存储也是去中心化的，Polyglot Persistence，存储/数据库也是每个服务自己定</li>
<li>基础设施自动化程度高，实现持续提交和持续集成</li>
<li>开发者和用户间会更容易建立更多的联系，要持续关注软件如何帮助用户提升业务能力，而不是把软件看成是将要完成的一组功能</li>
<li>针对失效的设计，使用服务作为组件的一个结果是，应用程序需要被设计成能够容忍服务失效，如断路器模式</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring cloud 服务治理]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/07/spring-cloud-fu-wu-zhi-li/"/>
    <updated>2017-10-07T13:54:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/07/spring-cloud-fu-wu-zhi-li</id>
    <content type="html"><![CDATA[<p>服务治理是近年来架构中的热点部分，尽管比照ICE这些内容其实十几年前就已经有了，
只是五六年前伴随着系统越做越庞大，才变得必要起来。</p>

<p>简单理解一下，其主要内容基本是：</p>

<ul>
<li>要有一个服务中心，服务中心最好是集群的</li>
<li>要能向中心注册服务，服务的地址用名称而不是ip硬绑</li>
<li>要能发现一个服务，其实就是用名称通过服务中心找到服务的ip和端口</li>
<li>要一个可以轮流访问服务集群的客户端</li>
<li>此外再配合上消息总线等内容</li>
</ul>


<p>有了这些，基本一个服务治理的框架就基本形成了。</p>

<p>《Spring Cloud 微服务实战》是一本很不错的书，有动手的介绍，有源码的分析，写的也算精炼。</p>

<h3>Eureka 服务治理中心</h3>

<p>启动服务中心后，配置客户端主要包含两部分：</p>

<ul>
<li>服务注册相关信息： 包括服务中心地址、服务获取间隔时间、可用区域，以<code>eureka.client</code>为前缀</li>
<li>服务实例相关的配置信息： 包括实例的名称、IP地址、端口号、健康检查路径等，以<code>eureka.instance</code>为前缀</li>
</ul>


<h3>Ribbon</h3>

<p>Spring Cloud的负载均衡是在客户端实现的。
<code>WeightedResponseTimeRule</code>是个比较复杂的实现。</p>

<h3>Hystrix</h3>

<p>这是一个容错断路器，当出现超时等状况时直接调用指定的回掉函数。使用了RxJava库的异步操作模式，
实现了发送+观察的效果，所以可以中断请求。</p>

<h3>Feign</h3>

<p>在RestTemplate上进一步抽象，实现和Spring MVC对等的method封装。因为要组client，所以<code>@RequestParam</code>
中的value不能少。</p>

<p>```java
@FeignClient("Hello-Service")
public interface HelloService {
  @RequestMapping(value="/hello1", method=RequestMethod.GET) //指明要访问的路径和方法
  User hello(@RequestParam("name") String name, @RequestHeader("age") Integer age); //指明构造请求是的参数名称
}</p>

<p>//调用方式
helloService.hello("DiDi", 30);
```</p>

<h3>Zuul Api 网关</h3>

<p>网关的事情就两条：<br/>
1. 路由
2. 过滤</p>

<p>Zuul的路由结合了治理服务，下面就把一个路径全部转发去了一个服务</p>

<p><code>
zuul.routes.service-a.path=/aaa/**
zuul.routes.service-a.serviceId=Hello-Service
</code>
过滤器则可以通过继承一个抽象类<code>ZuulFilter</code>并实现4个方法来实现。</p>

<p>```java
public class AccessFilter extends ZuulFilter {
  ....
}</p>

<p>@EnableZuulProxy
@SpringCloudApplication
public class Application {
  public static void main(String[] args) {</p>

<pre><code>new SpringApplicationBuilder(Application.class).web(true).run(args);
</code></pre>

<p>  }</p>

<p>  @Bean
  public AccessFilter accessFilter() {</p>

<pre><code>return new AccessFilter();
</code></pre>

<p>  }
}
```</p>

<h3>Spring Cloud Config</h3>

<p>基于git（也可以是svn或本地目录）的配置中心，其实就是一个可以保存各种配置信息，然后由其他微服务读取后拉起应用。</p>

<h3>Bus 和 Stream 消息总线和消息流</h3>

<p>目前只支持RabbitMQ和kafka两种队列，kafka更多的好像和实时日志处理流相关</p>
]]></content>
  </entry>
  
</feed>
