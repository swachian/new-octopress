<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2019-02-08T23:07:57+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Agile： 理解Scrum, XP, Lean and Kanban]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile/"/>
    <updated>2019-02-08T12:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile</id>
    <content type="html"><![CDATA[<p>初次接触敏捷的概念是很早的事情了，可能始自于Uncle Bob的那本ASD。
其后，因为一直以来认为的软件开发很多事情在做之前其实很多是不确定的，因此日常的开发中虽然没有采用站会之类的形势，也没有单独的产品经理，
但实际上是按照敏捷的精神在进行开发。这些精神包括：</p>

<ul>
<li>个体和互动高于流程和工具（不过我认为工具十分重要）</li>
<li>可工作的软件高于详尽的文档</li>
<li>客户协作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ul>


<p>这些都是在多年开发实践中所坚持的原则。但是，一直以来忽略了其中最重要的一点：人。</p>

<p>因为之前工作的单位，从客户、领导到同事、下属都是合作多年，彼此也知道对方的能力以及可以信赖的程度，所以敏捷的精神得以贯彻。
然而在两年前去到新环境后，身边合作人员的水平较以往参差不齐的多，主要是上游的产品、BA等怎么合作都没有及时地确立或调整出新的办法，
导致敏捷的原则压根没法贯彻。<br/>
直到大约一年半以前，才发现敏捷的形式（实践）其实已较为普及。今年在新单位，有专职的敏捷教练和产品经理，在一年的实践中，体会了不少敏捷的好处，但也
发现了不少问题，尤其是随着时间的流逝敏捷实施似乎越来越难了。而问题依然很类似：</p>

<ol>
<li>人员水平参差不齐，其实不是每个人都知道怎么配合</li>
<li>上游虽然有产品经理，但公司还会安排其他人来提需求，但很可能完全不懂软件开发，导致沟通合作困难</li>
</ol>


<p>所以，下决心利用假期好好弄明白当前的敏捷到底指什么，然后再看看怎么结合现在面临的情况进行调整。</p>

<p>简单的说，一般的敏捷方式和Scrum是同义词，而XP（极限编程）是软件开发中的一种敏捷模式，Scrum则更偏向项目管理以及集体协作方面。
至于Lean，则只是一种思想，没有具体的形式，Kanban也是来自于日本汽车制造商，其核心作用是找出整个流程中的瓶颈。</p>

<p>与Scrum对应的是上令下行的管理方法，这种方法下需要较完善的需求规格（极难），较强的PM规划设计（很可能是瞎计划）和计划重构能力，
而Scrum则要求团队的主人翁精神（也很难）。但本质上，Scrum把决策和风险都放给了整个团队，基于软件开发很多只有事到临头对着代码
才能明确什么方法最好，因此这种下放或者说要求一线成员能力更大、承担更多责任和决策的模式是有其道理的。整个团队中，开发、产品、PM都能拥有平等的发言权。</p>

<h2>Scrum</h2>

<p>在项目开始时，只是确定要做的任务（用户故事）有哪些，也会拆分任务，但不一定要完成所有任务的分配。即要有<strong>任务清单</strong>，但不全部确定计划完成者。
细节在例会后讨论，每天例会可以由不同的人轮流讲3个问题：</p>

<ol>
<li>我昨天干了什么？</li>
<li>我将要干什么？</li>
<li>我遇到了什么困难？</li>
</ol>


<p>本质上是让团队成为项目的主人，齐心协力去寻找更有效的工作方式，找到了整个团队就一起成长了。而告诉团队工作成果的价值要好于告诉团度业务收入的价值，对团队而言，
有价值的是软件能带来什么？让用户生活更美好是一种真实、真诚、鼓舞人心的目标。
<strong>自我管理</strong>和<strong>集体承诺</strong>是Scrum的魂（精神），要求每个人都成为猪而不是鸡，每日例会和积压工作表是Scrum的形式（实践）。产品所有者是Scrum的产物，但实际上也
很难区分和传统的业务分析人员的区别。</p>

<p>Scrum用到的概念还包括用户故事，满意条件，故事点和速度<br/>
燃尽图表示随着时间的流逝，还剩多少任务。</p>

<p>Scrum的价值观：</p>

<ul>
<li>承诺</li>
<li>尊重</li>
<li>专注</li>
<li>开放</li>
<li>勇气</li>
</ul>


<h2>极限编程(XP)</h2>

<p>极限编程强调结对以及测试驱动，一切的目的是为了方便自动化测试，比如避免过深的调用栈。着力于消灭代码异味。<br/>
有时候过多的边界情况考虑和处理也是过度设计，是某种<strong>框架陷阱</strong>误区。</p>

<p>作者还提到了<strong>反模式</strong>的概念。
所谓反模式就是会给项目带来麻烦和问题的行为模式，比如解决某人只有95%的时间在干活，喜欢称人为资源。</p>

<p>代码异味和反模式都是人制造出来的，又是人识别出来的，并且可以由人来防止或修正。所以解决方案一定是技术和团队两方面一起努力。</p>

<p>然而，测量什么就会得到什么。瀑布式开发的目标也不是文档，但最终会得到很多文档，可运行的软件反而变成了副产品。TDD的目标也不是文档或测试，但最终得到了很多测试，可运行的软件本身反而也成了副产品。</p>

<h2>精益</h2>

<p>精益针对的反模式就是<strong>浪费</strong>，目标就是减少浪费。包括无用的功能和形式。同时提到了<strong>工作进度面积图</strong>，这种图的作用可以反应当前处于各个状态的任务数量及比例。其表示状态的词汇如下：</p>

<ul>
<li>Muda 徒劳无益</li>
<li>Mura 不均衡</li>
<li>Muri 不合理或不可能</li>
</ul>


<p>衡量是否精益的一大指标是从需求提出到上线发布的间隔时长，即<strong>交付时间</strong>，这里是借用了丰田生产汽车的概念。强调0或者低库存。</p>

<p>日常项目中容易遇到两个反精益的模式：</p>

<ul>
<li>老板的神奇思维（Magic thinking）：只要我想要，只要我施压，团队就一定会做出来。</li>
<li>英雄员工：十分肯加班加点的员工</li>
</ul>


<p>敏捷是无法同上面两个共存的。</p>

<p>神奇思维和英雄员工制造的最大问题是会导致软件产品的质量和测试都很差，最终开发速度会变的慢上2倍以上。因为欠的债太多最终都会变成成本。</p>

<h2>Kanban</h2>

<p>看板可以让经理不再动不动就分配新功能。比任务处理的内容要更“大”一些。看板中的每个栏目表示工作流程中的容器，是一种分析问题出在哪个环节的可视化分析方法。</p>

<p><strong>Shuhari</strong>，借用武学概念，守破离。</p>

<ul>
<li>守：按套路来</li>
<li>破：打破套路</li>
<li>离：自成一派</li>
</ul>


<p>小结： 确实如一个十分能干的小朋友曾经跟我交流的，中国的企业没有真正实行敏捷开发的。其实敏捷本身和中国大部分软件企业的文化并不兼容，因此大部分只是具备了敏捷的一些实践，而没有敏捷真正的灵魂。至于我司到底是否能敏捷起来，也只能把决策留到最后再说了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[坚持的成果]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo/"/>
    <updated>2019-02-03T23:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo</id>
    <content type="html"><![CDATA[<p>坚持，始终是一种美德。
在软件开发的世界里，Java坚持了很多年，Mybatis也坚持了很多年。
尽管动态语言是那么的适合web开发，以至于Java在他们面前有好几年十分的被动。但通过Spring的IOC等特性，
生生造出来了一个具备很多动态语言特性的框架，从而具备了很多原本只有动态语言才具备的特性。</p>

<p>另外，Mybatis从一个起初土的掉渣的东西，经过十几年持续有人使用的努力，现在竟然在mybatis-plus的帮助下形成了
Java持久层最出色的一员。在兼容Mybatis的基础上，完全具备了JPA的优势，但在查询和支持SQL上又要远较JPA灵活许多。
因为坚持，实现了巨大的超越。</p>

<p>所以，有时候我们需要有点耐心，坚持一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Code]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code/"/>
    <updated>2018-05-01T14:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code</id>
    <content type="html"><![CDATA[<p>Uncle Bob的这本书也是一本名著了，书籍本身其实就是讲编程风格的，可以把编码技能磨砺的
更锋利些。</p>

<p>全书的要旨在于每一次重构都要让代码更加整洁，同时测试代码和业务代码一样对待。具体开始做起来，则是从很小之处开始着手。</p>

<ol>
<li><p><strong>命名</strong>是很重要的一个东西，好的命名可以省下很多注释，因为好的命名本身就帮助理解程序。命名包括了方法名和变量名。</p></li>
<li><p><strong>函数</strong>要尽可能的短，比如20行，可以在一屏里面显示，如果一个方法太长，那么肯定是命名没有弄好，可以继续拆分。此外，<strong>参数</strong>要尽可能的少，能不要参数就不要参数，一个参数好于二个参数，二个参数好于三个参数，三个参数是大部分方法的极限。</p></li>
<li><p><strong>注释</strong>以阐述为主，不要使用太多的废话，如果确定要写注释，也要认真编写。</p></li>
<li><p><strong>格式</strong>是多个代码之间的关联和布局规则。Bob推荐类似报纸的编写方式，大标题后面跟随小标题，比如大的<code>public</code>方法后面跟随小的<code>private</code>方法。和函数的规则一样，垂直相关的内容尽量放在一起。</p></li>
<li><p><strong>数据和对象</strong>牵涉偏向过程还是偏向面向对象。对于面向对象来讲，一般不增加method而是增加类型，对面向过程来讲，一般增加方法而不动数据结构，现实中肯定是二者皆有。</p></li>
<li><p><strong>错误处理</strong>错误处理粗返回码外，也可以考虑使用异常来进行封装。</p></li>
<li><p><strong>边界</strong>划分好后，对第三方的库和方法要单独测试和封装，以减少对本系统的影响。</p></li>
<li><p><strong>类</strong>也要单一权责，内聚，可以用许多短小的类来构建程序。</p></li>
</ol>


<p>多用<code>Enum</code>，少用<code>const</code><br/>
多用<code>strategy</code>, <code>template</code>，少用<code>if</code>, <code>switch</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青轴的蓝牙键盘]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan/"/>
    <updated>2018-04-28T21:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan</id>
    <content type="html"><![CDATA[<p>去年听同事介绍买了一个Filco的红轴蓝牙键盘。一千多的东西虽然用着也不错，但始终谈不上喜欢。
而且在用了一年之后，其键帽毕竟是ABS材质，打油、磨损等接踵而至。加上2月底摸了下老同事的Filco青轴键盘，
于是对青轴开始长草。</p>

<p>但是，依然对Filco的ABS键帽心有余悸，于是做了一番研究。发现相对于ABS， PBT/POM的键帽相对不容易打油的多，
于是开始在PBT+Cherry青轴+蓝牙之间寻找。找来找去，发现要么只能满足PBT+Cherry轴的那些Cherry原厂键盘或者Leopold这样的韩国品牌，要么就是键帽是ABS的大F，唯有IKBC在去年下半年推出了完全符合我要求的键盘，正好京东又搞活动价格只要499，于是入了一款。</p>

<p>使用之后，确实爱上了这款键盘。清脆高级的手感，漂亮的颜值，无线的简洁，一下子让敲击多了很多很多的乐趣。真有相见恨晚之感！</p>

<p>-- Update On 2019.01.01<br/>
随后在12月初又购入Ganss的茶轴键盘。也是PBT+原厂Cherry轴，键帽是PBT双色印刷，较IKBC的更为细腻。
购入原因有二： 1.想体验一把茶轴的感觉；2.想要一把全尺寸键盘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为你自己学Git笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/03/04/wei-ni-zi-ji-xue-gitshu-ping/"/>
    <updated>2018-03-04T14:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/03/04/wei-ni-zi-ji-xue-gitshu-ping</id>
    <content type="html"><![CDATA[<p>从Rails把代码库迁至GitHub起，接触Git已经很长时间了。但限于svn的惯性思维，其实我始终没有真的理解Git。
毕竟，上班一直是用的svn，去年12月后才开始迁移到git，而之前一个人用用GitHub的话，也确实是当一个svn在使用，主要就是实现通过中心节点实现多个终端的内容和代码共享。</p>

<p>没有真正弄懂git的另一个原因，则是没有好的简明的说明教材，毕竟只是一个scm工具，自己舍不得在这上面花太多时间也是事实。而高见龙的这本《为你自己学Git》，目前只有繁体版，则写的够简洁也够深入，并且配合了很多例子，让人对git的原理、应用场景、使用方法都可以做到很清楚。</p>

<h2>git基本操作</h2>

<p>从Git设计之初来讲，它是去中心化的。所以本书的大部分运行环境和讲解例子都是基于本地目录。
<img src="https://gitbook.tw/images/using-git/working-staging-and-repository/all-states.png" alt="git存储结构" /></p>

<p><code>git add index.html</code>只是把文件从工作目录加入到了暂存区（staging area），<code>git commit</code>才能把内容放到存储库(repository)中。</p>

<p>不想让git管控可以给<code>git rm</code>加上<code>--cached</code>参数。 <code>git rm welcome.html --cached</code>,在git目录里的状态就从<code>tracked</code>变成<code>Untracked</code>。</p>

<p><code>git commit --amend</code> 可以修改最近的一次commit的内容和备注。如果要修改其他更久远的，则可以<code>git rebase</code>, <code>git reset</code>，极端情况删除<code>.git</code>目录重来。<br/>
同时, <code>--amend</code>还能往前一次commit中加入新文件。</p>

<p><code>.keep</code>往往用于新增目录时，为了目录进入仓库而作的占位文件。</p>

<p><code>.gitignore</code>搭配<code>git clean -fX</code>可清除已经被忽略的档案。</p>

<p><code>git log</code>增加<code>-p</code>参数可打印输出文件的变化内容。</p>

<p><code>git blame index.html</code> 可以看见每行是谁写的。
```
86145428 (swachian 2018-02-20 21:05:05 +0800  1) ---
86145428 (swachian 2018-02-20 21:05:05 +0800  2) layout: post
86145428 (swachian 2018-02-20 21:05:05 +0800  3) title: "Peopleware读书笔记"
86145428 (swachian 2018-02-20 21:05:05 +0800  4) date: 2018-02-16 14:20
86145428 (swachian 2018-02-20 21:05:05 +0800  5) comments: true
86145428 (swachian 2018-02-20 21:05:05 +0800  6) categories:
86145428 (swachian 2018-02-20 21:05:05 +0800  7) - 管理
86145428 (swachian 2018-02-20 21:05:05 +0800  8) ---
86145428 (swachian 2018-02-20 21:05:05 +0800  9)
86145428 (swachian 2018-02-20 21:05:05 +0800 10) 读完软件随想录，自然而然被吸引
去了另一本这个领域的名著《人件》</p>

<p>```</p>

<p><code>git checkout index.html</code>可以把误删除的文件恢复出来，如果有多个文件可以使用<code>git checkout .</code>一下子切出。<br/>
上面是从staging区域切出到工作目录，如果使用<code>git checkout HEAD~2 welcome.html</code>则是把上两个版本的文件切出到working目录和staging目录。</p>

<p><code>checkout</code>主要是动staging和working 区域，<code>git reset</code> 则会涉及版本库区域:</p>

<p><code>
git reset master^
git reset HEAD^
git reset 85e7e30
git reset e12d8ef^
git reset HEAD~5
</code>
<code>^</code>的作用是表示“前一次”。</p>

<p><code>git reset</code> 可配合模式使用，<code>--mixed</code>,<code>--soft</code>, <code>--hard</code>,默认是<code>--mixed</code>，它们对staging和working区域的反应是不一样的。因为<code>reset</code>的本意只是重新设置<code>HEAD</code>指向，顺便解决了staging和working的内容。</p>

<ul>
<li>soft: 只改HEAD指向，其他都不改</li>
<li>mixed: 只动staging的内容</li>
<li>hard: 改HEAD指向，改staging，改working</li>
</ul>


<p><code>git reflog</code> 可以调出每次HEAD移动的记录日志，找回相应的commit标识。命令等于<code>git log -g</code>，加上<code>-g</code>参数也有类似效果。</p>

<p><code>HEAD</code>指向的是某个分支，内容是具体文件<code>ref: refs/heads/master</code>，而这个文件里的内容则是某个commit形成的hash: <code>ef5dcf2ab28d2ec47252703815ab97bd4108f937</code></p>

<p><code>git add -p index.html</code> 可以选择编辑要加入暂存区的行。</p>

<h2>git本地分支操作</h2>

<p>设置分支最大的目的是保证主干不受影响。</p>

<p><code>git branch cat</code> 增加分支，<code>git branch -m cat dog</code>分支改名,
<code>git branch -d cat</code>删除分支，<code>git checkout cat</code>切换分支，
<code>git checkout -b cat</code>增加并切换分支，<code>git merge dog</code>合并分支</p>

<p><code>Fast Forward</code>在一个分支相对于另一个分支只有新增的commit内容时可以使用，
这是没有<strong>小耳朵</strong>的。
否则，git会再造一个commit来合并两个分支，并把一个分支向前推到新增的这个commit。
commit信息里面，<code>Parents</code>字段中被合并的分支名位于后面。
<img src="https://gitbook.tw/images/branch/merge-branch/dog_to_cat.png" alt="commit合并信息" /><br/>
使用<code>--no-ff</code>可以强制产生小耳朵的效果：<code>git merge cat --no-ff</code><br/>
<strong>分支只是一個指向某個 Commit 的指標。</strong></p>

<p><code>git rebase dog</code>是重新嫁接分支，原理是将当前分支的全部提交一个一个提取出来，
重新计算后作为新的提交加到基准分支<code>dog</code>当前commit的后面，最后把当前分支的Head
指向重新apply的最新提交。所以rebase之后，之前分支commit的日期就延后了。</p>

<p>要回退<code>rebase</code>，可以使用<code>git reflog</code>找到<code>rebase</code>前的最新的commit号。<br/>
简化版本是<code>git reset ORIG_HEAD --hard</code>，使用<code>ORIG_HEAD</code>指针。</p>

<p>有冲突的话，先编辑，然后<code>git add</code>加回暂存区，再<code>commit</code>。<br/>
如果是<code>rebase</code>的，则<code>git rebase --continue</code></p>

<p>二进制的内容: <code>git checkout --ours cute_animal.jpg</code>, <code>git checkout --theirs cute_animal.jpg</code></p>

<p><code>git rebase -i bb0c9c2</code> 可以整理提交历史, <code>squash</code>： 合并commit</p>

<p><code>revert</code>和<code>reset</code>的作用基本相同，但<code>revert</code>是再增加一个commit来实现取消前一次提交的效果，
一般用于多人合作时取消某些提交。</p>

<p><code>git tag</code>，善用tag，<strong>标签和分支最大的区别是标签打好之后这个指针不会再变化，分支则会继续前进</strong></p>

<p><code>git stash</code>，配合<code>git stash list</code>, <code>git stash pop/apply</code>使用, 存放手头工作，也可以先<code>commit</code>再<code>reset</code> .</p>

<p>要从<code>.git</code>中完全删除文件有很多步骤要做，要先解除，在gc，最后才能删除掉。当然，不如直接删除.git算了。</p>

<p>产生<strong>detached HEAD</strong>的原因：</p>

<ol>
<li>使用checkout到了一个没有分支指向的commit</li>
<li>rebase过程中，其实都是处于detached HEAD状态，所以一旦rebase有coflct，分支状态必然不对</li>
<li>切换到某个远端分支的时候</li>
</ol>


<p><code>git branch tiger b6d204e &amp;&amp; git checkout tiger</code> 该命令可以把当前的commit纳入到一个分支中，从而摆脱断头分支的状态</p>

<h2>git远端分支</h2>

<p>GitHub是最有名的远端版本库，可以用<code>git clone</code>获得远端repo库。</p>

<p>upstream意在设置上游分支，也就是下面这个命令中<code>-u</code>选项的作用。
<code>git push -u origin master</code>，会把<code>origin/master</code>设置为本地<code>master</code>分支的upstream。然后就
不必每次<code>git push origin master</code>, 直接使用<code>git push</code>即可。<br/>
<code>-u</code> = <code>--set-upstream</code></p>

<p><code>git push origin master:cat</code> 会把本地的<code>master</code>分支推向远端的<code>cat</code>分支。<br/>
<code>git push origin :cat</code> 可以删除远端的cat分支</p>

<p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code>, <code>fetch</code>同步了<code>origin/master</code>中的内容，
而此时<code>orgin/master</code>比本地<code>master</code>领先，那意味着原本是一个分支分出去的且京都更新，其实就是<code>merge</code>了，
有时候甚至还是Fast Forward方式进行，有时候可能会再造一个commit以完成任务。<br/>
但是，<code>pull</code>也可以是<code>rebase</code>方式的，例如<code>git pull --rebase</code>, 这就是用<code>rebase</code>替换上个等式右面的<code>merge</code><br/>
如果push有问题，则只能先拉再推</p>

<h3>Pull Request（PR）</h3>

<p>简而言之，把项目fork到自己的帐号即建立一个新的远端仓库，然后修改先push到这个新仓库，
然后比对自己和origin库的异同拉出一系列commit集合，这个集合就是Pull Request。
意思是请求原作者拉回去（Pull）的请求（Request）。
原作的叫<code>base fork</code>，自己的叫<code>head fork</code> 。</p>

<p>公司内部PR的用法：每个人fork到自己的帐号下，待完成后PR回公司的项目。负责管理这个项目的人受到PR后，
进行Code Review并确认这个提交无误后进行合并，从而保证这个分支处于随时可上线的状态。</p>

<p><code>git format-patch fd7cd38..6e6ed76</code> 会产生补丁文件。<code>git am /tmp/patches/*</code> 则是更新补丁</p>

<h2>Git Flow</h2>

<p>git的工作流。主要定义了5中分支组织的方式。</p>
]]></content>
  </entry>
  
</feed>
