<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2019-10-04T17:32:14+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rancher and k8s]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/10/04/rancher-and-k8s/"/>
    <updated>2019-10-04T16:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/10/04/rancher-and-k8s</id>
    <content type="html"><![CDATA[<p>今年不期而遇而使用的技术很多，除了大数据flink，就是rancher/k8s/docker了。</p>

<p>docker的话，几年前已经有过接触，总体感觉有价值，但对java来讲，帮助就比较有限了。<br/>
k8s是对docker的编排，其实就是把docker作为基本的单元，让各种服务可以在一个抽象的层面跑起来，在服务监控、伸缩等方面都提供了很好的抽象和封装，易于运维人员操作。<br/>
而Rancher，个人理解是k8s的编排，可能没那么复杂，但站在使用的角度，就便于安装、编辑、使用k8s的UI界面，当然，除了界面，幕后还有很多组件用于搭建一套k8s，启动相应的服务。</p>

<h2>安装</h2>

<p>因为他们都是基于docker的，所以前提需要安装好docker。然而，docker又是离不开OS的，所以前提是要装好OS。至于是物理主机还是虚机，倒是无所谓的。我选择使用Ubuntu 18.04 + Docker 19.03.2的组合，官方是到18.09.x。[https://rancher.com/docs/rancher/v2.x/en/installation/requirements/]</p>

<h3>安装docker</h3>

<p>```bash</p>

<h1>1. 移除旧版本</h1>

<p>sudo apt-get remove docker docker-engine docker.io</p>

<h1>2. 更新apt包索引</h1>

<p>sudo apt update</p>

<h1>3. 安装https支持包</h1>

<p>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</p>

<h1>4. 添加Docker官方GPG key</h1>

<p>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</p>

<h1>5. 添加稳定版的仓库源(按架构选择)</h1>

<p>sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"</p>

<h1>6. 更新apt包索引</h1>

<p>sudo apt update</p>

<h1>7. 安装</h1>

<p>sudo apt-get install docker-ce
```</p>

<h3>安装rancher</h3>

<p>执行下面命令即可</p>

<p><code>
docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest
</code>
直接用docker启动rancher镜像，并映射80和443端口给rancher的UI界面。随后用浏览器即可访问到rancher服务，用admin账号登录进去后，就可以进行后续的操作。</p>

<h3>增加集群</h3>

<p>在rancher的浏览器界面里，通过<code>Add Cluster</code>即可以增加节点。<br/>
首先需要增加的是etcd和controlpanel节点，这两个属于rancher的幕后服务。<br/>
命令在浏览器里会有提示，得到命令后，到要加入集群并且已经安装好docker的虚机上执行即可。命令很简单，就一条：</p>

<p><code>bash
sudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.2.8 --server https://172.17.3.186 --token gjvvrqpf4sbkl2l48zmpcdpmcbcb68fntdj44vlb2784ttgct6s6wc --ca-checksum ae6f90ddff032e2d040015f70283c2e9ed5282ebdfafe0edf11e163b540dd2a7 --etcd --controlpanel
</code>
--etcd和--controlpanel可部署在同一台机器上。然后需要耐心等待一段时间，因为会起很多个docker的服务。</p>

<p>光有控制资源是不够的，还需要加入worker资源，这个就比较方便了，可以随时扩容。</p>

<h3>新建服务</h3>

<p>上述弄完以后，就可以发布新的服务了。</p>

<p>到新建的集群中选择<code>Deploy</code>，拉取对应的镜像，设置好pod数量，就可以拉起服务。不过，这个对应的镜像主要是公共的镜像，如果私有镜像，则需要另外进行配置。</p>

<h2>新建私有docker仓库</h2>

<p>本身构造仓库并不复杂，逻辑上只要找一台虚机启动一个docker的registry服务，然后在rancher浏览器的<code>Resources-&gt;Registries</code>中注册一下这个地址即可。<br/>
但事实上永远不会那么简单。主要原因在于docker默认是需要https才能对外提供服务，这就需要进行很多额外的配置。当然，主要是私有仓库的配置。可以参考下面几个链接：
https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/registries/
https://docs.docker.com/registry/deploying/
https://docs.docker.com/registry/insecure/</p>

<p>最后形成的做法如下。</p>

<p>一. 选择一台虚机作为registry主机，最好不要和rancher是一台机器，这样避免争抢443端口。在这台机器上先生成一下证书：
<code>bash
mkdir certs
openssl req \
  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \
  -x509 -days 365 -out certs/domain.crt
</code></p>

<p>这里面要注意cn需要输入自己定义的域名，比如mydocker.co</p>

<p>二. 将生成的<code>domain.crt</code>改名为<code>ca.crt</code>, 上传或复制为其他docker主机的<code>/etc/docker/certs.d/mydocker.co/ca.crt</code>，绑定这些主机的<code>hosts</code>文件中该域名的指向到上一步的ip中，或者也可以修改域名服务器里该域名</p>

<p>三. 在第一台机器上运行docker的registry服务。
<code>bash
docker run -d \
  --restart=always \
  --name registry \
  -v "/opt/registry/certs":/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -p 443:443 \
  registry:2
</code></p>

<p>上面的命令中，<code>--restart=always</code>表示每次重启docker都会重启该服务，<code>-v</code>是挂载了卷，并将生成的ca证书指给了这个服务，3个<code>-e</code>设置了容器里运行的变量值，<code>-p 443:443</code>把主机和容器的443端口对应起来，<code>registry:2</code>表示第二个版本的registry</p>

<p>四. 再次deploy服务的时候，直接在镜像地址中带出<code>mydocker.co</code>开头的镜像链接即可，比如<code>mydocker.co/my-ubuntu</code> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Agile： 理解Scrum, XP, Lean and Kanban]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile/"/>
    <updated>2019-02-08T12:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile</id>
    <content type="html"><![CDATA[<p>初次接触敏捷的概念是很早的事情了，可能始自于Uncle Bob的那本ASD。
其后，因为一直以来认为的软件开发很多事情在做之前其实很多是不确定的，因此日常的开发中虽然没有采用站会之类的形势，也没有单独的产品经理，
但实际上是按照敏捷的精神在进行开发。这些精神包括：</p>

<ul>
<li>个体和互动高于流程和工具（不过我认为工具十分重要）</li>
<li>可工作的软件高于详尽的文档</li>
<li>客户协作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ul>


<p>这些都是在多年开发实践中所坚持的原则。但是，一直以来忽略了其中最重要的一点：人。</p>

<p>因为之前工作的单位，从客户、领导到同事、下属都是合作多年，彼此也知道对方的能力以及可以信赖的程度，所以敏捷的精神得以贯彻。
然而在两年前去到新环境后，身边合作人员的水平较以往参差不齐的多，主要是上游的产品、BA等怎么合作都没有及时地确立或调整出新的办法，
导致敏捷的原则压根没法贯彻。<br/>
直到大约一年半以前，才发现敏捷的形式（实践）其实已较为普及。今年在新单位，有专职的敏捷教练和产品经理，在一年的实践中，体会了不少敏捷的好处，但也
发现了不少问题，尤其是随着时间的流逝敏捷实施似乎越来越难了。而问题依然很类似：</p>

<ol>
<li>人员水平参差不齐，其实不是每个人都知道怎么配合</li>
<li>上游虽然有产品经理，但公司还会安排其他人来提需求，但很可能完全不懂软件开发，导致沟通合作困难</li>
</ol>


<p>所以，下决心利用假期好好弄明白当前的敏捷到底指什么，然后再看看怎么结合现在面临的情况进行调整。</p>

<p>简单的说，一般的敏捷方式和Scrum是同义词，而XP（极限编程）是软件开发中的一种敏捷模式，Scrum则更偏向项目管理以及集体协作方面。
至于Lean，则只是一种思想，没有具体的形式，Kanban也是来自于日本汽车制造商，其核心作用是找出整个流程中的瓶颈。</p>

<p>与Scrum对应的是上令下行的管理方法，这种方法下需要较完善的需求规格（极难），较强的PM规划设计（很可能是瞎计划）和计划重构能力，
而Scrum则要求团队的主人翁精神（也很难）。但本质上，Scrum把决策和风险都放给了整个团队，基于软件开发很多只有事到临头对着代码
才能明确什么方法最好，因此这种下放或者说要求一线成员能力更大、承担更多责任和决策的模式是有其道理的。整个团队中，开发、产品、PM都能拥有平等的发言权。</p>

<h2>Scrum</h2>

<p>在项目开始时，只是确定要做的任务（用户故事）有哪些，也会拆分任务，但不一定要完成所有任务的分配。即要有<strong>任务清单</strong>，但不全部确定计划完成者。
细节在例会后讨论，每天例会可以由不同的人轮流讲3个问题：</p>

<ol>
<li>我昨天干了什么？</li>
<li>我将要干什么？</li>
<li>我遇到了什么困难？</li>
</ol>


<p>本质上是让团队成为项目的主人，齐心协力去寻找更有效的工作方式，找到了整个团队就一起成长了。而告诉团队工作成果的价值要好于告诉团度业务收入的价值，对团队而言，
有价值的是软件能带来什么？让用户生活更美好是一种真实、真诚、鼓舞人心的目标。
<strong>自我管理</strong>和<strong>集体承诺</strong>是Scrum的魂（精神），要求每个人都成为猪而不是鸡，每日例会和积压工作表是Scrum的形式（实践）。产品所有者是Scrum的产物，但实际上也
很难区分和传统的业务分析人员的区别。</p>

<p>Scrum用到的概念还包括用户故事，满意条件，故事点和速度<br/>
燃尽图表示随着时间的流逝，还剩多少任务。</p>

<p>Scrum的价值观：</p>

<ul>
<li>承诺</li>
<li>尊重</li>
<li>专注</li>
<li>开放</li>
<li>勇气</li>
</ul>


<h2>极限编程(XP)</h2>

<p>极限编程强调结对以及测试驱动，一切的目的是为了方便自动化测试，比如避免过深的调用栈。着力于消灭代码异味。<br/>
有时候过多的边界情况考虑和处理也是过度设计，是某种<strong>框架陷阱</strong>误区。</p>

<p>作者还提到了<strong>反模式</strong>的概念。
所谓反模式就是会给项目带来麻烦和问题的行为模式，比如解决某人只有95%的时间在干活，喜欢称人为资源。</p>

<p>代码异味和反模式都是人制造出来的，又是人识别出来的，并且可以由人来防止或修正。所以解决方案一定是技术和团队两方面一起努力。</p>

<p>然而，测量什么就会得到什么。瀑布式开发的目标也不是文档，但最终会得到很多文档，可运行的软件反而变成了副产品。TDD的目标也不是文档或测试，但最终得到了很多测试，可运行的软件本身反而也成了副产品。</p>

<h2>精益</h2>

<p>精益针对的反模式就是<strong>浪费</strong>，目标就是减少浪费。包括无用的功能和形式。同时提到了<strong>工作进度面积图</strong>，这种图的作用可以反应当前处于各个状态的任务数量及比例。其表示状态的词汇如下：</p>

<ul>
<li>Muda 徒劳无益</li>
<li>Mura 不均衡</li>
<li>Muri 不合理或不可能</li>
</ul>


<p>衡量是否精益的一大指标是从需求提出到上线发布的间隔时长，即<strong>交付时间</strong>，这里是借用了丰田生产汽车的概念。强调0或者低库存。</p>

<p>日常项目中容易遇到两个反精益的模式：</p>

<ul>
<li>老板的神奇思维（Magic thinking）：只要我想要，只要我施压，团队就一定会做出来。</li>
<li>英雄员工：十分肯加班加点的员工</li>
</ul>


<p>敏捷是无法同上面两个共存的。</p>

<p>神奇思维和英雄员工制造的最大问题是会导致软件产品的质量和测试都很差，最终开发速度会变的慢上2倍以上。因为欠的债太多最终都会变成成本。</p>

<h2>Kanban</h2>

<p>看板可以让经理不再动不动就分配新功能。比任务处理的内容要更“大”一些。看板中的每个栏目表示工作流程中的容器，是一种分析问题出在哪个环节的可视化分析方法。</p>

<p><strong>Shuhari</strong>，借用武学概念，守破离。</p>

<ul>
<li>守：按套路来</li>
<li>破：打破套路</li>
<li>离：自成一派</li>
</ul>


<p>小结： 确实如一个十分能干的小朋友曾经跟我交流的，中国的企业没有真正实行敏捷开发的。其实敏捷本身和中国大部分软件企业的文化并不兼容，因此大部分只是具备了敏捷的一些实践，而没有敏捷真正的灵魂。至于我司到底是否能敏捷起来，也只能把决策留到最后再说了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[坚持的成果]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo/"/>
    <updated>2019-02-03T23:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo</id>
    <content type="html"><![CDATA[<p>坚持，始终是一种美德。
在软件开发的世界里，Java坚持了很多年，Mybatis也坚持了很多年。
尽管动态语言是那么的适合web开发，以至于Java在他们面前有好几年十分的被动。但通过Spring的IOC等特性，
生生造出来了一个具备很多动态语言特性的框架，从而具备了很多原本只有动态语言才具备的特性。</p>

<p>另外，Mybatis从一个起初土的掉渣的东西，经过十几年持续有人使用的努力，现在竟然在mybatis-plus的帮助下形成了
Java持久层最出色的一员。在兼容Mybatis的基础上，完全具备了JPA的优势，但在查询和支持SQL上又要远较JPA灵活许多。
因为坚持，实现了巨大的超越。</p>

<p>所以，有时候我们需要有点耐心，坚持一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Code]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code/"/>
    <updated>2018-05-01T14:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code</id>
    <content type="html"><![CDATA[<p>Uncle Bob的这本书也是一本名著了，书籍本身其实就是讲编程风格的，可以把编码技能磨砺的
更锋利些。</p>

<p>全书的要旨在于每一次重构都要让代码更加整洁，同时测试代码和业务代码一样对待。具体开始做起来，则是从很小之处开始着手。</p>

<ol>
<li><p><strong>命名</strong>是很重要的一个东西，好的命名可以省下很多注释，因为好的命名本身就帮助理解程序。命名包括了方法名和变量名。</p></li>
<li><p><strong>函数</strong>要尽可能的短，比如20行，可以在一屏里面显示，如果一个方法太长，那么肯定是命名没有弄好，可以继续拆分。此外，<strong>参数</strong>要尽可能的少，能不要参数就不要参数，一个参数好于二个参数，二个参数好于三个参数，三个参数是大部分方法的极限。</p></li>
<li><p><strong>注释</strong>以阐述为主，不要使用太多的废话，如果确定要写注释，也要认真编写。</p></li>
<li><p><strong>格式</strong>是多个代码之间的关联和布局规则。Bob推荐类似报纸的编写方式，大标题后面跟随小标题，比如大的<code>public</code>方法后面跟随小的<code>private</code>方法。和函数的规则一样，垂直相关的内容尽量放在一起。</p></li>
<li><p><strong>数据和对象</strong>牵涉偏向过程还是偏向面向对象。对于面向对象来讲，一般不增加method而是增加类型，对面向过程来讲，一般增加方法而不动数据结构，现实中肯定是二者皆有。</p></li>
<li><p><strong>错误处理</strong>错误处理粗返回码外，也可以考虑使用异常来进行封装。</p></li>
<li><p><strong>边界</strong>划分好后，对第三方的库和方法要单独测试和封装，以减少对本系统的影响。</p></li>
<li><p><strong>类</strong>也要单一权责，内聚，可以用许多短小的类来构建程序。</p></li>
</ol>


<p>多用<code>Enum</code>，少用<code>const</code><br/>
多用<code>strategy</code>, <code>template</code>，少用<code>if</code>, <code>switch</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青轴的蓝牙键盘]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan/"/>
    <updated>2018-04-28T21:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan</id>
    <content type="html"><![CDATA[<p>去年听同事介绍买了一个Filco的红轴蓝牙键盘。一千多的东西虽然用着也不错，但始终谈不上喜欢。
而且在用了一年之后，其键帽毕竟是ABS材质，打油、磨损等接踵而至。加上2月底摸了下老同事的Filco青轴键盘，
于是对青轴开始长草。</p>

<p>但是，依然对Filco的ABS键帽心有余悸，于是做了一番研究。发现相对于ABS， PBT/POM的键帽相对不容易打油的多，
于是开始在PBT+Cherry青轴+蓝牙之间寻找。找来找去，发现要么只能满足PBT+Cherry轴的那些Cherry原厂键盘或者Leopold这样的韩国品牌，要么就是键帽是ABS的大F，唯有IKBC在去年下半年推出了完全符合我要求的键盘，正好京东又搞活动价格只要499，于是入了一款。</p>

<p>使用之后，确实爱上了这款键盘。清脆高级的手感，漂亮的颜值，无线的简洁，一下子让敲击多了很多很多的乐趣。真有相见恨晚之感！</p>

<p>-- Update On 2019.01.01<br/>
随后在12月初又购入Ganss的茶轴键盘。也是PBT+原厂Cherry轴，键帽是PBT双色印刷，较IKBC的更为细腻。
购入原因有二： 1.想体验一把茶轴的感觉；2.想要一把全尺寸键盘。</p>
]]></content>
  </entry>
  
</feed>
