<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: java | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2017-05-30T16:11:34+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java新的兼容性挑战者Kotlin]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/05/21/javaxin-de-jian-rong-xing-tiao-zhan-zhe-kotlin/"/>
    <updated>2017-05-21T16:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/05/21/javaxin-de-jian-rong-xing-tiao-zhan-zhe-kotlin</id>
    <content type="html"><![CDATA[<p>520期间被刷屏的除了show 恩爱，就是Kotlin了。
原本只是在一个做安卓的小朋友发的pdf里看见了Kotlin，想想应该又是一个和scala groovy或者closure类似的东西---
可以跑在jvm上，能利用jdk的库，语言表达力又强于java。</p>

<p>Java尽管有点啰嗦，语言表达力确实一般，但企业级的支持很强，jvm的性能更是出色，所以在类库、ide、甚至大型开发框架方面是无与伦比的。在jvm上跑的语言很多，甚至想部分替代的如scala closure groovy等等都火过一阵子，但是java继续维持着自己的优势地位。</p>

<p>然而这次真正被刷屏的，是因为Google认了Kotlin为<strong>干儿子</strong>，甚至以后可能是亲儿子，将kotlin变成了
头等安卓开发语言。查了一下，此前获得此定位的仅有java，这就可能有很大的不同了。kotlin有了google的支持，而其他所谓挑战者可没这个干爹。并且，Kotlin的创建者又是目前最流行的java ide的公司贡献的，可以保证在<strong>开发工具上的体验和支持</strong>，这么看来它的优势就比scala等强多了。</p>

<p>希望还是能帮助java改进吧，当然这个有点难，即使java8好几年下来了，也不知道有没有普及率超过java程序员的50%</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thymeleaf感想]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/05/21/thymeleafgan-xiang/"/>
    <updated>2017-05-21T00:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/05/21/thymeleafgan-xiang</id>
    <content type="html"><![CDATA[<p>刚使用spring boot时得知thymeleaf取代了jsp的默认地位，我是有所抵触的，做法就是重新配置回了jsp。
然而随着java web开发前后端业已分离的现实，逐步明白view层是thymeleaf还是jsp已经不再重要。因为java已变成
服务成守候在服务器侧，而原先页面的工作已经完全交给了（不需要会java）的前端人员，且他们是完全可以胜任的。</p>

<p>实际上截至目前，最新版的thymeleaf已经到了3.0以上的版本，而spring boot最新版集成的还是<strong>2.x</strong>的thymeleaf的版本，
可以认为这块已经处于冷淡的状态。</p>

<p>不过，凡是总有例外。这次又碰见了需要产生静态页面的业务场景，其中有不少的业务逻辑，所以还是需要一个view层，考虑到
新团队的习惯，决定采用thymeleaf吧，这样以后维护可以交给前端来做。于是简易学习了一下leaf，感觉还是不错的。</p>

<p>leaf最大的特色就是前端人员可以直接打开leaf所在的html页面，并做到完全的无异物感。脚本、链接完全动态静态可以分开。
这样解决了jsp长期以来美工介入很困难的问题,同时做的又比freemaker等更加到位。内置标签支持的语言语法也很现代化和好用，一般有jsp经验的程序员，
花个半天看一下一百来页的手册并动手实践一下，就完全可上手了。至于<code>jsp</code>，是可以退出历史舞台了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zookeeper]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/01/15/zookeeper/"/>
    <updated>2017-01-15T10:27:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/01/15/zookeeper</id>
    <content type="html"><![CDATA[<p>用于协作的服务，提供目录树的结构。基本可以认为是Yahoo出品。</p>

<p>data registers - called znodes, file
parlance - directory</p>

<p>数据全部保存在内存中。</p>

<p>优势：
1. 性能好，可在大规模的分布式系统里使用
2. 可靠性高，可防止单点故障
3. 严格的顺序性，可满足复杂的、高精的客户端同步实现要求</p>

<p>znode的读写有acl控制以及版本号</p>

<p>leader nodes负责接受写的请求，follower nodes负责被同步和读取</p>

<p>配置示例</p>

<p><code>
tickTime=2000
dataDir=/var/lib/zookeeper
clientPort=2181
initLimit=5
syncLimit=2
server.1=zoo1:2888:3888
server.2=zoo2:2888:3888
server.3=zoo3:2888:3888
</code></p>

<p>tickTime是一个即使单元，单位是毫秒，2000表示2秒。<br/>
dataDir是存放数据文件的物理位置。<br/>
initLimit表示n个tickTime，上面这个就是10秒的意思，表示连接上leader nodes需要的时间单元数量。<br/>
syncLimit表示山离皇帝能有多远过期<br/>
server.1中的1的服务器内部的<code>myid</code>，zoo1是服务器地址，第二个port即2888用于follewer连接leader，
第三更port 3888用于选举leader。</p>

<p>基本上，zookeeper可以理解成一个分布式系统里，用于进程间通信的中间件，所以剩下的就是客户端调用了。
项目本身提供了C和Java的binding，具体实现时每个客户端会分为IO线程和watch线程两个。而Netflix在此基础上，
构造了wrapper: <code>curator</code>，以方便开发。</p>

<p>首先，引入maven依赖:</p>

<p>```
<dependency></p>

<pre><code>&lt;groupId&gt;org.apache.curator&lt;/groupId&gt;  
&lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;  
&lt;version&gt;3.2.1&lt;/version&gt;  
</code></pre>

<p></dependency>
```</p>

<p>然后，在代码中可如下调用：</p>

<p>```java
package zookeepertest;</p>

<p>import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.retry.ExponentialBackoffRetry;</p>

<p>public class CuratorTest {</p>

<pre><code>public void set() {
    String zookeeperConnectionString="127.0.0.1:2181";
    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
            CuratorFramework client = CuratorFrameworkFactory.newClient(zookeeperConnectionString, retryPolicy);


            client.start();

            try {
                client.create().forPath("/my", "555".getBytes());

                client.getData().forPath("/my");
                Thread.sleep(1000);

                client.setData().forPath("/my", "666".getBytes());

            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
}

public static void main(String[] args) {
    CuratorTest test = new CuratorTest();
    test.set();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>这种调用方式是比较原始的进程间通信，以此为基础，recipes已经实现了一系列通信的高级语意，
如lock、semaphore、确认leader等，可以直接使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring boot in action]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action/"/>
    <updated>2016-09-19T14:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action</id>
    <content type="html"><![CDATA[<ul>
<li>Auto-Config</li>
<li>用starter处理依赖</li>
<li>CLI 命令行处理启动等</li>
<li>Actuator 监控组件 , 通过web或者shell</li>
</ul>


<p><code>
spring version
spring --version
spring shell # windows下打开可以自动补全的功能
</code></p>

<h3>工程初始化</h3>

<p><code>
spring init -dweb,jpa,security --build gradle -p jar -x //-x表示生成到当前目录
spring init -dweb,jpa,security --build gradle -p war myapp //表示生成工程到myapp目录
</code></p>

<p>```
@SpringBootApplication
public class DemoddfApplication {</p>

<p>public static void main(String[] args) {
SpringApplication.run(DemoddfApplication.class, args);
}
}
```</p>

<p>@SpringBootApplication 起到了过去3个标注的作用，打开了自动配置和自动扫描。如果有新的配置要求，@Configuration用在其他配置类中进行配置的扩充。而主class可以不必修改</p>

<p>用starter定义可实现更高度的抽象，也不必给出每个组件的版本号。通过<code>mvn dependency:tree</code>可查看实际的包依赖关系.
starter就是普通的maven或gradle依赖，所以可以exclude也可以指定更直接的版本。</p>

<h3>自动配置定制化的举例</h3>

<p>安全是最好的需要自己自行设置的例子，not one--size-fits-all。
这是yml方式
<code>
server:
port: 8443
ssl:
key-store: file:///path/to/mykeys.jks
key-store-password: letmein
key-password: letmein
</code></p>

<p>配置数据源</p>

<p><code>
spring:
datasource:
url: jdbc:mysql://localhost/readinglist
username: dbuser
password: dbpass
driver-class-name: com.mysql.jdbc.Driver
</code></p>

<h3>属性信息的几种来源</h3>

<ol>
<li>Command-line arguments</li>
<li>JNDI attributes from java:comp/env</li>
<li>JVM system properties</li>
<li>Operating system environment variables</li>
<li>Randomly generated values for properties prefixed with random.* (referenced when setting other properties, such as `${random.long})</li>
<li>An application.properties or application.yml file outside of the application</li>
<li>An application.properties or application.yml file packaged inside of the application</li>
<li>Property sources specified by @PropertySource</li>
<li>Default properties</li>
</ol>


<p>在application.properties中指定<code>spring.profiles.active</code>的值后，boot就会读取application-{active}.properties的值</p>

<h3>自动化测试</h3>

<p>@WebIntegrationTest Test class有这个标注就会让spring启动一个测试的tomcat或jetty进程</p>

<p>```
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(
classes=ReadingListApplication.class)
@WebIntegrationTest</p>

<p>public class SimpleWebTest {
@Test(expected=HttpClientErrorException.class)
public void pageNotFound() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject(
"http://localhost:8080/bogusPage", String.class);
fail("Should result in HTTP 404");
} catch (HttpClientErrorException e) {
assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
throw e;
}
}
}
```</p>

<p>代入参数
<code>@WebIntegrationTest(value={"server.port=0"})</code> 和 <code>@WebIntegrationTest("server.port=0")</code></p>

<p>selenium的用ie模拟访问自己的服务很有意思，值得制作一个。</p>

<p>```java</p>

<pre><code>            FirefoxDriver browser = new FirefoxDriver();
browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
String baseUrl = "http://www.baidu.com/";
browser.get(baseUrl);
String currentUrl = browser.getCurrentUrl();
assertEquals(baseUrl +"/readingList", currentUrl);

assertEquals("You have no books in your book list", 
             browser.findElementByTagName("div").getText());

browser.findElementByName("title").sendKeys("BOOK TITLE");
browser.findElementByName("author").sendKeys("BOOK AUTHOR");
browser.findElementByName("isbn").sendKeys("1234567890");
browser.findElementByName("description").sendKeys("DESCRIPTION");
browser.findElementByTagName("form").submit();

WebElement dl = 
    browser.findElementByCssSelector("dt.bookHeadline");
assertEquals("BOOK TITLE by BOOK AUTHOR (ISBN: 1234567890)", 
             dl.getText());
WebElement dt = 
    browser.findElementByCssSelector("dd.bookDescription");
assertEquals("DESCRIPTION", dt.getText());
</code></pre>

<p>```</p>

<p>《Selenium WebDriver in Practice》但还没完成，可能要到2016年10月份才能出版</p>

<p>/beans 列出创建的全部bean<br/>
/autoconfig 列出自动配置生效和未生效的内容<br/>
/env 列出设置的环境<br/>
/configprops 列出所有的参数<br/>
/metrics 列出访问的指标<br/>
/trace 给出近100个http请求的处理信息<br/>
/dump 给出所有线程的情况<br/>
/health 表明是否UP<br/>
/info 列出属性文件中info.开头的信息，但似乎有乱码</p>

<p>actuator的remote shell
默认启动一个端口在2000，每次启动时会生成一个密码，可以用ssh访问</p>

<p><code>
ssh user@localhost -p 2000
Password authentication
Password:
</code></p>

<p>自己定义metrics：</p>

<p>actuator有CounterService服务，可以用于增加值。
```
public interface CounterService {
void increment(String metricName);
void decrement(String metricName);
void reset(String metricName);
}</p>

<p>```</p>

<p>GaugeService是记录值</p>

<p><code>
public interface GaugeService {
void submit(String metricName, double value);
}
</code></p>

<p>自定义Health</p>

<p>```
@Component
public class AmazonHealth implements HealthIndicator {
@Override
public Health health() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject("http://www.amazon.com", String.class);
return Health.up().build();
} catch (Exception e) {
return Health.down().build();
}
}
}</p>

<p>//还可以加入更多的细节内容，使用withDetail</p>

<p>return Health.down().withDetail("reason", e.getMessage()).build();</p>

<p>```</p>

<p>上述endPoint的保护需采用所有spring暴露的链接一致的方式</p>

<p><code>management.context-path=/mgmt</code>，其中的<code>management.context-path</code>可以给spring actuator定义全部的前缀</p>

<p>这样可便于统一控制
<code>.antMatchers("/mgmt/**").access("hasRole('ADMIN')")</code></p>

<h3>部署时调整production环境变量</h3>

<p><code>@Profile("production")</code></p>

<p><code>export SPRING_PROFILES_ACTIVE=production</code></p>

<p>最简单的是export active的环境变量为<code>production</code></p>

<h3>spring的db migrate，不算很实用吧</h3>

<p>Spring Boot includes auto-configuration support for two popular database migration
libraries:<br/>
■ Flyway (http://flywaydb.org)  --- 直接采用SQL编写ddl<br/>
■ Liquibase (www.liquibase.org) --- 使用yaml json等</p>

<h3>附录</h3>

<p><code>
&lt;dependency&gt;
&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></p>

<p>开发工具具备自动重启的功能，但下面这些静态资源默认是exclude的: /META-INF/resources, /resources, /static, /
public, /templates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禁用http的一些方法]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/06/03/jin-yong-httpde-xie-fang-fa/"/>
    <updated>2016-06-03T14:24:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/06/03/jin-yong-httpde-xie-fang-fa</id>
    <content type="html"><![CDATA[<p>本来是挺正常的HTTP方法，现在变成了安全隐患。当然，也不能说不合理，毕竟基于能关的都关掉的思路，不使用的东西是可以禁掉。</p>

<p>Nginx的配法</p>

<p>```
if ($request_method !~* GET|HEAD|POST) {</p>

<pre><code>        return 403;
</code></pre>

<p>}
```
对于请求方法不是GET HEAD和POST的都返回403.</p>

<p>Tomcat的配法</p>

<p>```
&lt;security-constraint></p>

<pre><code>    &lt;web-resource-collection&gt;
            &lt;web-resource-name&gt;fortune&lt;/web-resource-name&gt;
            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
            &lt;http-method&gt;PUT&lt;/http-method&gt;
            &lt;http-method&gt;DELETE&lt;/http-method&gt;
            &lt;http-method&gt;OPTIONS&lt;/http-method&gt;
            &lt;http-method&gt;TRACE&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;&lt;/auth-constraint&gt;
</code></pre>

<p>&lt;/security-constraint>
&lt;login-config></p>

<pre><code>    &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
</code></pre>

<p>&lt;/login-config>
```</p>

<p>这里面login-config可以不配，也不会影响效果。auth-constraint一定要配，如果不出现（即值为null），则全部的限制将不起作用。
元素出现而值不填，则所有的这种请求都会被拒绝。</p>
]]></content>
  </entry>
  
</feed>
