<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: java | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2021-01-01T23:52:44+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clean Architecture]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/10/06/clean-architecture/"/>
    <updated>2020-10-06T22:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/10/06/clean-architecture</id>
    <content type="html"><![CDATA[<p>Rober C. Martin的另一部Clean系列，总体来讲不如Clean Code，但书还值得一读。Bob大叔开发经验丰富，但仔细分析的话，他的主要经验还是基于C的通信软件的开发，之前有过很多的汇编经历。Java看起来真正做过的大的项目似乎并不多。因为按他90年代以前的经历，基本没有使用Java开发过什么，而之后，则转去了做咨询和主编，写的项目按常理应该不多。</p>

<p>书中首先使用龟兔赛跑的隐喻，讽刺了程序员们的迷之自信，总以为自己是聪明的兔子能够有朝一日把一团乱的东西Clean干净，但实际上从来没有发生。以此告诫读者必须脚踏实地做好整洁架构和整洁代码：The only way to go fast is to go well. 随后，提出Software的精髓在于<strong>soft</strong>，也就是easy to change，这是软件设计和开发的根本。并且应用类软件的开发，一般是由urgent behavior驱动的，但维护好clean Architecture则是开发人员的责任。</p>

<p>第二部分里，讲了3种基本的编程范式，强调的都是纪律的重要性。如结构化编程取消了goto，只保留了if/then/else,
do/while/until; OO则是限制函数间的调用，抽象、封装、继承、多态，并且举了IO device的C接口的例子。同时提出了<strong>Plugin</strong>架构的思想。因为所有的Device其实都是作为一种附件，plugin到OS上面去的。接口是OS定义的，实现则是plugin的事情。</p>

<p>第三第四部分则是作者提出过的SOLID设计原理以及组件的原理。<br/>
SRP，OCP，LSP，ISP，DIP。一个Module应该只对一个Actor负责。Actor通常是source，是使用者。<br/>
组件主要是耦合问题。REP、CCP、CRP，这其实是一个CAP的不可能三角。组件之间要削减循环依赖，被依赖多的Stable，不被依赖的Unstable，Stable的东西需要加入Abstract来实现弹性的增加。同时要减少对易变（volatile）组件的依赖，即在Stable的东西中加入Abstract以使软件变软。</p>

<p>第五部分是全书的的主体，主讲架构。<br/>
架构的目的是为了便于软件开发、部署、运行（非功能性要求）。维护，让细节开放，这样细节可以很晚才被决定。架构师的目标则是make software soft， 实现Policy和Detail之间的decouple，同时也负责设计Policy。</p>

<p>所谓Policy指business rules and procedures，Detail则是和policy进行通信的东西。架构师的一大职责，就是在Details之间画下边界线（boundary line）。而Clean Architecture则是让Details依赖Policy的一种架构方式。也体现了Bob大叔的DIP原则，即反转依赖。低级的组件应该作为插件插入到高级组件中去，高级组件是Policy和Use cases。
这个好处是减少核心内容的复杂性和对外部的依赖。
同时，架构是关于系统的，不是关于框架的，提出了架构设计要和框架尽可能分离的概念。即Domain优先，能让人看了架构设计图就知道系统是干什么的，举了图书馆、住房的设计图例子。这样也容易形成Testable Architecture。但这种做法下，架构师就变成了传统的系统分析师。</p>

<p>举了几种Clean Architecture，主要就是Ports and Adapters（Hexagonal Architecture）。也提到了Humble模式。架构即画边界以及决定用什么作边界，Humble Objects用于架构边界处。</p>

<p>至于微服务，作者的意思是service并不是分界线，分界线在service内部，举了Kitty Finder和Ride Finder的例子。从这点来说，熔断可以作为某种服务的一种多态实现。所以K8S其实也可以实现熔断，比如在一个Login的service中部署两个不同的service，确定某一个在什么情况下生效。</p>

<p>Test可以作为系统第一部分，而且是最外层的，因为所有的代码都不依赖测试代码，而测试代码却依赖其他代码（Domain+Infrastructure）。但对测试解耦，并没有提出什么实质性的建议。</p>

<p>最后，DB、Web、Framework都是小把戏（Detail），应用本身才是大Boss，不要为了Detail而限制Boss。又举了一个作者自己卖网课的例子，但这个例子实在太短，看不出什么名堂来。</p>

<p>结束后，其实还有两大部分，一个是Simon Brown写的一章，列举了4种常见的代码目录组织方式，并提出组织之间最大的区别在于包内方法的可见性差异。Simon创造了C4架构模型，这章列举的也不错，但例子还是太浅和理想化了，设计细节太少。  另外一部分就是Bob大叔的前半生开发生涯自传，写到了1990年代。里面补充到之后的经历会写成另一本书，应该就是今年出的Clean Agile了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看java的线程cpu使用情况]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/06/24/cha-kan-javade-xian-cheng-cpushi-yong-qing-kuang/"/>
    <updated>2020-06-24T22:36:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/06/24/cha-kan-javade-xian-cheng-cpushi-yong-qing-kuang</id>
    <content type="html"><![CDATA[<p>说来惭愧，那么些年写java，至今也没碰到需要对jvm内部线程cpu使用情况的研究。
今天碰到一例，因为用了flink，出现了一个处理瓶颈，不得不深入一探究竟。</p>

<p>就Linux的操作系统原理而言，jvm的线程是类似进程的东西，通过<code>top -Hn 14142</code> 可以查看到
14142这个进程内所有线程的cpu使用情况</p>

<p><code>
 PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
14321 hadoop    20   0   17.7g   8.6g  27756 S 43.2 27.4   8:29.33 java
14275 hadoop    20   0   17.7g   8.6g  27756 S 15.9 27.4   2:45.05 java
14408 hadoop    20   0   17.7g   8.6g  27756 S  3.7 27.4   0:33.23 java
14274 hadoop    20   0   17.7g   8.6g  27756 S  2.3 27.4   0:37.25 java
14226 hadoop    20   0   17.7g   8.6g  27756 S  2.0 27.4   0:20.27 java
14222 hadoop    20   0   17.7g   8.6g  27756 S  1.3 27.4   0:12.78 java
14414 hadoop    20   0   17.7g   8.6g  27756 S  1.3 27.4   0:11.12 java
14254 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:10.05 java
14288 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:11.97 java
14415 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:10.99 java
15072 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:11.04 java
</code></p>

<p>可以发现，14321 14275 这两个线程使用的cpu最多，那么这两个线程对应的算子是什么呢？这里就需要使用到jstack</p>

<p><code>jstack 14142 &gt; flink.dump</code></p>

<p>就可以得到jstack的信息。注意，需要以java进程运行用户的身份来运行上面的命令。</p>

<p>可以得到下面这些东西：</p>

<p>```
Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.131-b11 mixed mode):</p>

<p>"Attach Listener" #3673 daemon prio=9 os_prio=0 tid=0x00007f76403d6000 nid=0x676d waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE</p>

<p>"flink-metrics-22" #3672 prio=1 os_prio=0 tid=0x0000000002ef6000 nid=0x674f waiting on condition [0x00007f75bd85d000]
   java.lang.Thread.State: TIMED_WAITING (parking)</p>

<pre><code>    at sun.misc.Unsafe.park(Native Method)
    - parking to wait for  &lt;0x00000004406d94d8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)
    at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:748)
</code></pre>

<p>"flink-akka.actor.default-dispatcher-33" #3668 prio=5 os_prio=0 tid=0x00007f765db5f800 nid=0x66d8 waiting on condition [0x00007f75bf67d000]
```</p>

<p>jstack输出的hex也就是16进制的，所以我们需要把pid再做一下转换。使用python可以调用hex方法.</p>

<p>```
Python 3.6.8 (default, Aug  7 2019, 17:28:10)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux
Type "help", "copyright", "credits" or "license" for more information.</p>

<blockquote><blockquote><blockquote><p>hex(14321)
'0x37f1'
hex(14275)
'0x37c3'
```</p></blockquote></blockquote></blockquote>

<p>然后在dump文件中搜索<code>0x37f1</code>，可以得到</p>

<p>```
"at35__process -> (at35_e -> Sink: at35_sink, at35_current_parameter, at35_current_state) (1/1)" #142 prio=5 os_prio=0 tid=0x00007f7648a78800 nid=0x37f1 in Object.wait() [0x00007f75d53d6000]
   java.lang.Thread.State: WAITING (on object monitor)</p>

<pre><code>    at java.lang.Object.wait(Native Method)
    at java.lang.Object.wait(Object.java:502)
    at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.waitAndGetNextInputGate(UnionInputGate.java:211)
    - locked &lt;0x0000000441ab5ae8&gt; (a java.util.ArrayDeque)
    at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.getNextBufferOrEvent(UnionInputGate.java:169)
    at org.apache.flink.streaming.runtime.io.BarrierBuffer.getNextNonBlocked(BarrierBuffer.java:165)
    at org.apache.flink.streaming.runtime.io.StreamTwoInputProcessor.processInput(StreamTwoInputProcessor.java:273)
    at org.apache.flink.streaming.runtime.tasks.TwoInputStreamTask.run(TwoInputStreamTask.java:117)
    at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:300)
    at org.apache.flink.runtime.taskmanager.Task.run(Task.java:711)
    at java.lang.Thread.run(Thread.java:748)
</code></pre>

<p>```</p>

<p>```
"at20_window -> (at20__message, at20_current_parameter, at20_current_state) (1/1)" #112 prio=5 os_prio=0 tid=0x00007f76485f1800 nid=0x37c3 in Object.wait() [0x00007f75d7af9000]
   java.lang.Thread.State: WAITING (on object monitor)</p>

<pre><code>    at java.lang.Object.wait(Native Method)
    at java.lang.Object.wait(Object.java:502)
    at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.waitAndGetNextInputGate(UnionInputGate.java:211)
    - locked &lt;0x0000000441a00cc8&gt; (a java.util.ArrayDeque)
    at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.getNextBufferOrEvent(UnionInputGate.java:169)
    at org.apache.flink.streaming.runtime.io.BarrierBuffer.getNextNonBlocked(BarrierBuffer.java:165)
    at org.apache.flink.streaming.runtime.io.StreamTwoInputProcessor.processInput(StreamTwoInputProcessor.java:273)
    at org.apache.flink.streaming.runtime.tasks.TwoInputStreamTask.run(TwoInputStreamTask.java:117)
    at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:300)
    at org.apache.flink.runtime.taskmanager.Task.run(Task.java:711)
    at java.lang.Thread.run(Thread.java:748)
</code></pre>

<p>```</p>

<p>然后就可以看见线程的名字，就可以去代码里进一步对症下药了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[坚持的成果]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo/"/>
    <updated>2019-02-03T23:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo</id>
    <content type="html"><![CDATA[<p>坚持，始终是一种美德。
在软件开发的世界里，Java坚持了很多年，Mybatis也坚持了很多年。
尽管动态语言是那么的适合web开发，以至于Java在他们面前有好几年十分的被动。但通过Spring的IOC等特性，
生生造出来了一个具备很多动态语言特性的框架，从而具备了很多原本只有动态语言才具备的特性。</p>

<p>另外，Mybatis从一个起初土的掉渣的东西，经过十几年持续有人使用的努力，现在竟然在mybatis-plus的帮助下形成了
Java持久层最出色的一员。在兼容Mybatis的基础上，完全具备了JPA的优势，但在查询和支持SQL上又要远较JPA灵活许多。
因为坚持，实现了巨大的超越。</p>

<p>所以，有时候我们需要有点耐心，坚持一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Code]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code/"/>
    <updated>2018-05-01T14:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code</id>
    <content type="html"><![CDATA[<p>Uncle Bob的这本书也是一本名著了，书籍本身其实就是讲编程风格的，可以把编码技能磨砺的
更锋利些。</p>

<p>全书的要旨在于每一次重构都要让代码更加整洁，同时测试代码和业务代码一样对待。具体开始做起来，则是从很小之处开始着手。</p>

<ol>
<li><p><strong>命名</strong>是很重要的一个东西，好的命名可以省下很多注释，因为好的命名本身就帮助理解程序。命名包括了方法名和变量名。</p></li>
<li><p><strong>函数</strong>要尽可能的短，比如20行，可以在一屏里面显示，如果一个方法太长，那么肯定是命名没有弄好，可以继续拆分。此外，<strong>参数</strong>要尽可能的少，能不要参数就不要参数，一个参数好于二个参数，二个参数好于三个参数，三个参数是大部分方法的极限。</p></li>
<li><p><strong>注释</strong>以阐述为主，不要使用太多的废话，如果确定要写注释，也要认真编写。</p></li>
<li><p><strong>格式</strong>是多个代码之间的关联和布局规则。Bob推荐类似报纸的编写方式，大标题后面跟随小标题，比如大的<code>public</code>方法后面跟随小的<code>private</code>方法。和函数的规则一样，垂直相关的内容尽量放在一起。</p></li>
<li><p><strong>数据和对象</strong>牵涉偏向过程还是偏向面向对象。对于面向对象来讲，一般不增加method而是增加类型，对面向过程来讲，一般增加方法而不动数据结构，现实中肯定是二者皆有。</p></li>
<li><p><strong>错误处理</strong>错误处理粗返回码外，也可以考虑使用异常来进行封装。</p></li>
<li><p><strong>边界</strong>划分好后，对第三方的库和方法要单独测试和封装，以减少对本系统的影响。</p></li>
<li><p><strong>类</strong>也要单一权责，内聚，可以用许多短小的类来构建程序。</p></li>
</ol>


<p>多用<code>Enum</code>，少用<code>const</code><br/>
多用<code>strategy</code>, <code>template</code>，少用<code>if</code>, <code>switch</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Java 3rd Edition]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition/"/>
    <updated>2018-02-20T23:01:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition</id>
    <content type="html"><![CDATA[<p>「Effective Java」第三版在过年期间出版了，对比第二版主要补充了<code>lambda</code>和<code>stream</code>的内容，序列化方面
则希望大家不要再使用java原生的内容，其他变化不大。但是，和第一版比较起来，变化就很大了。除上述内容外，
第二版较第一版增加了<code>autoboxing/autounboxing</code>，<code>enum</code>, <code>annotation</code>,<code>generic programming</code>, 整个的编程建议也从57条增长到78条再到第三版的90条。</p>

<p>借用作者在第三版的前言，在1997年，Java的创始者Gosling描述java是一种“蓝领语言”（blue collar language），意味着当时的java相当简单（pretty simple）。与此同时，C++的创始人Stroustrup则警告所谓java的简单和其他很多新语言一样，只是误解以及功能上的不完善，随着时间的流逝，Java在尺寸和复杂性上都将大规模成长。不得不说，三者都是大师，而Java虽然依旧还是工业级的语言，但复杂度和规模已经较我十几年前初学时多了许多。或许，也因此大学里正在寻求一门其他语言来取代Java的教学地位吧。</p>

<p>此书非常经典，虽然作者说不用从头到尾通读，但是，建议还是全部都读一遍，甚至可能需要反复阅读并加以实践。比如其中的primitives和boxed primitives，即<code>int</code>和<code>Integer</code>，其间的坑在新项目中就踩过，而之前阅读后只是尽量不去用Integer这些boxed的类型，而这个新项目中由于前后交互的需要必须使用了Integer，于是就把<code>==</code>, 内容为<code>null</code>的坑都踩到了。</p>

<p>开卷有益，何况经典！</p>
]]></content>
  </entry>
  
</feed>
