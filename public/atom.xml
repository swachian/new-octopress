<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2020-06-24T22:56:27+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[查看java的线程cpu使用情况]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/06/24/cha-kan-javade-xian-cheng-cpushi-yong-qing-kuang/"/>
    <updated>2020-06-24T22:36:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/06/24/cha-kan-javade-xian-cheng-cpushi-yong-qing-kuang</id>
    <content type="html"><![CDATA[<p>说来惭愧，那么些年写java，至今也没碰到需要对jvm内部线程cpu使用情况的研究。
今天碰到一例，因为用了flink，出现了一个处理瓶颈，不得不深入一探究竟。</p>

<p>就Linux的操作系统原理而言，jvm的线程是类似进程的东西，通过<code>top -Hn 14142</code> 可以查看到
14142这个进程内所有线程的cpu使用情况</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
</span><span class='line'>14321 hadoop    20   0   17.7g   8.6g  27756 S 43.2 27.4   8:29.33 java
</span><span class='line'>14275 hadoop    20   0   17.7g   8.6g  27756 S 15.9 27.4   2:45.05 java
</span><span class='line'>14408 hadoop    20   0   17.7g   8.6g  27756 S  3.7 27.4   0:33.23 java
</span><span class='line'>14274 hadoop    20   0   17.7g   8.6g  27756 S  2.3 27.4   0:37.25 java
</span><span class='line'>14226 hadoop    20   0   17.7g   8.6g  27756 S  2.0 27.4   0:20.27 java
</span><span class='line'>14222 hadoop    20   0   17.7g   8.6g  27756 S  1.3 27.4   0:12.78 java
</span><span class='line'>14414 hadoop    20   0   17.7g   8.6g  27756 S  1.3 27.4   0:11.12 java
</span><span class='line'>14254 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:10.05 java
</span><span class='line'>14288 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:11.97 java
</span><span class='line'>14415 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:10.99 java
</span><span class='line'>15072 hadoop    20   0   17.7g   8.6g  27756 S  1.0 27.4   0:11.04 java</span></code></pre></td></tr></table></div></figure>


<p>可以发现，14321 14275 这两个线程使用的cpu最多，那么这两个线程对应的算子是什么呢？这里就需要使用到jstack</p>

<p><code>jstack 14142 &gt; flink.dump</code></p>

<p>就可以得到jstack的信息。注意，需要以java进程运行用户的身份来运行上面的命令。</p>

<p>可以得到下面这些东西：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.131-b11 mixed mode):
</span><span class='line'>
</span><span class='line'>"Attach Listener" #3673 daemon prio=9 os_prio=0 tid=0x00007f76403d6000 nid=0x676d waiting on condition [0x0000000000000000]
</span><span class='line'>   java.lang.Thread.State: RUNNABLE
</span><span class='line'>
</span><span class='line'>"flink-metrics-22" #3672 prio=1 os_prio=0 tid=0x0000000002ef6000 nid=0x674f waiting on condition [0x00007f75bd85d000]
</span><span class='line'>   java.lang.Thread.State: TIMED_WAITING (parking)
</span><span class='line'>        at sun.misc.Unsafe.park(Native Method)
</span><span class='line'>        - parking to wait for  &lt;0x00000004406d94d8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
</span><span class='line'>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
</span><span class='line'>        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
</span><span class='line'>        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)
</span><span class='line'>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)
</span><span class='line'>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
</span><span class='line'>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
</span><span class='line'>        at java.lang.Thread.run(Thread.java:748)
</span><span class='line'>
</span><span class='line'>"flink-akka.actor.default-dispatcher-33" #3668 prio=5 os_prio=0 tid=0x00007f765db5f800 nid=0x66d8 waiting on condition [0x00007f75bf67d000]</span></code></pre></td></tr></table></div></figure>


<p>jstack输出的hex也就是16进制的，所以我们需要把pid再做一下转换。使用python可以调用hex方法.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Python 3.6.8 (default, Aug  7 2019, 17:28:10)
</span><span class='line'>[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt; hex(14321)
</span><span class='line'>'0x37f1'
</span><span class='line'>&gt;&gt;&gt; hex(14275)
</span><span class='line'>'0x37c3'</span></code></pre></td></tr></table></div></figure>


<p>然后在dump文件中搜索<code>0x37f1</code>，可以得到</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"at35__process -&gt; (at35_e -&gt; Sink: at35_sink, at35_current_parameter, at35_current_state) (1/1)" #142 prio=5 os_prio=0 tid=0x00007f7648a78800 nid=0x37f1 in Object.wait() [0x00007f75d53d6000]
</span><span class='line'>   java.lang.Thread.State: WAITING (on object monitor)
</span><span class='line'>        at java.lang.Object.wait(Native Method)
</span><span class='line'>        at java.lang.Object.wait(Object.java:502)
</span><span class='line'>        at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.waitAndGetNextInputGate(UnionInputGate.java:211)
</span><span class='line'>        - locked &lt;0x0000000441ab5ae8&gt; (a java.util.ArrayDeque)
</span><span class='line'>        at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.getNextBufferOrEvent(UnionInputGate.java:169)
</span><span class='line'>        at org.apache.flink.streaming.runtime.io.BarrierBuffer.getNextNonBlocked(BarrierBuffer.java:165)
</span><span class='line'>        at org.apache.flink.streaming.runtime.io.StreamTwoInputProcessor.processInput(StreamTwoInputProcessor.java:273)
</span><span class='line'>        at org.apache.flink.streaming.runtime.tasks.TwoInputStreamTask.run(TwoInputStreamTask.java:117)
</span><span class='line'>        at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:300)
</span><span class='line'>        at org.apache.flink.runtime.taskmanager.Task.run(Task.java:711)
</span><span class='line'>        at java.lang.Thread.run(Thread.java:748)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"at20_window -&gt; (at20__message, at20_current_parameter, at20_current_state) (1/1)" #112 prio=5 os_prio=0 tid=0x00007f76485f1800 nid=0x37c3 in Object.wait() [0x00007f75d7af9000]
</span><span class='line'>   java.lang.Thread.State: WAITING (on object monitor)
</span><span class='line'>        at java.lang.Object.wait(Native Method)
</span><span class='line'>        at java.lang.Object.wait(Object.java:502)
</span><span class='line'>        at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.waitAndGetNextInputGate(UnionInputGate.java:211)
</span><span class='line'>        - locked &lt;0x0000000441a00cc8&gt; (a java.util.ArrayDeque)
</span><span class='line'>        at org.apache.flink.runtime.io.network.partition.consumer.UnionInputGate.getNextBufferOrEvent(UnionInputGate.java:169)
</span><span class='line'>        at org.apache.flink.streaming.runtime.io.BarrierBuffer.getNextNonBlocked(BarrierBuffer.java:165)
</span><span class='line'>        at org.apache.flink.streaming.runtime.io.StreamTwoInputProcessor.processInput(StreamTwoInputProcessor.java:273)
</span><span class='line'>        at org.apache.flink.streaming.runtime.tasks.TwoInputStreamTask.run(TwoInputStreamTask.java:117)
</span><span class='line'>        at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:300)
</span><span class='line'>        at org.apache.flink.runtime.taskmanager.Task.run(Task.java:711)
</span><span class='line'>        at java.lang.Thread.run(Thread.java:748)</span></code></pre></td></tr></table></div></figure>


<p>然后就可以看见线程的名字，就可以去代码里进一步对症下药了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入手本精装书]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2020/04/13/ru-shou-ben-jing-zhuang-shu/"/>
    <updated>2020-04-13T11:20:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2020/04/13/ru-shou-ben-jing-zhuang-shu</id>
    <content type="html"><![CDATA[<p>最近博客发的有点少，主要是切换回纸质书+纸质笔记本了。
另外，机缘巧合，买了本《Design Patterns》的原版精装，价钱只要200出头，相当的划算。必须承认原版精装书的阅读体验确实很棒。</p>

<p>原版四五百页精装书，放在桌上看的体验真的普通版的给不了。封面和纸张的手感是很不一样的就不说了，关键是精装的书里面有线，书是可以翻平的。这个胶板书真给不了。</p>

<p>不过计算机书籍国内精装版的基本很少，老外的也不多，估计还是大部分计算机图书的生命周期太短了吧。</p>

<p>顺手翻了一下图灵和异步的精装图书。技术类的是不多的，图灵除了著名的计算机编程艺术，也就黑客与画家、阮一峰文集、番茄工作法、写给大家看的设计书等寥寥几本。异步稍微好一点。像重构第二版、深度学习的两本，还有持续交付和一本也是国内人编写的广告计算，合计也就5本。但国内编写的两本，怎么看都更像是方便作者自己送人的。所以在国内还真的享受不了什么看精装技术图书的乐趣。当然，即使国外，如Effective Java都没有出过精装版，那么实际上拥有硬封皮的计算机书籍也是不多的。</p>

<p>顺便在天珑看了一下台湾图书的价格，同时发现现在台湾引入的简体版还真的不少，价格就比较有意思了。举《重构》和《领域驱动设计》两本书为例，价格如下（均为天珑实际售价)</p>

<table>
<thead>
<tr>
<th></th>
<th> 图书版本               </th>
<th> 台币                       </th>
<th> 人民币 </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 重构台湾 </td>
<td> 632 </td>
<td> 148 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 英文版hard cover </td>
<td> 1995 </td>
<td> 467 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 精装简体版</td>
<td> 699 </td>
<td> 163 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 简体平装 </td>
<td> 469 </td>
<td> 107 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 重构第一版简体 </td>
<td> 327 </td>
<td> 76 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> </td>
<td>  </td>
<td>  </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 领域驱动设计简体平装 </td>
<td> 393 </td>
<td> 92 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 领域驱动设计繁体平装 </td>
<td> 530 </td>
<td> 124 </td>
<td> </td>
</tr>
<tr>
<td></td>
<td> 领域驱动设计英文版  </td>
<td> 2470 </td>
<td> 578 </td>
<td> </td>
</tr>
</tbody>
</table>


<p>英版的价钱确实还是很贵的。而在台湾销售的大陆书籍，大约比国内网店普通售价贵了一倍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俞军的产品经理方法论]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/12/29/yu-jun-de-chan-pin-jing-li-fang-fa-lun/"/>
    <updated>2019-12-29T20:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/12/29/yu-jun-de-chan-pin-jing-li-fang-fa-lun</id>
    <content type="html"><![CDATA[<p>先是在caoz的微信上拜读了俞军产品方法论中关于产品经理的选拔方式，同样是从事脑力劳动，依赖主观能动性，发现招聘一个好的产品和一个好的程序员，很大程度上是相通的或者类似的。于是在书籍上市后就火速订购了一本。花了四五天时间看完，对产品和俞军的产品观都有了新的认识。</p>

<p>俞军的经历主要是00年-09年在百度，以及16年被滴滴请出山（加拿大）之后到19年离开滴滴。而滴滴的架构下，俞军是向他们的CTO汇报的。这个以他的段位而言，似乎有点委屈。</p>

<p>从已有的报道看，俞军在滴滴的成绩和他在百度的成就有很大的差距，当然这个主要是说产品结果，然而在团队培养和传道授业解惑上则较百度时又提高了档次。</p>

<h1>1. 什么是产品经理？</h1>

<p>最早的产品经理就是营销经理，后来是项目经理，在后来是需求经理。分别对应产品从产生、生产、销售的不同环节。其实，本身老板才是公司最主要的产品经理，决定了业务的方向和重要细节。</p>

<p>产品经理需要学习心理学，需要明白产品效用、边际、成本和供需关系。产品需要明白用户模型和交易模型，明白产品的价值和成本。</p>

<h1>2. 企业、用户、产品的关系</h1>

<p>企业以产品为媒介，与用户进行价值交换，达成创造商业价值的目的。用户价值是那些被企业选择过的“用户价值”，即媒介是产品经理选择出来的。</p>

<p>用户不是自然人，而是需求的集合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2019 CRV养车成本汇总]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/12/29/crv-2019/"/>
    <updated>2019-12-29T10:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/12/29/crv-2019</id>
    <content type="html"><![CDATA[<!-- 2018年的养车成本和2017年的竟然差不多。 -->


<p>具体比较：</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 条目     </th>
<th align="left"> 2019     </th>
<th align="left">2018     </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">   停车费     </td>
<td align="left">   10810+12000     </td>
<td align="left"> 11029+2000</td>
</tr>
<tr>
<td></td>
<td align="left">   保险费     </td>
<td align="left">   3932     </td>
<td align="left">  3637  </td>
</tr>
<tr>
<td></td>
<td align="left">   油费     </td>
<td align="left">     5682   </td>
<td align="left">   7006</td>
</tr>
<tr>
<td></td>
<td align="left">   高速     </td>
<td align="left">     365   </td>
<td align="left">   510</td>
</tr>
<tr>
<td></td>
<td align="left">   保养     </td>
<td align="left">     1369+2500   </td>
<td align="left">  1568  </td>
</tr>
<tr>
<td></td>
<td align="left">   洗车     </td>
<td align="left">     479   </td>
<td align="left">   355</td>
</tr>
<tr>
<td></td>
<td align="left">   上述合计     </td>
<td align="left">  25297+12000  </td>
<td align="left">      24105+2000  </td>
</tr>
<tr>
<td></td>
<td align="left">   里程     </td>
<td align="left">      7538       </td>
<td align="left">    8856</td>
</tr>
</tbody>
</table>


<p>今年总体开销低于去年，主要是因为今年少开了1200公里。
停车费的开销总体也差不多，除了在大花园租了新车位是全年的，但还是物有所值的。</p>

<p>油费/公里依然很神奇的差不多，去年0.77元/KM，今年0.76元/KM，但因为高速跑的少，油耗从11.49L/100KM上升到11.93L/100KM。这也意味着今年的油价总体略低于去年。
行使里程方面，去年8416KM，今年8856KM，差别倒不是很大。</p>

<p>保险费用因为有扣分的违章，有10%的涨幅。。<br/>
保养费用方面今年没大保，不过因为换了轮胎，这笔开销就是有2500元。然后还有一次补胎，其他就没什么了。
洗车比去年勤快了，另外也是因为洗车涨价了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage It]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/12/01/manage-it/"/>
    <updated>2019-12-01T10:49:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/12/01/manage-it</id>
    <content type="html"><![CDATA[<p>项目的驱动因素、约束以及活动余地。少问“为什么”，少问“怎么做”</p>

<p>镀金类需求和核心需求。</p>

<h3>项目章程模板：</h3>

<ul>
<li>远景：项目的意义，远景式的话语</li>
<li>需求：项目的驱动因素</li>
<li>目标：解决技术债务、添加更多的自动化测试、设计冒烟测试，这些都可能是项目目标</li>
<li>成功标准：包括功能1、2、3，提升产品性能，测出相关数值，项目经理要确保成功标准中不会包含非项目人员才能完成的任务，比如卖出50000套软件，要确保成功标准在项目经理的掌控之中。</li>
<li>ROI估算：投资回报率</li>
</ul>


<p>质量在产品的不同市场应用阶段，可以的需求有很大区别。到大众市场之间有着摩尔鸿沟。越进入成熟阶段，对质量的要求更高，即缺陷的容忍度越低。</p>

<h3>开发项目规划模板</h3>

<ul>
<li>产品意图：（类似远景，但远景可能不够用），与远景大方向一致，但又不安全相同</li>
<li>历史记录：知道的越少，越容易惊讶</li>
<li>发布条件</li>
<li>目标：同章程中的目标，但章程编写时可能目标还不明确</li>
<li>项目组织：明确团队在项目中的职责分配，指明如何使用周期以及哪些关键实践</li>
<li>日程总览：让我的领导知道项目的实际进展</li>
<li>人员配备（人员曲线）</li>
<li>建议日程</li>
<li>风险列表：识别和管理风险</li>
</ul>


<h3>制定发布计划</h3>

<p>通过制定发布计划，和各个职能部门的人共同商讨“成功”的含义，可以意识到自己不仅只是完成分内的工作，也为项目经理指明了成功的方向。</p>

<ol>
<li>确定当前项目最重要的因素：时间、功能、低缺陷率</li>
<li>草拟发布条件，加入测试经理等人</li>
<li>SMART原则，确定的、可测量的、可达成的、相关的、可跟踪的指标和条件</li>
<li>发布条件上达成多方共识：揭示众人对于产品和项目的假定和忧虑的过程</li>
</ol>


<p>很多软件开发人员都是很乐观的。在学校时接受的训练就是要让他们变得乐观，因为那
时每个项目都会在一个学期内完成（还要花费许多个通宵）。这些训练会一直停留在他们
脑海中，直到学会估算小的功能，并接收对于估算的反馈</p>

<p>如果项目经理必须遵循某个截止日期，那就干脆什么都别估算了。把所有的功能进行排
序，并按优先级进行开发。这种状况下，我强力推荐使用敏捷生命周期，这样就可以快
速地实现功能，并马上得到反馈</p>

<p>管理项目：管理风险，留意测试的进度，产生仪表盘上的数据，评估版本发布条件，要帮助大家看清目标、移除障碍，监控他们的进度，是没有时间做技术工作的。</p>

<p>保持合理的工作时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[凤凰项目读后记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji/"/>
    <updated>2019-11-05T12:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/11/05/feng-huang-xiang-mu-du-hou-ji</id>
    <content type="html"><![CDATA[<p>在人邮图灵1024半价优惠日买的一本书，主要以小说的形式，描述了一个资深运维经理比尔接手内部的凤凰项目部署，并在世外高人埃瑞克的指导下，如何通过看板、精益、敏捷能方法打通任督二脉，满足业务部门的<strong>真实</strong>需求，从而使整个系统（集团公司）业绩达标的故事。形式相当引人入胜，也很有收获，关键是提供了和人沟通的场景和范本。</p>

<p>上手，讲述了主角被选中的原因：他过去几年组建的大型机团队，是最有组织、最值得信赖的团队，比尔本人也是一个可靠、务实，而且愿意表达真实想法的人。不过，作为运维主管，比尔对开发的印象不是很好，比如开发人员经常粗心大意弄坏东西，然后就丢给运维了；而开发人员和信息安全部门的人联手，更容易给运维添乱。而主人公的冷静坦率的做法，甚至让他在第一部分丢了工作。</p>

<p>然而，这个公司其实并不真正重视IT。比如在总体评估指标中，一个IT经理都没资格参与，即IT引起的运营风险并未被重视，也未得到管理，然而IT风险实质上是业务风险。</p>

<p>下面是一些主要的知识点：</p>

<p>倒逼项目 == 日期驱动项目，开发用完了全部的时间。这种玩法，基本后续就是起飞。大家即使都是为了公司好，关键仍然在于有限的时间里能够做什么。对工作需求、优先等级、工作进度、可用资源都了如指掌。真正令人沮丧的是无法把精力集中在对公司最为重要的事情上。</p>

<p>约束点=瓶颈，在瓶颈之外的任何地方做出改进都是假象。作为IT部副总裁，你的工作要确保形成一条迅速、可预测、持续不断的计划内工作流，从而交付价值，同时尽可能降低计划外工作的影响和破坏。</p>

<p>三步工作法：第一步，帮助我们理解在工作从开发部向运维部移动时建立快速工作流，第二步缩短及放大整个系统的反馈回路，第三步形成勇于探索且吸取教训的先进文化。（勇于冒险以及从失败中汲取教训的价值观，并强调通过反复实践以致炉火纯青的必要性）</p>

<p>四种主要的工作类型：<br/>
1. 业务项目<br/>
2. 内部IT项目<br/>
3. 变更类工作<br/>
4. 计划外（救火）工作，堪比反物质</p>

<p>在发射当口，还往太空飞船安装零件，可不是好兆头。</p>

<p>缺乏能力才是成事的大敌。</p>

<p>你的开发，把所有工作周期都用在了功能，而忽略了稳定性、安全性、可扩展性、可维护性、可操作性、持续性等。</p>

<p>相比向系统中投入更多的工作，将无用的工作剔出系统更为重要。重要的是结果，而非过程、管理或者我们完成了什么。</p>

<p>冷静、坦率应对愤怒。但上级还是会认为工程师们懒骨头。然而团队内需要信任感。</p>

<p>技术债务必将导致公司唯一能够完成的工作就是计划外工作。</p>

<p>工作中心：机器、人员、方法、测评</p>

<p>对安全中心负责人的评价：可以不对IT系统做过多无用功就保护公司，这才是你的胜利。这句话很适用于之前单位的BA。即要做过滤器，而不是放大器，要把无用的东西拒之门外。</p>

<p>和高层打交道，告诉他们坏消息要找适当的时机、适当的场合。</p>

<p>不断降低周期时间的需求是第一工作法的内容，增强回收成本的能力，是第二工作法的内容。要向高层表明‘IT导致的业务风险’。</p>

<p>之后的devops环节，将IT和运维整合在一起，通过降低发布规模，提高发版频次，比如一天10次，来实现快速交付。然而并没有提到相应的验证开销过大怎么办？</p>

<p>未来十年，每一个称职的COO都会是从IT部门出来的。否则，只能是金玉其外的傀儡，需要依靠别人来开展工作。</p>

<p>尾声当然是美好的，比尔获得了同事和上司的信任，他们业务部门的死对头莎拉也离开了公司，他和业务部门的其他人建立了良好的合作关系。公司上下更懂IT，IT也更懂公司的业务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kafka权威指南]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/10/08/kafkaquan-wei-zhi-nan/"/>
    <updated>2019-10-08T11:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/10/08/kafkaquan-wei-zhi-nan</id>
    <content type="html"><![CDATA[<p><code>default.replication.factor</code> : 分区的复制系数<br/>
<code>unclean.leader.election</code> :
简而言之，如果我们允许不同步的副本成为首领，那么就要承担丢失数据和出现数据不一
致的风险。如果不允许它们成为首领，那么就要接受较低的可用性，因为我们必须等待原
先的首领恢复到可用状态。
如果把 unclean.leader.election.enable 设为 true，就是允许不同步的副本成为首领（也
就是“不完全的选举”），那么我们将面临丢失消息的风险。如果把这个参数设为 false，
就要等待原先的首领重新上线，从而降低了可用性。<br/>
<code>min.insync.replicas</code> : 最少同步副本</p>

<p>上述对broker的配置以外，生产者也要注意配置好<code>acks</code>的值，以及在代码里正确处理错误。</p>

<p>ETL 表示提取—转换—加载（ Extract-Transform-Load）</p>

<p>kafka的消息是可以在客户端进行压缩的</p>

<p>事件流是可重播的，借助kafka，可以重播几个月甚至几年前的原始事件流</p>

<p>时间窗口是否对齐？</p>

<p>中间结果可以作为流写入kafka中</p>

<p>flink手工启动命令
/opt/flink-1.8.1/bin/flink run /opt/flink-1.8.1/jars/ssss-1.0.0-SNAPSHOT-TEST2-cron-4d8e317-all.jar
启动命令：/opt/flink-1.8.1/bin/flink run -d /opt/flink-1.8.1/jars/Hastur-*.jar</p>

<p>罗列任务的命令：
/opt/flink-1.8.1/bin/flink list -r | grep ssss | cut -d &#8221; &#8221; -f 4</p>

<p>停止任务的命令：
/opt/flink-1.8.1/bin/flink cancel 6b338726460bcb8fe95bad883ca9f5b2</p>

<p>taskmanager.heap.size跟着yarn的container size走
taskmanager.numberOfTaskSlots 可设置多条</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日式高效团队开发]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/10/05/nipon-software-team/"/>
    <updated>2019-10-05T16:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/10/05/nipon-software-team</id>
    <content type="html"><![CDATA[<p>日式《高效团队开发》</p>

<p>成书于2014年上半年，作者是日本人，参与了Play这个框架的开发。在日本，做到了书中提供的版本管理、缺陷管理、CI、CD公司的生产效率高很多，原因在于两点：1. 基础设施本身的效率 2. 对优秀工程师的吸引力。</p>

<p>死亡行军状态的项目&#8212;项目岌岌可危，人员身心俱疲</p>

<p>问题1：邮件内容多 &#8211; 引入缺陷管理<br/>
问题2：没有仿真环境  &#8211; 搭建持续、自动地向验证环境、staging 环境以及正式环 境进行发布，并一直保持正常运行的环境<br/>
问题3：没有分支和tag管理  &#8211; 利用分支和标签<br/>
问题4：重新制作数据库的困难  &#8211; 数据库变更管理</p>

<p>问题5: 不运行就就无法察觉问题  &#8211; CI<br/>
问题6：代码合并后产生了degrade  &#8211; CI+merge<br/>
问题7：重构代码没信心  &#8211; CI+测试代码<br/>
问题9：环境依赖</p>

<p>日本的信息技术传入比美国晚3-4年，貌似中国也差不多。</p>

<p>分布式版本控制系统的缺点：<br/>
1. 没有真正的版本号<br/>
2. 没有最新的版本<br/>
3. 过于灵活，容易混乱<br/>
4. 思维方式</p>

<p>git中，应该避免分支和标签使用相同的名字，可以大致类似但细节之处有所区别</p>

<p>如果不经过长期的回归测试就不能发布，那么发布分支和开发分支应该分开来。
反之，都使用一个master为好。</p>

<p>使用Play框架的Evolution对数据库sql进行管理。类似ror的migrate，但直接使用sql。其对比语句文件是否已执行也比较巧妙。</p>

<p>缺陷驱动开发(TiDD),即以Ticket驱动开发。怎么建立gitlab和ticket之间的关联？</p>

<p>epic采用excel管理，story介于采用excel或ticket工具之间，task采用ticket工具管理</p>

<p>因成本收益和市场变化，才使得CI流行起来。
Jenkins是事实上CI工具的标准，其前身是Oracle收购Sun之前的Hudson。它的作者是一个日本人。</p>

<p>Ant、Maven、Gradle三者的关系。Ant最灵活，Maven是基于CoC后的简化版的Ant，Gradle则介于二者之间，使用groovy来完成其中灵活的那部分。</p>

<p>CI集成的测试对象：</p>

<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>用户验收测试UAT</li>
<li>回归测试</li>
</ul>


<p>.git/hooks/post-receive 用于触发向jenkins push构建请求</p>

<p>CI -> CD，直接把代码库中的代码发布到产线环境</p>

<p>A 要全部采用版本管理<br/>
B 所有的环境都要用同样的方式来构建<br/>
C 要实现发布工作的自动化，并事先进行验证<br/>
D 要反复多次进行测试</p>

<p>Chef是配置并启动虚机里面的服务的，例如nginx、apache等等</p>

<p>Infrastructure as Code</p>

<p>编配（Orchestration）：<br/>
即让多个组件一起演奏起来。主要有Capistrano、Fabric（python编写）和Jenkins几种工具。
Jenkins的buidl periodically可以从多台机器上收集日志
如果采用K8S + Docker, 那么很多玩法又将大大的不同了。</p>

<p>测试四象限：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>                业务层面
</span><span class='line'>                |
</span><span class='line'>                |
</span><span class='line'>团队的支持------- | -------产品的评价    
</span><span class='line'>                |
</span><span class='line'>                |
</span><span class='line'>                技术层面</span></code></pre></td></tr></table></div></figure>


<p>单元测试属于技术和团队方面的支持，集成测试属于业务和团队方面的支持</p>

<p>总体来讲，这本书讲的日式团队软件开发，和我目前接触的有很多类似的地方。作者提到的版本管理、CI、CD我们也做了一部分，可以提高和借鉴的地方确实不少。不过时代毕竟在前进，实现栈方面作者是不提及docker和k8s的，然而这些的存在确实可以让CI/CD更进一步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rancher and k8s]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/10/04/rancher-and-k8s/"/>
    <updated>2019-10-04T16:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/10/04/rancher-and-k8s</id>
    <content type="html"><![CDATA[<p>今年不期而遇而使用的技术很多，除了大数据flink，就是rancher/k8s/docker了。</p>

<p>docker的话，几年前已经有过接触，总体感觉有价值，但对java来讲，帮助就比较有限了。<br/>
k8s是对docker的编排，其实就是把docker作为基本的单元，让各种服务可以在一个抽象的层面跑起来，在服务监控、伸缩等方面都提供了很好的抽象和封装，易于运维人员操作。<br/>
而Rancher，个人理解是k8s的编排，可能没那么复杂，但站在使用的角度，就便于安装、编辑、使用k8s的UI界面，当然，除了界面，幕后还有很多组件用于搭建一套k8s，启动相应的服务。</p>

<h2>安装</h2>

<p>因为他们都是基于docker的，所以前提需要安装好docker。然而，docker又是离不开OS的，所以前提是要装好OS。至于是物理主机还是虚机，倒是无所谓的。我选择使用Ubuntu 18.04 + Docker 19.03.2的组合，官方是到18.09.x。[https://rancher.com/docs/rancher/v2.x/en/installation/requirements/]</p>

<h3>安装docker</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 1. 移除旧版本</span>
</span><span class='line'>sudo apt-get remove docker docker-engine docker.io
</span><span class='line'>
</span><span class='line'><span class="c"># 2. 更新apt包索引</span>
</span><span class='line'>sudo apt update
</span><span class='line'>
</span><span class='line'><span class="c"># 3. 安装https支持包</span>
</span><span class='line'>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
</span><span class='line'>
</span><span class='line'><span class="c"># 4. 添加Docker官方GPG key</span>
</span><span class='line'>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</span><span class='line'>
</span><span class='line'><span class="c"># 5. 添加稳定版的仓库源(按架构选择)</span>
</span><span class='line'>sudo add-apt-repository <span class="se">\</span>
</span><span class='line'>   <span class="s2">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span>
</span><span class='line'><span class="s2">   $(lsb_release -cs) \</span>
</span><span class='line'><span class="s2">   stable&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 6. 更新apt包索引 </span>
</span><span class='line'>sudo apt update
</span><span class='line'>
</span><span class='line'><span class="c"># 7. 安装</span>
</span><span class='line'>sudo apt-get install docker-ce
</span></code></pre></td></tr></table></div></figure>


<h3>安装rancher</h3>

<p>执行下面命令即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -d --restart<span class="o">=</span>unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest
</span></code></pre></td></tr></table></div></figure>


<p>直接用docker启动rancher镜像，并映射80和443端口给rancher的UI界面。随后用浏览器即可访问到rancher服务，用admin账号登录进去后，就可以进行后续的操作。</p>

<h3>增加集群</h3>

<p>在rancher的浏览器界面里，通过<code>Add Cluster</code>即可以增加节点。<br/>
首先需要增加的是etcd和controlpanel节点，这两个属于rancher的幕后服务。<br/>
命令在浏览器里会有提示，得到命令后，到要加入集群并且已经安装好docker的虚机上执行即可。命令很简单，就一条：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo docker run -d --privileged --restart<span class="o">=</span>unless-stopped --net<span class="o">=</span>host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.2.8 --server https://172.17.3.186 --token gjvvrqpf4sbkl2l48zmpcdpmcbcb68fntdj44vlb2784ttgct6s6wc --ca-checksum ae6f90ddff032e2d040015f70283c2e9ed5282ebdfafe0edf11e163b540dd2a7 --etcd --controlpanel
</span><span class='line'>
</span><span class='line'>sudo docker run -d --privileged --restart<span class="o">=</span>unless-stopped --net<span class="o">=</span>host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run rancher/rancher-agent:v2.2.8 --server https://172.17.3.186 --token gjvvrqpf4sbkl2l48zmpcdpmcbcb68fntdj44vlb2784ttgct6s6wc --ca-checksum ae6f90ddff032e2d040015f70283c2e9ed5282ebdfafe0edf11e163b540dd2a7 --worker
</span></code></pre></td></tr></table></div></figure>


<p>&#8211;etcd和&#8211;controlpanel可部署在同一台机器上。然后需要耐心等待一段时间，因为会起很多个docker的服务。</p>

<p>光有控制资源是不够的，还需要加入worker资源，这个就比较方便了，可以随时扩容。</p>

<h3>新建服务</h3>

<p>上述弄完以后，就可以发布新的服务了。</p>

<p>到新建的集群中选择<code>Deploy</code>，拉取对应的镜像，设置好pod数量，就可以拉起服务。不过，这个对应的镜像主要是公共的镜像，如果私有镜像，则需要另外进行配置。</p>

<h2>新建私有docker仓库</h2>

<p>本身构造仓库并不复杂，逻辑上只要找一台虚机启动一个docker的registry服务，然后在rancher浏览器的<code>Resources-&gt;Registries</code>中注册一下这个地址即可。<br/>
但事实上永远不会那么简单。主要原因在于docker默认是需要https才能对外提供服务，这就需要进行很多额外的配置。当然，主要是私有仓库的配置。可以参考下面几个链接：
https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/registries/
https://docs.docker.com/registry/deploying/
https://docs.docker.com/registry/insecure/</p>

<p>最后形成的做法如下。</p>

<p>一. 选择一台虚机作为registry主机，最好不要和rancher是一台机器，这样避免争抢443端口。在这台机器上先生成一下证书：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir certs
</span><span class='line'>openssl req <span class="se">\</span>
</span><span class='line'>  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key <span class="se">\</span>
</span><span class='line'>  -x509 -days 365 -out certs/domain.crt
</span></code></pre></td></tr></table></div></figure>


<p>这里面要注意cn需要输入自己定义的域名，比如mydocker.co</p>

<p>二. 将生成的<code>domain.crt</code>改名为<code>ca.crt</code>, 上传或复制为其他docker主机的<code>/etc/docker/certs.d/mydocker.co/ca.crt</code>，绑定这些主机的<code>hosts</code>文件中该域名的指向到上一步的ip中，或者也可以修改域名服务器里该域名</p>

<p>三. 在第一台机器上运行docker的registry服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -d <span class="se">\</span>
</span><span class='line'>  --restart<span class="o">=</span>always <span class="se">\</span>
</span><span class='line'>  --name registry <span class="se">\</span>
</span><span class='line'>  -v <span class="s2">&quot;/opt/registry/certs&quot;</span>:/certs <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">REGISTRY_HTTP_ADDR</span><span class="o">=</span>0.0.0.0:443 <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">REGISTRY_HTTP_TLS_CERTIFICATE</span><span class="o">=</span>/certs/domain.crt <span class="se">\</span>
</span><span class='line'>  -e <span class="nv">REGISTRY_HTTP_TLS_KEY</span><span class="o">=</span>/certs/domain.key <span class="se">\</span>
</span><span class='line'>  -p 443:443 <span class="se">\</span>
</span><span class='line'>  registry:2
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令中，<code>--restart=always</code>表示每次重启docker都会重启该服务，<code>-v</code>是挂载了卷，并将生成的ca证书指给了这个服务，3个<code>-e</code>设置了容器里运行的变量值，<code>-p 443:443</code>把主机和容器的443端口对应起来，<code>registry:2</code>表示第二个版本的registry</p>

<p>四. 再次deploy服务的时候，直接在镜像地址中带出<code>mydocker.co</code>开头的镜像链接即可，比如<code>mydocker.co/my-ubuntu</code> 。</p>

<h2>k8s的dns服务变迁</h2>

<p>SkyDNS（1.2） -> KubeDNS（1.4） -> CoreDNS（1.11）</p>

<p>kubedns: 监控service资源变化，生成service名称和ip的记录，并保存在DNS中<br/>
dnsmasq: 为客户端容器提供dns服务<br/>
sidecar: 对kubedns和dnsmasq提供健康检查服务</p>

<p>CoreDNS和KubeDNS均是Go语言编写，但用一个服务替换了3个服务。</p>

<h2>ingress-nginx</h2>

<p>ingress-nginx 默认是每个node 1个容器服务，<code>1 per node</code><br/>
通过rancher配置规则可以在<code>workloads-&gt;load balancing</code>中进行。里面的域名指向实际的worker主机地址。</p>

<h2>核心组件</h2>

<p>kube-proxy进程，负责获取每个Service的Endpoints，Endpoints实现service到pod之间的关联。</p>

<p>K8S的思路是每个对象都是一个资源，每个资源都有对应的controller：<br/>
* RC Controller<br/>
* Node Controller<br/>
* ResourceQutoa Controller(cpu和memory限制的配置)<br/>
* Namespace Controller<br/>
* Service Controller &amp; Endpoints Controller</p>

<p>  Kubelet是每个Node上k8s的代理，</p>

<p>kube-proxy历经了从HA proxy -> iptables -> IPVS进化。核心诉求始终是性能驱动</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Agile： 理解Scrum, XP, Lean and Kanban]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile/"/>
    <updated>2019-02-08T12:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/08/learning-agile</id>
    <content type="html"><![CDATA[<p>初次接触敏捷的概念是很早的事情了，可能始自于Uncle Bob的那本ASD。
其后，因为一直以来认为的软件开发很多事情在做之前其实很多是不确定的，因此日常的开发中虽然没有采用站会之类的形势，也没有单独的产品经理，
但实际上是按照敏捷的精神在进行开发。这些精神包括：</p>

<ul>
<li>个体和互动高于流程和工具（不过我认为工具十分重要）</li>
<li>可工作的软件高于详尽的文档</li>
<li>客户协作高于合同谈判</li>
<li>响应变化高于遵循计划</li>
</ul>


<p>这些都是在多年开发实践中所坚持的原则。但是，一直以来忽略了其中最重要的一点：人。</p>

<p>因为之前工作的单位，从客户、领导到同事、下属都是合作多年，彼此也知道对方的能力以及可以信赖的程度，所以敏捷的精神得以贯彻。
然而在两年前去到新环境后，身边合作人员的水平较以往参差不齐的多，主要是上游的产品、BA等怎么合作都没有及时地确立或调整出新的办法，
导致敏捷的原则压根没法贯彻。<br/>
直到大约一年半以前，才发现敏捷的形式（实践）其实已较为普及。今年在新单位，有专职的敏捷教练和产品经理，在一年的实践中，体会了不少敏捷的好处，但也
发现了不少问题，尤其是随着时间的流逝敏捷实施似乎越来越难了。而问题依然很类似：</p>

<ol>
<li>人员水平参差不齐，其实不是每个人都知道怎么配合</li>
<li>上游虽然有产品经理，但公司还会安排其他人来提需求，但很可能完全不懂软件开发，导致沟通合作困难</li>
</ol>


<p>所以，下决心利用假期好好弄明白当前的敏捷到底指什么，然后再看看怎么结合现在面临的情况进行调整。</p>

<p>简单的说，一般的敏捷方式和Scrum是同义词，而XP（极限编程）是软件开发中的一种敏捷模式，Scrum则更偏向项目管理以及集体协作方面。
至于Lean，则只是一种思想，没有具体的形式，Kanban也是来自于日本汽车制造商，其核心作用是找出整个流程中的瓶颈。</p>

<p>与Scrum对应的是上令下行的管理方法，这种方法下需要较完善的需求规格（极难），较强的PM规划设计（很可能是瞎计划）和计划重构能力，
而Scrum则要求团队的主人翁精神（也很难）。但本质上，Scrum把决策和风险都放给了整个团队，基于软件开发很多只有事到临头对着代码
才能明确什么方法最好，因此这种下放或者说要求一线成员能力更大、承担更多责任和决策的模式是有其道理的。整个团队中，开发、产品、PM都能拥有平等的发言权。</p>

<h2>Scrum</h2>

<p>在项目开始时，只是确定要做的任务（用户故事）有哪些，也会拆分任务，但不一定要完成所有任务的分配。即要有<strong>任务清单</strong>，但不全部确定计划完成者。
细节在例会后讨论，每天例会可以由不同的人轮流讲3个问题：</p>

<ol>
<li>我昨天干了什么？</li>
<li>我将要干什么？</li>
<li>我遇到了什么困难？</li>
</ol>


<p>本质上是让团队成为项目的主人，齐心协力去寻找更有效的工作方式，找到了整个团队就一起成长了。而告诉团队工作成果的价值要好于告诉团度业务收入的价值，对团队而言，
有价值的是软件能带来什么？让用户生活更美好是一种真实、真诚、鼓舞人心的目标。
<strong>自我管理</strong>和<strong>集体承诺</strong>是Scrum的魂（精神），要求每个人都成为猪而不是鸡，每日例会和积压工作表是Scrum的形式（实践）。产品所有者是Scrum的产物，但实际上也
很难区分和传统的业务分析人员的区别。</p>

<p>Scrum用到的概念还包括用户故事，满意条件，故事点和速度<br/>
燃尽图表示随着时间的流逝，还剩多少任务。</p>

<p>Scrum的价值观：</p>

<ul>
<li>承诺</li>
<li>尊重</li>
<li>专注</li>
<li>开放</li>
<li>勇气</li>
</ul>


<h2>极限编程(XP)</h2>

<p>极限编程强调结对以及测试驱动，一切的目的是为了方便自动化测试，比如避免过深的调用栈。着力于消灭代码异味。<br/>
有时候过多的边界情况考虑和处理也是过度设计，是某种<strong>框架陷阱</strong>误区。</p>

<p>作者还提到了<strong>反模式</strong>的概念。
所谓反模式就是会给项目带来麻烦和问题的行为模式，比如解决某人只有95%的时间在干活，喜欢称人为资源。</p>

<p>代码异味和反模式都是人制造出来的，又是人识别出来的，并且可以由人来防止或修正。所以解决方案一定是技术和团队两方面一起努力。</p>

<p>然而，测量什么就会得到什么。瀑布式开发的目标也不是文档，但最终会得到很多文档，可运行的软件反而变成了副产品。TDD的目标也不是文档或测试，但最终得到了很多测试，可运行的软件本身反而也成了副产品。</p>

<h2>精益</h2>

<p>精益针对的反模式就是<strong>浪费</strong>，目标就是减少浪费。包括无用的功能和形式。同时提到了<strong>工作进度面积图</strong>，这种图的作用可以反应当前处于各个状态的任务数量及比例。其表示状态的词汇如下：</p>

<ul>
<li>Muda 徒劳无益</li>
<li>Mura 不均衡</li>
<li>Muri 不合理或不可能</li>
</ul>


<p>衡量是否精益的一大指标是从需求提出到上线发布的间隔时长，即<strong>交付时间</strong>，这里是借用了丰田生产汽车的概念。强调0或者低库存。</p>

<p>日常项目中容易遇到两个反精益的模式：</p>

<ul>
<li>老板的神奇思维（Magic thinking）：只要我想要，只要我施压，团队就一定会做出来。</li>
<li>英雄员工：十分肯加班加点的员工</li>
</ul>


<p>敏捷是无法同上面两个共存的。</p>

<p>神奇思维和英雄员工制造的最大问题是会导致软件产品的质量和测试都很差，最终开发速度会变的慢上2倍以上。因为欠的债太多最终都会变成成本。</p>

<h2>Kanban</h2>

<p>看板可以让经理不再动不动就分配新功能。比任务处理的内容要更“大”一些。看板中的每个栏目表示工作流程中的容器，是一种分析问题出在哪个环节的可视化分析方法。</p>

<p><strong>Shuhari</strong>，借用武学概念，守破离。</p>

<ul>
<li>守：按套路来</li>
<li>破：打破套路</li>
<li>离：自成一派</li>
</ul>


<p>小结： 确实如一个十分能干的小朋友曾经跟我交流的，中国的企业没有真正实行敏捷开发的。其实敏捷本身和中国大部分软件企业的文化并不兼容，因此大部分只是具备了敏捷的一些实践，而没有敏捷真正的灵魂。至于我司到底是否能敏捷起来，也只能把决策留到最后再说了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[坚持的成果]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo/"/>
    <updated>2019-02-03T23:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/02/03/jian-chi-de-cheng-guo</id>
    <content type="html"><![CDATA[<p>坚持，始终是一种美德。
在软件开发的世界里，Java坚持了很多年，Mybatis也坚持了很多年。
尽管动态语言是那么的适合web开发，以至于Java在他们面前有好几年十分的被动。但通过Spring的IOC等特性，
生生造出来了一个具备很多动态语言特性的框架，从而具备了很多原本只有动态语言才具备的特性。</p>

<p>另外，Mybatis从一个起初土的掉渣的东西，经过十几年持续有人使用的努力，现在竟然在mybatis-plus的帮助下形成了
Java持久层最出色的一员。在兼容Mybatis的基础上，完全具备了JPA的优势，但在查询和支持SQL上又要远较JPA灵活许多。
因为坚持，实现了巨大的超越。</p>

<p>所以，有时候我们需要有点耐心，坚持一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018 CRV养车成本汇总]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2019/01/01/crv-2018/"/>
    <updated>2019-01-01T10:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2019/01/01/crv-2018</id>
    <content type="html"><![CDATA[<p>2018年的养车成本和2017年的竟然差不多。</p>

<p>具体比较：</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 条目     </th>
<th align="left"> 2017     </th>
<th align="left">2018     </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">   停车费     </td>
<td align="left">   10123     </td>
<td align="left"> 11029+2000</td>
</tr>
<tr>
<td></td>
<td align="left">   保险费     </td>
<td align="left">   4945     </td>
<td align="left">  3637  </td>
</tr>
<tr>
<td></td>
<td align="left">   油费     </td>
<td align="left">     6444   </td>
<td align="left">   7006</td>
</tr>
<tr>
<td></td>
<td align="left">   高速     </td>
<td align="left">     368   </td>
<td align="left">   510</td>
</tr>
<tr>
<td></td>
<td align="left">   保养     </td>
<td align="left">     1756   </td>
<td align="left">  1568  </td>
</tr>
<tr>
<td></td>
<td align="left">   洗车     </td>
<td align="left">     275   </td>
<td align="left">   355</td>
</tr>
<tr>
<td></td>
<td align="left">   上述合计     </td>
<td align="left">  23911  </td>
<td align="left">      24105+2000  </td>
</tr>
</tbody>
</table>


<p>单位停车比之前每月贵了100，所以合计就是贵了1200.好在保险费用有较大的降幅，最终差别不大。</p>

<p>比较神奇的是油费/公里竟然和去年差不多，都是0.77元/KM。平均油耗去年11.30L/100KM，今年11.49L/100KM，不过去年以95号油为主，今年全部是92号油，因此这一年油费确实涨的相当厉害了。<br/>
行使里程方面，去年8416KM，今年8856KM，差别倒不是很大。</p>

<p>保险费用没有，不过违章其实有一笔200的开支。<br/>
保养费用因为今年有大保，所以费用依然很高。不过不像去年那样有节气门故障的额外开支。洗车则是中规中矩。</p>

<p>CRV也陪伴三年半多一点了，明年应该会把轮胎换一下，又是一笔开支啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[洗滚筒洗衣机]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/11/04/xi-gun-tong-xi-yi-ji/"/>
    <updated>2018-11-04T21:09:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/11/04/xi-gun-tong-xi-yi-ji</id>
    <content type="html"><![CDATA[<p>家中一滚筒洗衣机购买多年，夏天的时候清洗过一下，但不得要领成效不大。原因在于清洗剂和其他很多说明其实都是针对波轮洗衣机，而波轮这方面的经验对滚筒并不适用。原因则在于水位。</p>

<p>清洗剂本身要求溶解后在高水位浸泡2小时才有效果，网上甚至有人建议浸泡一夜。然而对于滚筒洗衣机来讲，水位普遍偏低，很难泡满。直到看见网上针对滚筒的建议，才明白解决的办法。关键在于适度<strong>轮转</strong>。</p>

<p>具体方法为：</p>

<ol>
<li>放入清洗剂/粉直接到滚筒</li>
<li>按漂洗模式放满水</li>
<li>随后换筒清洁模式继续放水后暂停，并开始浸泡</li>
<li>满2小时候，通过恢复铜滚动，类似于换个姿势（面），然后继续浸泡2小时</li>
<li>如果操作几回后，就一切顺手了。</li>
</ol>


<p>最终从效果来看，还真的洗出不少东西来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean Code]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code/"/>
    <updated>2018-05-01T14:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/05/01/clean-code</id>
    <content type="html"><![CDATA[<p>Uncle Bob的这本书也是一本名著了，书籍本身其实就是讲编程风格的，可以把编码技能磨砺的
更锋利些。</p>

<p>全书的要旨在于每一次重构都要让代码更加整洁，同时测试代码和业务代码一样对待。具体开始做起来，则是从很小之处开始着手。</p>

<ol>
<li><p><strong>命名</strong>是很重要的一个东西，好的命名可以省下很多注释，因为好的命名本身就帮助理解程序。命名包括了方法名和变量名。</p></li>
<li><p><strong>函数</strong>要尽可能的短，比如20行，可以在一屏里面显示，如果一个方法太长，那么肯定是命名没有弄好，可以继续拆分。此外，<strong>参数</strong>要尽可能的少，能不要参数就不要参数，一个参数好于二个参数，二个参数好于三个参数，三个参数是大部分方法的极限。</p></li>
<li><p><strong>注释</strong>以阐述为主，不要使用太多的废话，如果确定要写注释，也要认真编写。</p></li>
<li><p><strong>格式</strong>是多个代码之间的关联和布局规则。Bob推荐类似报纸的编写方式，大标题后面跟随小标题，比如大的<code>public</code>方法后面跟随小的<code>private</code>方法。和函数的规则一样，垂直相关的内容尽量放在一起。</p></li>
<li><p><strong>数据和对象</strong>牵涉偏向过程还是偏向面向对象。对于面向对象来讲，一般不增加method而是增加类型，对面向过程来讲，一般增加方法而不动数据结构，现实中肯定是二者皆有。</p></li>
<li><p><strong>错误处理</strong>错误处理粗返回码外，也可以考虑使用异常来进行封装。</p></li>
<li><p><strong>边界</strong>划分好后，对第三方的库和方法要单独测试和封装，以减少对本系统的影响。</p></li>
<li><p><strong>类</strong>也要单一权责，内聚，可以用许多短小的类来构建程序。</p></li>
</ol>


<p>多用<code>Enum</code>，少用<code>const</code><br/>
多用<code>strategy</code>, <code>template</code>，少用<code>if</code>, <code>switch</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青轴的蓝牙键盘]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan/"/>
    <updated>2018-04-28T21:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/04/28/qing-zhou-de-lan-ya-jian-pan</id>
    <content type="html"><![CDATA[<p>去年听同事介绍买了一个Filco的红轴蓝牙键盘。一千多的东西虽然用着也不错，但始终谈不上喜欢。
而且在用了一年之后，其键帽毕竟是ABS材质，打油、磨损等接踵而至。加上2月底摸了下老同事的Filco青轴键盘，
于是对青轴开始长草。</p>

<p>但是，依然对Filco的ABS键帽心有余悸，于是做了一番研究。发现相对于ABS， PBT/POM的键帽相对不容易打油的多，
于是开始在PBT+Cherry青轴+蓝牙之间寻找。找来找去，发现要么只能满足PBT+Cherry轴的那些Cherry原厂键盘或者Leopold这样的韩国品牌，要么就是键帽是ABS的大F，唯有IKBC在去年下半年推出了完全符合我要求的键盘，正好京东又搞活动价格只要499，于是入了一款。</p>

<p>使用之后，确实爱上了这款键盘。清脆高级的手感，漂亮的颜值，无线的简洁，一下子让敲击多了很多很多的乐趣。真有相见恨晚之感！</p>

<p>&#8211; Update On 2019.01.01<br/>
随后在12月初又购入Ganss的茶轴键盘。也是PBT+原厂Cherry轴，键帽是PBT双色印刷，较IKBC的更为细腻。
购入原因有二： 1.想体验一把茶轴的感觉；2.想要一把全尺寸键盘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为你自己学Git笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/03/04/wei-ni-zi-ji-xue-gitshu-ping/"/>
    <updated>2018-03-04T14:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/03/04/wei-ni-zi-ji-xue-gitshu-ping</id>
    <content type="html"><![CDATA[<p>从Rails把代码库迁至GitHub起，接触Git已经很长时间了。但限于svn的惯性思维，其实我始终没有真的理解Git。
毕竟，上班一直是用的svn，去年12月后才开始迁移到git，而之前一个人用用GitHub的话，也确实是当一个svn在使用，主要就是实现通过中心节点实现多个终端的内容和代码共享。</p>

<p>没有真正弄懂git的另一个原因，则是没有好的简明的说明教材，毕竟只是一个scm工具，自己舍不得在这上面花太多时间也是事实。而高见龙的这本《为你自己学Git》，目前只有繁体版，则写的够简洁也够深入，并且配合了很多例子，让人对git的原理、应用场景、使用方法都可以做到很清楚。</p>

<h2>git基本操作</h2>

<p>从Git设计之初来讲，它是去中心化的。所以本书的大部分运行环境和讲解例子都是基于本地目录。
<img src="https://gitbook.tw/images/using-git/working-staging-and-repository/all-states.png" alt="git存储结构" /></p>

<p><code>git add index.html</code>只是把文件从工作目录加入到了暂存区（staging area），<code>git commit</code>才能把内容放到存储库(repository)中。</p>

<p>不想让git管控可以给<code>git rm</code>加上<code>--cached</code>参数。 <code>git rm welcome.html --cached</code>,在git目录里的状态就从<code>tracked</code>变成<code>Untracked</code>。</p>

<p><code>git commit --amend</code> 可以修改最近的一次commit的内容和备注。如果要修改其他更久远的，则可以<code>git rebase</code>, <code>git reset</code>，极端情况删除<code>.git</code>目录重来。<br/>
同时, <code>--amend</code>还能往前一次commit中加入新文件。</p>

<p><code>.keep</code>往往用于新增目录时，为了目录进入仓库而作的占位文件。</p>

<p><code>.gitignore</code>搭配<code>git clean -fX</code>可清除已经被忽略的档案。</p>

<p><code>git log</code>增加<code>-p</code>参数可打印输出文件的变化内容。</p>

<p><code>git blame index.html</code> 可以看见每行是谁写的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  1) ---
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  2) layout: post
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  3) title: "Peopleware读书笔记"
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  4) date: 2018-02-16 14:20
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  5) comments: true
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  6) categories:
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  7) - 管理
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  8) ---
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800  9)
</span><span class='line'>86145428 (swachian 2018-02-20 21:05:05 +0800 10) 读完软件随想录，自然而然被吸引
</span><span class='line'>去了另一本这个领域的名著《人件》
</span></code></pre></td></tr></table></div></figure>


<p><code>git checkout index.html</code>可以把误删除的文件恢复出来，如果有多个文件可以使用<code>git checkout .</code>一下子切出。<br/>
上面是从staging区域切出到工作目录，如果使用<code>git checkout HEAD~2 welcome.html</code>则是把上两个版本的文件切出到working目录和staging目录。</p>

<p><code>checkout</code>主要是动staging和working 区域，<code>git reset</code> 则会涉及版本库区域:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset master^
</span><span class='line'>git reset HEAD^
</span><span class='line'>git reset 85e7e30
</span><span class='line'>git reset e12d8ef^
</span><span class='line'>git reset HEAD~5</span></code></pre></td></tr></table></div></figure>


<p><code>^</code>的作用是表示“前一次”。</p>

<p><code>git reset</code> 可配合模式使用，<code>--mixed</code>,<code>--soft</code>, <code>--hard</code>,默认是<code>--mixed</code>，它们对staging和working区域的反应是不一样的。因为<code>reset</code>的本意只是重新设置<code>HEAD</code>指向，顺便解决了staging和working的内容。</p>

<ul>
<li>soft: 只改HEAD指向，其他都不改</li>
<li>mixed: 只动staging的内容</li>
<li>hard: 改HEAD指向，改staging，改working</li>
</ul>


<p><code>git reflog</code> 可以调出每次HEAD移动的记录日志，找回相应的commit标识。命令等于<code>git log -g</code>，加上<code>-g</code>参数也有类似效果。</p>

<p><code>HEAD</code>指向的是某个分支，内容是具体文件<code>ref: refs/heads/master</code>，而这个文件里的内容则是某个commit形成的hash: <code>ef5dcf2ab28d2ec47252703815ab97bd4108f937</code></p>

<p><code>git add -p index.html</code> 可以选择编辑要加入暂存区的行。</p>

<h2>git本地分支操作</h2>

<p>设置分支最大的目的是保证主干不受影响。</p>

<p><code>git branch cat</code> 增加分支，<code>git branch -m cat dog</code>分支改名,
<code>git branch -d cat</code>删除分支，<code>git checkout cat</code>切换分支，
<code>git checkout -b cat</code>增加并切换分支，<code>git merge dog</code>合并分支</p>

<p><code>Fast Forward</code>在一个分支相对于另一个分支只有新增的commit内容时可以使用，
这是没有<strong>小耳朵</strong>的。
否则，git会再造一个commit来合并两个分支，并把一个分支向前推到新增的这个commit。
commit信息里面，<code>Parents</code>字段中被合并的分支名位于后面。
<img src="https://gitbook.tw/images/branch/merge-branch/dog_to_cat.png" alt="commit合并信息" /><br/>
使用<code>--no-ff</code>可以强制产生小耳朵的效果：<code>git merge cat --no-ff</code><br/>
<strong>分支只是一個指向某個 Commit 的指標。</strong></p>

<p><code>git rebase dog</code>是重新嫁接分支，原理是将当前分支的全部提交一个一个提取出来，
重新计算后作为新的提交加到基准分支<code>dog</code>当前commit的后面，最后把当前分支的Head
指向重新apply的最新提交。所以rebase之后，之前分支commit的日期就延后了。</p>

<p>要回退<code>rebase</code>，可以使用<code>git reflog</code>找到<code>rebase</code>前的最新的commit号。<br/>
简化版本是<code>git reset ORIG_HEAD --hard</code>，使用<code>ORIG_HEAD</code>指针。</p>

<p>有冲突的话，先编辑，然后<code>git add</code>加回暂存区，再<code>commit</code>。<br/>
如果是<code>rebase</code>的，则<code>git rebase --continue</code></p>

<p>二进制的内容: <code>git checkout --ours cute_animal.jpg</code>, <code>git checkout --theirs cute_animal.jpg</code></p>

<p><code>git rebase -i bb0c9c2</code> 可以整理提交历史, <code>squash</code>： 合并commit</p>

<p><code>revert</code>和<code>reset</code>的作用基本相同，但<code>revert</code>是再增加一个commit来实现取消前一次提交的效果，
一般用于多人合作时取消某些提交。</p>

<p><code>git tag</code>，善用tag，<strong>标签和分支最大的区别是标签打好之后这个指针不会再变化，分支则会继续前进</strong></p>

<p><code>git stash</code>，配合<code>git stash list</code>, <code>git stash pop/apply</code>使用, 存放手头工作，也可以先<code>commit</code>再<code>reset</code> .</p>

<p>要从<code>.git</code>中完全删除文件有很多步骤要做，要先解除，在gc，最后才能删除掉。当然，不如直接删除.git算了。</p>

<p>产生<strong>detached HEAD</strong>的原因：</p>

<ol>
<li>使用checkout到了一个没有分支指向的commit</li>
<li>rebase过程中，其实都是处于detached HEAD状态，所以一旦rebase有coflct，分支状态必然不对</li>
<li>切换到某个远端分支的时候</li>
</ol>


<p><code>git branch tiger b6d204e &amp;&amp; git checkout tiger</code> 该命令可以把当前的commit纳入到一个分支中，从而摆脱断头分支的状态</p>

<h2>git远端分支</h2>

<p>GitHub是最有名的远端版本库，可以用<code>git clone</code>获得远端repo库。</p>

<p>upstream意在设置上游分支，也就是下面这个命令中<code>-u</code>选项的作用。
<code>git push -u origin master</code>，会把<code>origin/master</code>设置为本地<code>master</code>分支的upstream。然后就
不必每次<code>git push origin master</code>, 直接使用<code>git push</code>即可。<br/>
<code>-u</code> = <code>--set-upstream</code></p>

<p><code>git push origin master:cat</code> 会把本地的<code>master</code>分支推向远端的<code>cat</code>分支。<br/>
<code>git push origin :cat</code> 可以删除远端的cat分支</p>

<p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code>, <code>fetch</code>同步了<code>origin/master</code>中的内容，
而此时<code>orgin/master</code>比本地<code>master</code>领先，那意味着原本是一个分支分出去的且京都更新，其实就是<code>merge</code>了，
有时候甚至还是Fast Forward方式进行，有时候可能会再造一个commit以完成任务。<br/>
但是，<code>pull</code>也可以是<code>rebase</code>方式的，例如<code>git pull --rebase</code>, 这就是用<code>rebase</code>替换上个等式右面的<code>merge</code><br/>
如果push有问题，则只能先拉再推</p>

<h3>Pull Request（PR）</h3>

<p>简而言之，把项目fork到自己的帐号即建立一个新的远端仓库，然后修改先push到这个新仓库，
然后比对自己和origin库的异同拉出一系列commit集合，这个集合就是Pull Request。
意思是请求原作者拉回去（Pull）的请求（Request）。
原作的叫<code>base fork</code>，自己的叫<code>head fork</code> 。</p>

<p>公司内部PR的用法：每个人fork到自己的帐号下，待完成后PR回公司的项目。负责管理这个项目的人受到PR后，
进行Code Review并确认这个提交无误后进行合并，从而保证这个分支处于随时可上线的状态。</p>

<p><code>git format-patch fd7cd38..6e6ed76</code> 会产生补丁文件。<code>git am /tmp/patches/*</code> 则是更新补丁</p>

<h2>Git Flow</h2>

<p>git的工作流。主要定义了5中分支组织的方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Java 3rd Edition]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition/"/>
    <updated>2018-02-20T23:01:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/02/20/effective-java-3rd-edition</id>
    <content type="html"><![CDATA[<p>「Effective Java」第三版在过年期间出版了，对比第二版主要补充了<code>lambda</code>和<code>stream</code>的内容，序列化方面
则希望大家不要再使用java原生的内容，其他变化不大。但是，和第一版比较起来，变化就很大了。除上述内容外，
第二版较第一版增加了<code>autoboxing/autounboxing</code>，<code>enum</code>, <code>annotation</code>,<code>generic programming</code>, 整个的编程建议也从57条增长到78条再到第三版的90条。</p>

<p>借用作者在第三版的前言，在1997年，Java的创始者Gosling描述java是一种“蓝领语言”（blue collar language），意味着当时的java相当简单（pretty simple）。与此同时，C++的创始人Stroustrup则警告所谓java的简单和其他很多新语言一样，只是误解以及功能上的不完善，随着时间的流逝，Java在尺寸和复杂性上都将大规模成长。不得不说，三者都是大师，而Java虽然依旧还是工业级的语言，但复杂度和规模已经较我十几年前初学时多了许多。或许，也因此大学里正在寻求一门其他语言来取代Java的教学地位吧。</p>

<p>此书非常经典，虽然作者说不用从头到尾通读，但是，建议还是全部都读一遍，甚至可能需要反复阅读并加以实践。比如其中的primitives和boxed primitives，即<code>int</code>和<code>Integer</code>，其间的坑在新项目中就踩过，而之前阅读后只是尽量不去用Integer这些boxed的类型，而这个新项目中由于前后交互的需要必须使用了Integer，于是就把<code>==</code>, 内容为<code>null</code>的坑都踩到了。</p>

<p>开卷有益，何况经典！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peopleware读书笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/02/16/peoplewaredu-shu-bi-ji/"/>
    <updated>2018-02-16T14:20:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/02/16/peoplewaredu-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>读完软件随想录，自然而然被吸引去了另一本这个领域的名著《人件》</p>

<h3>质量</h3>

<p>只有愿为质量倾其所有的人，质量才是免费的。一个组织如果为了质量一毛不拔，那么收获的质量也将一文不值。
制造者本身对质量会有更高的要求，良心循环下更高的质量会有更高的产出，但如果组织不愿意为此付出代价，比如高工资、项目延期等，那么就得不到这种质量</p>

<h3>帕金森定律</h3>

<p>工作会自动膨胀并占满一个人所有的工作时间。进度压力是一种惩罚，不能滥用。</p>

<h3>苦杏素</h3>

<p>李彦宏眼中的AI，就指望这个翻本了。</p>

<p>读到后面感觉有点泛泛而谈，只是本书确实强调工作环境要好，要相信people，减少鼓励，减少加班等等，Joel的思想确实来源于此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel 谈软件- 软件随想录]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu/"/>
    <updated>2018-01-31T14:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/joel-tan-ruan-jian-ruan-jian-sui-xiang-lu</id>
    <content type="html"><![CDATA[<p>《Joel谈软件》，我一直是这么称呼《软件随想录》的。
倒是才注意到，原来黑客与画家、软件随想录都是阮一峰老师翻译的，而且翻译的真不错。与此同时，阮老师也很好地推销了一下自己。本书与《我编程我快乐》不同，是很有深度的书，所以决定边读边记笔记。尤其要说一句，阮老师的注解是很显功力的。</p>

<p>在2004年之前，Joel的网站文集就被按blook集合由Apress出版，而阮老师翻译的是集成了2004年之后发布的文章，英文名称《More Joel on Software》。但国内的出版顺序则是先引入了阮老师翻译的《More》，后来又有另一个译者翻译了04年的那本书作为了卷1. 所以，在中国很长时间只有《More》而没有第一本。考虑到时效性以及译者的知名度，04-09这本更值得关注就是必然的了。下面的笔记是两本合计的版本，并未区分来自哪里，毕竟原作者是一个人，所以基本是一脉相承。</p>

<h2>人员管理</h2>

<h3>第一次Bill Gates 审查</h3>

<p>微软程序经理（Program Manager）：技术水平是程序员队伍里最高级别，能做最多且最难的工作，有人格魅力，程序员队伍中最聪明的那个家伙。</p>

<p>比尔盖茨通过不断问问题来确认对方是否有实现任务的把握。</p>

<h3>怎么寻找优秀的程序员</h3>

<ol>
<li>优秀的程序员很少找工作</li>
<li>简历投的多的大部分是不怎么样的程序员</li>
<li>从应届生中招募是个发现美材的办法</li>
</ol>


<h3>从工作环境开始招募程序员</h3>

<ol>
<li>私人办公室：作者的公司在纽约，但程序员都有独立办公室，当然，这个在国外也是凤毛麟角</li>
<li>Aeron出品的名牌电脑椅</li>
<li>大显示器</li>
<li>好的办公环境和园区</li>
<li>同事要好，管理层要有程序员出身的人，物以类聚</li>
<li>像代码一样公正、有序，严格的能者上庸者下的地方，对的就能赢得任何争论的地方</li>
<li>有趣的活，或者简单的或者流行的活</li>
<li>一定自由地使用新技术</li>
<li>编程框架体现美、幸福和激励</li>
</ol>


<h3>三种管理方法</h3>

<p>团队、公司、军队、国家，问题：“使得人们去做你要他们做的事”，或者说如何使得所有人都向同一个方向前进。</p>

<h4>军事化管理法</h4>

<p>每个人做的事情都不同的情况下，军事化管理方法很难奏效，因为没有那么多经理实现微观管理。但对军队则是必须的。</p>

<h4>经济利益驱动法</h4>

<p>经济驱动把内部激励变成了外部激励。内部激励是发自内心想做好这件事情，内部激励通常比外部激励强。</p>

<p>经济驱动也容易陷入kpi骗局，鼓励大家和制度博弈。不能把铜板丢给鸡，让鸡自己去买吃的。创造一种制度的时候，不能放弃自己的职责。</p>

<h4>认同法</h4>

<p>一起干活的人要一起吃饭。团建，以及营造一致的目标，爱上这个城市和工作内容。第二部分是提供必要的信息，让下属感觉被尊重。</p>

<p>结论：hybrid根据时间和对象灵活运用各种方式。</p>

<h3>面人指南</h3>

<p>千万不要雇“可能”合适的人，招人标准：1，聪明 2，能干</p>

<h3>测试人员</h3>

<p>测试人员独立性的必要性</p>

<h2>大学生技术学习建议</h2>

<h3>大学只教java的危害</h3>

<p>危害主要是两点：1. 基础知识不够扎实 2.会有很多不达标的人浑水摸鱼通过，导致招聘困难。  
但是，国内国外都这样。</p>

<h3>耶鲁大学的演讲</h3>

<p>技术派（the geek）和务实派（the suit，穿西装的）  
消灭bug的边际报酬是递减的，即随着错误越来越少，解决bug带来的收益也在变少，务实派的理论</p>

<p>程序本身包含多少香农熵规格说明书也要包含同样的数量</p>

<p>作者在微软纽约的咨询部门做过一段时间的客户顾问</p>

<p>做外包软件开发不好之处：1.无法用正确的方法做事 2. 做不出优秀的产品，因为都是乙方外包，能用就行。</p>

<p>管理只是一种不得不做、让人讨厌的杂物活，之所以公司需要管理，只是为了不影响聪明人工作，真正的天才才能做出优秀的成果。</p>

<p>作者在大学里学会了写作，学会了从动态逻辑课里不要读研究生，进入了Unix这座宏伟的教堂，但其实作者也从微软身上获益良多，变得足够聪明，但还是没有学到怎么开发软件。</p>

<h3>给计算机系的建议</h3>

<ol>
<li>写作</li>
<li>C语言</li>
<li>微观经济学：供给和需求，竞争优势，净现值（NPV），贴现，边际效用</li>
<li>GPA反应4年的总体表现</li>
</ol>


<h2>设计的作用</h2>

<p>艺术性和实用性 form follow function</p>

<p>进入最后测试阶段就会变得特别挑剔</p>

<p>你之所以会有好运气，那是因为你寸土必争</p>

<p>设计不用太宏伟，但细节要跟上</p>

<p>太多的选择会损坏内心的幸福感</p>

<p>作者以自己软件论坛作为例子，说明了功能和倾向性方面取舍。</p>

<h2>大型的项目管理</h2>

<p>微软ie8.0的开发，雷克萨斯pk橄榄树，要不要向过去兼容的问题</p>

<p>标准也会引发误解、困惑甚至争议</p>

<p>一半是理想主义，一半是实用主义</p>

<p>项目管理其实就是做抉择</p>

<p>日程安排经验的主要依据是历史数据，但相应原则如下，不过这个前提是招的都是有能力和自我驱动程序员：</p>

<ol>
<li>只有一线程序员才能提出完成日期的估计值，管理层制定的通常效果不好</li>
<li>发现错误就更新原来的计划</li>
<li>防止管理层向程序员施压，这样的产量至多提高10%，但埋下的隐患不少</li>
<li>一份日程规划就是一个装备积木的盒子，要么删功能要么拖延</li>
</ol>


<p>优秀的项目经理会让开发者觉得所有重要的设计工作都是开发者在做，而项目经理只负责打打酱油，和一些非常官僚主义的事情周旋，比如应付客户写写规范。</p>

<p>软件开发-冰山之谜，你能看见的永远只是实现的一部分，如同冰山露出水面的部分，而水底的部分可能还有90%</p>

<p>每日编译发展到现在就是持续集成</p>

<h3>排计划</h3>

<ol>
<li>使用excel，不要用project，后者是为建造办公楼设计的  </li>
<li>保持简单，7列：feature、task、优先级、预估、现在预估、已流逝、剩余工时，最终完成时剩余工时==0，现在预估==已流逝</li>
<li>每个功能点要分解任务列表  </li>
<li>只有负责些代码的程序员才能预估时间</li>
<li>细分任务到小时单位，作者理解的设计就是决定要做什么  </li>
<li>记录原始和当前的时间估计,实现不断练习估算时间  </li>
<li>每天更新消耗时间栏  </li>
<li>考虑假期  </li>
<li>考虑调试代码的时间，考虑修复bug的时间  </li>
<li>考虑集成时间，就是几个人的工作拼接起来  </li>
<li>预留缓冲时间：第一预估可能有延时，第二可能有新任务，第三可能有冰山  </li>
<li>永远不要让开发经理压缩程序员预估的开发时间  </li>
<li>计划就像积木：通过强迫做减法（挑出不要的积木），你将开发出更强、更好、功能配比更优秀的产品，避免延期避免交付了还有很多鸡肋的功能  </li>
</ol>


<h3>软件世界的分类(5类）</h3>

<p>作者把基于网络的web应用列为<strong>盒装软件</strong>，咨询软件（SAP德勤）这样的介于盒装和内部软件之间。<br/>
如果只有一个企业使用其实就是<strong>内部软件</strong>，由于边际成本的原因，内部软件通常不用质量很好。<br/>
<strong>嵌入式软件</strong><br/>
<strong>游戏</strong>和嵌入式软件一样，对软件的质量要求高，因为一般来讲游戏和嵌入式软件很少升级，也很少会出2.0版。即往往只有一个版本。<br/>
<strong>临时性软件</strong>，比如一段脚本。</p>

<h2>编程建议</h2>

<p>应用型匈牙利命名法 vs 系统型匈牙利命名法，后者臭名昭著，前者其实意图是表明变量的用途而不是type。</p>

<h2>开软件公司</h2>

<p>做生意就像看植物增长，是一种乐趣</p>

<p>如果你想压低程序员的工资，那么你就会得到质量很垃圾的软件，而这实际上也不会为你省下很多的钱。举了耶鲁大学的例子说明程序员的生产率差距有5-10倍。</p>

<p>此外，生产率不同的同事而是“普通”程序员根本做不到优秀程序员所做的事情，“飙不出高音”</p>

<p>Seinfeld中Soup Nazi一集很看好</p>

<p>作者的程序员价值论断是针对生产最终产品的公司，如果只是为了内部使用，配合运营而不是销售，那么只要够用就行了，不需要特别优秀</p>

<p>Jonathan Ive， 苹果的设计师</p>

<p>办公室的租金成本是2004年人均700美金/月，人均建筑面积40平米，所以每个人有自己的办公室，目的就是招募到优秀的程序员</p>

<p>对你最重要最关键的部分，你一定要使用更原始的工具</p>

<p>客服不外包有利于永久性地解决问题</p>

<p>面向整个市场的软件（产品）和定制化软件</p>

<p>一家软件公司要想成功，必须要有一名程序员执掌大权</p>

<p>只有招聪明的人，才能充分授权。</p>

<p>“麦当劳的”厨师 pk 真正的大厨，军事化标准化的流程只能产出麦当劳，大厨都是随意的。</p>

<p>NIH（Nothing in Here）对于关键部分，要坚持自己的研发</p>

<p>慢慢发展和烧钱发展的适用场合</p>

<p>兼容性是先有鸡还是先有蛋问题的一大解法</p>

<p>用户粘度和离开的门槛是要在你占据优势地位之后的，在此之前，最好的办法是降低用户使用门槛。</p>

<p>开源软件的策略：是使得硬件标准化、商品化，02年就列举了sun公司的错误</p>

<p>FUD战术，就是欺骗和恐吓的意思了。所谓雾件，就是对各种功能特性和产品作出口头许诺。但实际上根本拿不出可以卖的东西。把微软黑的厉害。
因为含糊其辞，大家会产生微软与自己的观点不谋而合的错觉。</p>

<p>.net缺少链接器（linker）。把编译后版本和程序中所有函数库的编译后版本合并起来，然后剔除掉所有不需要的库函数，生成一个二进制文件。</p>

<p>发新股不分红是为了让报表的利润好看</p>

<p>以最终用户为主和以程序员为主构成了windows和unix两类不同的文化，然而实际上以最终用户为主的文化来源于Apple</p>

<h2>关于规格说明书</h2>

<p>规格说明书体现的是写作能力，他的规格说明书写的让人很容易阅读。</p>

<p>待解决的问题需要在说明书里确定，不要觉得可以先让程序员做简单的部分，之后再慢慢思考并解决剩下的难题，这不是好主意，因为在实现代码的过程中会冒出许多新问题。</p>

<p>项目经理/产品经理没有权利让程序员听命，必须努力争取大家的认同才行，这种方式才能确保团队永远在做正确的事情。</p>

<p>规格说明书古今中外其实都不太有人爱读，因此写好很难。所以要写出<strong>引人入胜</strong>的规格书可以遵循一下几点：</p>

<ol>
<li>要幽默  </li>
<li>像编写用大脑执行的代码一样写规格书，仅仅做到正确不够还要易于理解  </li>
<li>写的尽可能简单, 并擅用排版  </li>
<li>重读并修改几遍  </li>
<li>尽量不要套用模板</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我编程我快乐]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le/"/>
    <updated>2018-01-31T13:45:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2018/01/31/wo-bian-cheng-wo-kuai-le</id>
    <content type="html"><![CDATA[<p>在图灵买了本《我编程我快乐》的电子书。其实原版名字就是著名的《My job went to India》的第二版，
原书名的意思也是如何成为一个卓越的程序员。</p>

<p>由于作者出身rails背景，所以大部分的思维我之前已经了解，真的大有收获的东西并不多。摘要一下有以下几点：</p>

<h2>市场</h2>

<ol>
<li>技术是有时间差的，在成熟或者说供需平衡间可以赚到相对多的价钱。</li>
<li>不要担心做团队中最差的，反而要追求这种和高手过招的机会，这样才能走出舒适区。</li>
<li>不要听从父母的，即使西方也是一样的。父母只是希望你平安，但大部分父母的境界注定无法帮助你卓越。</li>
<li>热爱你做的事情和市场。</li>
</ol>


<h2>产品</h2>

<ol>
<li>了解行业如何运转</li>
<li>跟踪技术的原理</li>
<li>寻找良师益友，自己也要做良师</li>
</ol>


<h2>执行</h2>

<ol>
<li>8小时激情燃烧</li>
<li>公司离开哪个员工都照样转</li>
<li>说“不”</li>
</ol>


<h2>推销</h2>

<ol>
<li>推销包含了一定的迎合</li>
<li>感觉是最重要，脑力劳动的评价主要靠感觉</li>
<li>建立关系混圈子</li>
</ol>


<h2>保持技术领先</h2>

<ol>
<li>研究尖端技术</li>
<li>没有终点</li>
<li>留意市场变化，主要跟踪技术达人</li>
</ol>

]]></content>
  </entry>
  
</feed>
