<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2017-10-08T23:37:09+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务笔记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji/"/>
    <updated>2017-10-08T23:02:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/08/wei-fu-wu-bi-ji</id>
    <content type="html"><![CDATA[<p>微服务是Martin Fowler定义的一个术语，出自 https://martinfowler.com/articles/microservices.html</p>

<p>是伴随着敏捷开发和云服务部署流行而兴起的一种架构。微服务架构风格[1]是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p>

<p>具备的特征包括：</p>

<ul>
<li>水平扩展服务能力时，可以扩展只需要扩展的模块而不是全部</li>
<li>组件多以服务的形式提供</li>
<li>团队多按业务能力/功能组建</li>
<li>团队始终围着产品，而不是做完了就丢给运维</li>
<li>smart endpoints and dumb pipes，其实就是管道扁平化，针对SOA中部分总线太过只能而言</li>
<li>去中心化的管理，微服务意味着可以自治化，而不是谈标准化</li>
<li>可以多个编程语言同时使用，只要保持彼此间通信简单（http+lightweight messaging）</li>
<li>数据存储也是去中心化的，Polyglot Persistence，存储/数据库也是每个服务自己定</li>
<li>基础设施自动化程度高，实现持续提交和持续集成</li>
<li>开发者和用户间会更容易建立更多的联系，要持续关注软件如何帮助用户提升业务能力，而不是把软件看成是将要完成的一组功能</li>
<li>针对失效的设计，使用服务作为组件的一个结果是，应用程序需要被设计成能够容忍服务失效，如断路器模式</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring cloud 服务治理]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/10/07/spring-cloud-fu-wu-zhi-li/"/>
    <updated>2017-10-07T13:54:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/10/07/spring-cloud-fu-wu-zhi-li</id>
    <content type="html"><![CDATA[<p>服务治理是近年来架构中的热点部分，尽管比照ICE这些内容其实十几年前就已经有了，
只是五六年前伴随着系统越做越庞大，才变得必要起来。</p>

<p>简单理解一下，其主要内容基本是：</p>

<ul>
<li>要有一个服务中心，服务中心最好是集群的</li>
<li>要能向中心注册服务，服务的地址用名称而不是ip硬绑</li>
<li>要能发现一个服务，其实就是用名称通过服务中心找到服务的ip和端口</li>
<li>要一个可以轮流访问服务集群的客户端</li>
<li>此外再配合上消息总线等内容</li>
</ul>


<p>有了这些，基本一个服务治理的框架就基本形成了。</p>

<p>《Spring Cloud 微服务实战》是一本很不错的书，有动手的介绍，有源码的分析，写的也算精炼。</p>

<h3>Eureka 服务治理中心</h3>

<p>启动服务中心后，配置客户端主要包含两部分：</p>

<ul>
<li>服务注册相关信息： 包括服务中心地址、服务获取间隔时间、可用区域，以<code>eureka.client</code>为前缀</li>
<li>服务实例相关的配置信息： 包括实例的名称、IP地址、端口号、健康检查路径等，以<code>eureka.instance</code>为前缀</li>
</ul>


<h3>Ribbon</h3>

<p>Spring Cloud的负载均衡是在客户端实现的。
<code>WeightedResponseTimeRule</code>是个比较复杂的实现。</p>

<h3>Hystrix</h3>

<p>这是一个容错断路器，当出现超时等状况时直接调用指定的回掉函数。使用了RxJava库的异步操作模式，
实现了发送+观察的效果，所以可以中断请求。</p>

<h3>Feign</h3>

<p>在RestTemplate上进一步抽象，实现和Spring MVC对等的method封装。因为要组client，所以<code>@RequestParam</code>
中的value不能少。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="s">&quot;Hello-Service&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HelloService</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;/hello1&quot;</span><span class="o">,</span> <span class="n">method</span><span class="o">=</span><span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span> <span class="c1">//指明要访问的路径和方法</span>
</span><span class='line'>  <span class="n">User</span> <span class="nf">hello</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@RequestHeader</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">)</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">);</span> <span class="c1">//指明构造请求是的参数名称</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//调用方式</span>
</span><span class='line'><span class="n">helloService</span><span class="o">.</span><span class="na">hello</span><span class="o">(</span><span class="s">&quot;DiDi&quot;</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Zuul Api 网关</h3>

<p>网关的事情就两条：<br/>
1. 路由
2. 过滤</p>

<p>Zuul的路由结合了治理服务，下面就把一个路径全部转发去了一个服务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">zuul</span><span class="o">.</span><span class="na">routes</span><span class="o">.</span><span class="na">service</span><span class="o">-</span><span class="n">a</span><span class="o">.</span><span class="na">path</span><span class="o">=/</span><span class="n">aaa</span><span class="o">/**</span>
</span><span class='line'><span class="n">zuul</span><span class="o">.</span><span class="na">routes</span><span class="o">.</span><span class="na">service</span><span class="o">-</span><span class="n">a</span><span class="o">.</span><span class="na">serviceId</span><span class="o">=</span><span class="n">Hello</span><span class="o">-</span><span class="n">Service</span>
</span></code></pre></td></tr></table></div></figure>


<p>过滤器则可以通过继承一个抽象类<code>ZuulFilter</code>并实现4个方法来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccessFilter</span> <span class="kd">extends</span> <span class="n">ZuulFilter</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@EnableZuulProxy</span>
</span><span class='line'><span class="nd">@SpringCloudApplication</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">SpringApplicationBuilder</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">web</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">run</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Bean</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">AccessFilter</span> <span class="nf">accessFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">AccessFilter</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring Cloud Config</h3>

<p>基于git（也可以是svn或本地目录）的配置中心，其实就是一个可以保存各种配置信息，然后由其他微服务读取后拉起应用。</p>

<h3>Bus 和 Stream 消息总线和消息流</h3>

<p>目前只支持RabbitMQ和kafka两种队列，kafka更多的好像和实时日志处理流相关</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新的挑战]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/07/31/xin-de-tiao-zhan/"/>
    <updated>2017-07-31T00:21:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/07/31/xin-de-tiao-zhan</id>
    <content type="html"><![CDATA[<p>去新公司已经快半年了，大约一个半月前副总找谈话，打算提拔我当部门经理，负责起部门的管理工作。
并且，跟我讲了他的经历。他原本也一直不想做管理，主要顾忌有两点：<br/>
1. 怕自己干不好；
2. 怕自己荒废。直到老板请他出山帮忙，也就不得不开始从事管理工作。<br/>
副总这番话还是挺让我有共鸣的，因为对我而言，所顾忌的也是类似的情况。但既然副总和其他领导举荐我，那也不好推辞，只能赶鸭子上架尽量干了。</p>

<p>但一方面接了下来，另一方面却又很忐忑。因为这个部门从原先的项目组升级而来，而之前我作为架构师是配合项目组经理工作的，我当部门主管之后，和原先的经理之间存在一个换位的过程。而我们合作的四个月其实配合的还不错，尽管我感觉加班多了些，其他方面大家还都能顺畅沟通。<br/>
难点之二，本司的产品很强势，往往会有莫名其妙的需求和时间安排，而研发的地位则属于较低并且相当被动，这都不太像如今的技术性公司了，但确实是我司的现状。做架构师的时候，还可以不直接面对强势的产品和大姐头，而做部门主管则必须为兄弟姐妹们争取合理的工作安排。<br/>
难点之三，下属以农村娃娃居多，吃苦耐劳者多之，聪明干活的则很稀少，这样的团队带起来管理难度还好，但干活水平不容易高。<br/>
难点之四，真的对我能不能买账也只有天晓得，尤其是在产品如此强势的情况下，并不是每个下属都觉得应该跟着我干的。</p>

<p>但是，当大姐头明确地告诉我部门连我在内已经有18个人的时候，我还是挺震惊的，打那一刻起我突然对这个工作有了兴趣。</p>

<p>然而，毕竟没管过那么大的团队，所以要学习的地方还有很多。就我个人的特点而言，至少具备了分析问题和解决问题的基本能力，
所以满足当好一个管理者的基本条件，但必须承认在一些管理者的日常方面做的并不好。解法也只有看书、看别人的经验加自己的实践了。</p>

<h3>看书</h3>

<ol>
<li>《轻流程：IT团队的积分式绩效管理》，蔡为东，开始学习的第一本，虽然基本的道理很对，但这套积分制度实施起来还是有点难。</li>
<li>《行之有效：IT技术团队管理之道》，蔡为东，此书较前一本稍早出版，相当管用，可以直接使用的办法很多，最典型的如明确了研发部门的管理讲到底就是管人和项目，团队的日常管理就是谈话、考勤、请假、报销，比较好的一本书。</li>
<li>《从技术走向管理&#8212;李元芳履职记》，王树文，小说形式的IT管理书籍，基本上就是把前面一本管理理论书籍用小说形式
举例了一遍。</li>
<li>《技术管理之巅》，一号店的经历，写的比较泛。</li>
<li>《软件开发本质论》，Ron Jeffries，王凌云，基于敏捷模式的软件开发论，很薄但观点很犀利，对于
尽早测试的原因讲解的很清楚，这本书对我而言最大的触动是下了要大量编写自动化测试案例的决心。只有快速地
验证软件是不是正确，才不至于把问题留到最后。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java新的兼容性挑战者Kotlin]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/05/21/javaxin-de-jian-rong-xing-tiao-zhan-zhe-kotlin/"/>
    <updated>2017-05-21T16:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/05/21/javaxin-de-jian-rong-xing-tiao-zhan-zhe-kotlin</id>
    <content type="html"><![CDATA[<p>520期间被刷屏的除了show 恩爱，就是Kotlin了。
原本只是在一个做安卓的小朋友发的pdf里看见了Kotlin，想想应该又是一个和scala groovy或者closure类似的东西&#8212;
可以跑在jvm上，能利用jdk的库，语言表达力又强于java。</p>

<p>Java尽管有点啰嗦，语言表达力确实一般，但企业级的支持很强，jvm的性能更是出色，所以在类库、ide、甚至大型开发框架方面是无与伦比的。在jvm上跑的语言很多，甚至想部分替代的如scala closure groovy等等都火过一阵子，但是java继续维持着自己的优势地位。</p>

<p>然而这次真正被刷屏的，是因为Google认了Kotlin为<strong>干儿子</strong>，甚至以后可能是亲儿子，将kotlin变成了
头等安卓开发语言。查了一下，此前获得此定位的仅有java，这就可能有很大的不同了。kotlin有了google的支持，而其他所谓挑战者可没这个干爹。并且，Kotlin的创建者又是目前最流行的java ide的公司贡献的，可以保证在<strong>开发工具上的体验和支持</strong>，这么看来它的优势就比scala等强多了。</p>

<p>希望还是能帮助java改进吧，当然这个有点难，即使java8好几年下来了，也不知道有没有普及率超过java程序员的50%</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thymeleaf感想]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/05/21/thymeleafgan-xiang/"/>
    <updated>2017-05-21T00:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/05/21/thymeleafgan-xiang</id>
    <content type="html"><![CDATA[<p>刚使用spring boot时得知thymeleaf取代了jsp的默认地位，我是有所抵触的，做法就是重新配置回了jsp。
然而随着java web开发前后端业已分离的现实，逐步明白view层是thymeleaf还是jsp已经不再重要。因为java已变成
服务成守候在服务器侧，而原先页面的工作已经完全交给了（不需要会java）的前端人员，且他们是完全可以胜任的。</p>

<p>实际上截至目前，最新版的thymeleaf已经到了3.0以上的版本，而spring boot最新版集成的还是<strong>2.x</strong>的thymeleaf的版本，
可以认为这块已经处于冷淡的状态。</p>

<p>不过，凡是总有例外。这次又碰见了需要产生静态页面的业务场景，其中有不少的业务逻辑，所以还是需要一个view层，考虑到
新团队的习惯，决定采用thymeleaf吧，这样以后维护可以交给前端来做。于是简易学习了一下leaf，感觉还是不错的。</p>

<p>leaf最大的特色就是前端人员可以直接打开leaf所在的html页面，并做到完全的无异物感。脚本、链接完全动态静态可以分开。
这样解决了jsp长期以来美工介入很困难的问题,同时做的又比freemaker等更加到位。内置标签支持的语言语法也很现代化和好用，一般有jsp经验的程序员，
花个半天看一下一百来页的手册并动手实践一下，就完全可上手了。至于<code>jsp</code>，是可以退出历史舞台了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Truffle And Solidity]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/05/01/truffle-and-solidity/"/>
    <updated>2017-05-01T10:11:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/05/01/truffle-and-solidity</id>
    <content type="html"><![CDATA[<p>区块链应用的开发，主要指用<code>Solidity</code>编写合约(Contract)，然后部署到区块链上去。
注意，此处的区块链特指<code>以太坊</code>，而比特币的区块链是没有Solidity这种东西的。</p>

<p>因为是把sol编写的合约部署到区块链上去，所以可以进一步分解为3个问题：</p>

<ol>
<li>区块链的安装(testrpc ethereum)</li>
<li>sol合约编写(Solidity)</li>
<li>对sol合约进行编译以及发布(truffle)</li>
</ol>


<p>目前来看，整个以太坊很喜欢借用node即javascript来构建他们的环境，尽管区块链和sol本身其实和javascript关系不大。
关于ethereum可查相关的安装手册，这里主要记录一下Solidity和truffle。</p>

<p>Sol的编辑器可以用atom vscode等等，submiline也没问题。
这门语言其实还是比较原始的，合约间的调用甚至不能传递结构（struct），更可悲的是返回string也不行。基本上任何不定长的返回
在sol的ethvm（以太坊虚拟机）中都不太好调用。
功能上来讲，solidity可以理解成数据存放在一个类似levelDB的内存数据库，这是ethvm会做的事情。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">mapping</span><span class="p">(</span><span class="nx">uint</span><span class="o">=&gt;</span><span class="nx">LibDisSecPledgeApply</span><span class="p">.</span><span class="nx">DisSecPledgeApply</span><span class="p">)</span>  <span class="nx">disSecPledgeApplyMap</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">uint</span><span class="p">[]</span> <span class="nx">disSecPledgeApplyIds</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码定义了一个用于存放对象数据的mapping，因为mapping无循环遍历的功能，所以又增加了一个ids的数组保留所有对象的编号。</p>

<p>整个合约的编写，其实对写惯后台程序的人来讲还是不难上手的（类似用java操作redis写业务逻辑），只是限制确实比较多。
但solidity可以支持的变化太少，所以写起来是复杂不到哪里去。相当于成熟的脚本或编译型语言，solidity麻烦的地方在于其调试，
可简单罗列的就有两点：</p>

<ol>
<li>编译速度慢。十几个文件的情况下，用 truffle编译就要3分钟以上</li>
<li>发布调试困难。必须发布到某个链的环境才能测试，而这个就真的很不友好了，断点还不支持，日志也很麻烦。</li>
</ol>


<p>truffle是现在以太坊主要推荐的编写solidity的编译、测试运行和部署工具，能处理较复杂的sol文件关联引用，就是耗时很长，且
程序版本很不稳定，变化发展都依然极快。truffle是基于node和npm的，所以要先装好node。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">uninstall</span> <span class="nx">truffle</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">truffle</span><span class="err">@</span><span class="mf">2.1</span><span class="p">.</span><span class="mi">2</span>
</span><span class='line'><span class="nx">truffle</span> <span class="nx">compile</span>  <span class="c1">//编译合约</span>
</span><span class='line'><span class="nx">truffle</span> <span class="nx">migrate</span> <span class="o">--</span><span class="nx">reset</span> <span class="c1">//部署合约</span>
</span><span class='line'><span class="nx">truffle</span> <span class="nx">exec</span> <span class="nx">xxxx</span><span class="p">.</span><span class="nx">js</span> <span class="c1">//执行某个js文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>和区块链一样，solidity，truffle都是刚刚涌现的东西，所以问题很多，用起来也不一定顺手。但，这个行业就是这样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CA证书略记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/03/01/cazheng-shu-lue-ji/"/>
    <updated>2017-03-01T19:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/03/01/cazheng-shu-lue-ji</id>
    <content type="html"><![CDATA[<p>CA是Certificate Authority的缩写，就是一个证书颁发机构的意思。
它的作用是给某些公钥证书进行背书，以让调用者相信所获得的公钥证书确实的某个组织给予的。</p>

<p>具体做法可抽象为：<br/>
1. 某个组织自己生成一个公钥/私钥对<br/>
2. 该组织向某CA申请证书，需要把自己的身份信息、公钥交给ca，同时用自己的私钥给以上信息签名形成一个CSR，格式可以说pkcs10等<br/>
3. CA生成证书，比如P7b格式的证书。</p>

<p>此后，该申请的组织就可以把获得的证书交给客户，客户会去CA处验证证书的有效性等。</p>

<p>在现实中，浏览器、手机等默认内建很多知名CA，可能有几百个，对于这些CA颁发的证书均认为是安全的。</p>

<p>上述只是颁发完毕，之后进入使用阶段。</p>

<p>公钥与私钥的理解：
　(1)私钥用来进行解密和签名，是给自己用的。<br/>
　(2)公钥由本人公开，用于加密和验证签名，是给别人用的。<br/>
  (3)当该用户发送文件时，用私钥签名，别人用他给的公钥验证签名，可以保证该信息是由他发送的。当该用户接受文件时，别人用他的公钥加密，他用私钥解密，可以保证该信息只能由他接收到。</p>

<h3>数字签名的基本用法</h3>

<p>由于私钥加密东西长度是有限制的，所以一般私钥只用于对内容散列后的签名。
比如<code>SHA1withRSA</code>，顾名思义就是SHA1散列后用rsa加密散列值。</p>

<p>公钥端收到后，可对散列值进行解密，解密后再和收到的数据进行散列操作后的结果进行比对，如果散列值一致，那么该签名就是有效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ICE初探]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/02/28/icechu-tan/"/>
    <updated>2017-02-28T17:46:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/02/28/icechu-tan</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[区块链功课]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/02/02/qu-kuai-lian-gong-ke/"/>
    <updated>2017-02-02T13:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/02/02/qu-kuai-lian-gong-ke</id>
    <content type="html"><![CDATA[<p>https://www.igvita.com/2014/05/05/minimum-viable-block-chain/</p>

<p>Google的工程师讲解的P2P去中心化现金交易的底层技术&#8212;区块链（Block Chain），然后发现区块链的一大基石
是公钥私钥的加密技术，所以作者拿出了经典的Alice Bob来作为举例。</p>

<h2>中心化的支付技术</h2>

<p>目前的支付系统流行的是triple-entry 记账方式。三联为Alice Bob 和Chuck（中心节点，比如银行）都记录着交易记录，
以保证交易的可靠性和非重复性。
这套系统运作的前提是大家都信任Chuck。</p>

<h2>去中心化的难点</h2>

<h3>1. 一致性问题</h3>

<p>去中心化后，系统变成了分布式的，而分布式在一致性方面先天弱于中心化的。处理<strong>Double-spending</strong>的问题是一个难点。
因为一个交易发生后，系统中的其他参与者往往并不知道已经发生，可能还认为Bob拥有大量的钱财。在一个小的系统里，
可以通过全部完成通知后才认可交易成功，而这对一个大规模系统基本不可行。CAP理论表明P2P系统很难支持强一致性，但是，区块链技术
的亮点在于实现了weak(er) consistency。</p>

<h3>2. Sybil attacks （西比尔攻击）</h3>

<p>该攻击的特色在于虚拟出许多虚假的交易者，让真实的交易者误以为消费已经坐实。解决办法是增加造假的成本，同时保持验证的
成本够低，通过经济杠杆来从结构上阻止有人愿意造假，因为得不偿失就是傻事了。</p>

<p>但这带来的一个问题就是单个交易成本会很高，如果交易的手续费高于交易本身，那么这套系统也是没法运行的。</p>

<h3>Block的概念</h3>

<p>Block就是一组交易的集合，不单如此每个Block还记录了前一个Block，从而构成了Block Chain区块链。
每个交易者都可以将有效的交易集合生成一个block，生成block需要耗费大量的计算资源。
而将验证成本集中成Block的好处就是降低了每笔交易的成本，或者说交易集合共同承担了手续成本。而对交易有效性的、一致性、Sybil attacks的
防范都基于Block来进行。</p>

<h3>Block Chain的冲突</h3>

<p>因为所有的参与者都可以生成Block，所以一笔交易可能会加入在多个Block里。此时就构成了冲突，出现了chain fork。Block Chain对此的解决方式很简单粗暴，
永远选择最长的那个chain fork作为“真实的”交易链，并丢弃之前的交易分支。</p>

<p>使用的技术都是现成的：</p>

<ul>
<li>accounting</li>
<li>cryptography</li>
<li>networking</li>
<li>proof-of-work</li>
</ul>


<p>然而集合起来就又构成了一个新的精巧的方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zookeeper]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2017/01/15/zookeeper/"/>
    <updated>2017-01-15T10:27:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2017/01/15/zookeeper</id>
    <content type="html"><![CDATA[<p>用于协作的服务，提供目录树的结构。基本可以认为是Yahoo出品。</p>

<p>data registers - called znodes, file
parlance - directory</p>

<p>数据全部保存在内存中。</p>

<p>优势：
1. 性能好，可在大规模的分布式系统里使用
2. 可靠性高，可防止单点故障
3. 严格的顺序性，可满足复杂的、高精的客户端同步实现要求</p>

<p>znode的读写有acl控制以及版本号</p>

<p>leader nodes负责接受写的请求，follower nodes负责被同步和读取</p>

<p>配置示例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tickTime=2000
</span><span class='line'>dataDir=/var/lib/zookeeper
</span><span class='line'>clientPort=2181
</span><span class='line'>initLimit=5
</span><span class='line'>syncLimit=2
</span><span class='line'>server.1=zoo1:2888:3888
</span><span class='line'>server.2=zoo2:2888:3888
</span><span class='line'>server.3=zoo3:2888:3888</span></code></pre></td></tr></table></div></figure>


<p>tickTime是一个即使单元，单位是毫秒，2000表示2秒。<br/>
dataDir是存放数据文件的物理位置。<br/>
initLimit表示n个tickTime，上面这个就是10秒的意思，表示连接上leader nodes需要的时间单元数量。<br/>
syncLimit表示山离皇帝能有多远过期<br/>
server.1中的1的服务器内部的<code>myid</code>，zoo1是服务器地址，第二个port即2888用于follewer连接leader，
第三更port 3888用于选举leader。</p>

<p>基本上，zookeeper可以理解成一个分布式系统里，用于进程间通信的中间件，所以剩下的就是客户端调用了。
项目本身提供了C和Java的binding，具体实现时每个客户端会分为IO线程和watch线程两个。而Netflix在此基础上，
构造了wrapper: <code>curator</code>，以方便开发。</p>

<p>首先，引入maven依赖:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;  
</span><span class='line'>    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;  
</span><span class='line'>    &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;  
</span><span class='line'>    &lt;version&gt;3.2.1&lt;/version&gt;  
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后，在代码中可如下调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">zookeepertest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.curator.RetryPolicy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.curator.framework.CuratorFramework</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.curator.framework.CuratorFrameworkFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.curator.retry.ExponentialBackoffRetry</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CuratorTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">zookeeperConnectionString</span><span class="o">=</span><span class="s">&quot;127.0.0.1:2181&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">RetryPolicy</span> <span class="n">retryPolicy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExponentialBackoffRetry</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>              <span class="n">CuratorFramework</span> <span class="n">client</span> <span class="o">=</span> <span class="n">CuratorFrameworkFactory</span><span class="o">.</span><span class="na">newClient</span><span class="o">(</span><span class="n">zookeeperConnectionString</span><span class="o">,</span> <span class="n">retryPolicy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>              <span class="n">client</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">client</span><span class="o">.</span><span class="na">create</span><span class="o">().</span><span class="na">forPath</span><span class="o">(</span><span class="s">&quot;/my&quot;</span><span class="o">,</span> <span class="s">&quot;555&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">client</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">forPath</span><span class="o">(</span><span class="s">&quot;/my&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">client</span><span class="o">.</span><span class="na">setData</span><span class="o">().</span><span class="na">forPath</span><span class="o">(</span><span class="s">&quot;/my&quot;</span><span class="o">,</span> <span class="s">&quot;666&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CuratorTest</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CuratorTest</span><span class="o">();</span>
</span><span class='line'>      <span class="n">test</span><span class="o">.</span><span class="na">set</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种调用方式是比较原始的进程间通信，以此为基础，recipes已经实现了一系列通信的高级语意，
如lock、semaphore、确认leader等，可以直接使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 CRV养车成本汇总]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/12/31/2016-crv/"/>
    <updated>2016-12-31T21:33:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/12/31/2016-crv</id>
    <content type="html"><![CDATA[<p><img src="http://octopresszhangyu.herokuapp.com/images/yangche2016.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迪士尼和最近的几次小长途]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/12/17/di-shi-ni-he-zui-jin-de-ji-ci-xiao-chang-tu/"/>
    <updated>2016-12-17T21:25:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/12/17/di-shi-ni-he-zui-jin-de-ji-ci-xiao-chang-tu</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY的好处以及雨刮和滤芯]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/10/07/ji-chong-kong-diao-lu-xin/"/>
    <updated>2016-10-07T15:24:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/10/07/ji-chong-kong-diao-lu-xin</id>
    <content type="html"><![CDATA[<p>用车两年多，有两个地方始终不太让人满意：1.雨刮器 2.空调滤芯。</p>

<p>个人还是比较喜欢开雨刮的，所以雨刮用的比较费，原厂的也就半年就会变花了需要更换。
之前用国产品牌carall直接替换，第一次效果还是不错的，用了4个月才花的比较厉害。
于是又去买了一对。但第二次的体验就很差，突然感觉噪音变得很大。可能小厂的品控比较差，质量高高低低的。同时，carall的价钱倒是涨的快。弄来弄去又回到了换胶条的路子上。</p>

<p>很早搜索论坛就得知换胶条是最经济实惠的，无奈需要diy，感觉这么个东西也没多少钱，所以最早选择
直接买了。但随着直接替换不令人满意，而且考虑到只换胶条的话，等于还能保留并继续使用原厂的雨刮臂。更重要的，本田确实是个很有意思的公司，在手册上竟然也是推荐换胶条的，并给出了怎么换的图例和说明。实际上本田的4s只卖胶条，雨刮臂很难买。于是决定自己换胶条。</p>

<p>自己DIY雨刮胶条之后，感觉还是很不错的。首先是成本低了很多，因为这是替换方式上形成的成本优势。只换胶条而不换雨刮臂当然比换整支雨刮臂成本低，而老化和变花的只是胶条，雨刮臂的寿命其实很长。
一对胶条的成本只在12-18元之间，一对雨刮的国产也要30-40。其次，效果方面毕竟是原厂的钢条支撑，声音就正常许多了，清晰度其实起初用用都还行。这东西关键还是在于要勤换。终于找到了一个效果、成本、难易程度都让自己满意的方案。而这一切的关键就是要DIY。</p>

<p>然后，最近买了几款车用空调滤芯。</p>

<ol>
<li>韦斯特带炭</li>
<li>高仿本田原厂</li>
<li>博世不带炭</li>
<li>博世带炭</li>
<li>马勒带炭</li>
</ol>


<p>用下来么基本还是先看滤芯结构，结构相同的情况下一分价钱一分货。
不带炭的博世是最差的，生产日期超过一年半的韦斯特也是大幅衰减的。
然而，如果给它们都盖上HEPA滤纸，可能效果就会都好很多。而这也是diy在
架构方面的胜利。</p>

<p>虽然购买服务是商业社会的主流选择，但DIY永远有其使用的空间。
一来社会化生产的服务归根结底也要来源于diy，二来总有社会服务提供不到位的地方也需要diy，三来补锅法锯箭法也需要diy来进行对冲。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[混动雅阁]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/09/28/hun-dong-ya-ge/"/>
    <updated>2016-09-28T23:17:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/09/28/hun-dong-ya-ge</id>
    <content type="html"><![CDATA[<p>混动雅阁千呼万唤历经两年时间终于摆在了中国消费者的面前。而其定价也可谓
相当合理：</p>

<ul>
<li>酷版： 23.98万元</li>
<li>领版： 25.98万元</li>
<li>尊版： 27.98万元</li>
</ul>


<p>价格基本和2.4版本的衔接，并且顶配也没超过原来3.0的次顶配。
<strong>因此，这个价钱是定的相当有诚意。</strong></p>

<p>本田在日系里还是有点运动基因，所以那种混动也走向sporty的道路，
发挥了电机启动快扭矩大的优势。电池给了10年保也算负责了。</p>

<p>但是，仔细看看混雅的配置，尤其是丐版的，还是过于寒酸了。</p>

<ol>
<li>2款低配没有后雷达，而顶配有前后雷达</li>
<li>最低配没有驾驶座电动调节</li>
<li>最低配没有车载蓝牙</li>
</ol>


<p>以上3者都是我认为不可缺少的现代汽车的配置。那么就只能上27.98万元这个版本，
而这个价位下，A4 三系在品牌上的优势就大了。所以混雅的前途大概只是投石问路。
希望这套系统早日用在CRV上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装机i5-6500]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/09/19/zhuang-ji-i5-6500/"/>
    <updated>2016-09-19T22:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/09/19/zhuang-ji-i5-6500</id>
    <content type="html"><![CDATA[<p>许久没有装机了，入了如下的配置:</p>

<ul>
<li>intel i5-6500 1150元，</li>
<li>散热器采融B48 99元，</li>
<li>技嘉 B150M-D3H 599元，</li>
<li>芝奇 DDR4 2400 395元,<br/>
<strong>合计2243元</strong></li>
</ul>


<p>1.货物来源</p>

<p>某宝买散片和散热器，某东买入主板和内存。原因在于散片确实比盒装的便宜很多，差价在300的样子，而京东等电商基本不做散片的生意。主板的价格相对统一的多，内存差价也不大，所以就还是京东买了。</p>

<p>2.cpu插座保护盖及安装注意事项</p>

<p>自己diy还是有一定的风险。而且自己装cpu还是第一次，一开始搞主板的cpu保护插座还费了点事情。好在有惊无险。<strong>这个保护盖一定不要先揭走</strong>，而是要等到安装完cpu后自己会弹出来。主要是保护插座上的针脚。iU现在本身只有垫片了，针脚全在主板上，所以主板容易弄坏。</p>

<p>3.散热器的安装，包括硅胶涂在cpu上</p>

<p>cpu安装好，压好架子后就可以涂硅胶装散热器了。硅胶可以用九点法后直接压上去，也可以涂在中间，然后用散热器磨开来。我用的是后面这个法子。一般都应该行得通，反正只是为了保证散热器和cpu的接触面积。
分散和散热器采融48采用的是搭扣，其实就是靠线扣的弹力自己箍上去的。</p>

<p>4.UEFI与GPT和win10</p>

<p>技嘉这个新板子默认就是UEFI的界面，比bios启动快一些吧。win10装好，10秒内可以启动成功。2年前买的ssd终于找到了相得益彰的平台。</p>

<p>5.网卡驱动，win10默认也没有</p>

<p>即使装了win10，网卡驱动也要另外装的，默认并不提供。</p>

<p>6.vpn拨号</p>

<p>如果拨号成功还不行，可以尝试一下禁用IPv6.</p>

<p>附最近12年的配过的自己的机器，应该还漏了一台</p>

<h3>2004年4月买的，花了38xx</h3>

<p>AMD barton 2500+<br/>
KST 512M ddr400<br/>
日立硬盘 7k250 120g/2m<br/>
华硕 a7v600-x 主板<br/>
迪兰横进 9600pro 显卡</p>

<h3>2011年买入，花了2615元</h3>

<p>AMD Athlon II X4 640 699元,<br/>
4GB KST DDR1333，300元<br/>
技嘉 MA770T-UD3P 主板，<br/>
华硕EAH5750显卡，<br/>
安钛克BP430plus电源 300元，<br/>
机箱，<br/>
无硬盘</p>

<p>老婆的：</p>

<h3>2010年11月购入，合计花了4249.00元</h3>

<p>Intel 英特尔 奔腾双核 E6500 (2.93GHz/LGA775/2M/1066MHz/45纳米）盒装 519元，<br/>
威刚 DDR3 1333 2G 内存 178元，<br/>
华硕 P5P54TD主板 569元，<br/>
华硕 ENGT40/512M 显卡 539元，<br/>
希捷 1TB硬盘 408元，<br/>
酷冷至尊 破坏者塔式机箱 229元，<br/>
ACBEL 康舒 IP-430台式机电源(额定功率380w/ATX2.3版) 电源 229元，<br/>
Samsung 三星 2494LW 23.6英寸宽屏液晶显示器 1285元，<br/>
微软多媒体键盘 79元</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring boot in action]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action/"/>
    <updated>2016-09-19T14:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action</id>
    <content type="html"><![CDATA[<ul>
<li>Auto-Config</li>
<li>用starter处理依赖</li>
<li>CLI 命令行处理启动等</li>
<li>Actuator 监控组件 , 通过web或者shell</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring version 
</span><span class='line'>spring --version
</span><span class='line'>spring shell # windows下打开可以自动补全的功能</span></code></pre></td></tr></table></div></figure>


<h3>工程初始化</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring init -dweb,jpa,security --build gradle -p jar -x //-x表示生成到当前目录
</span><span class='line'>spring init -dweb,jpa,security --build gradle -p war myapp //表示生成工程到myapp目录</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SpringBootApplication
</span><span class='line'>public class DemoddfApplication {
</span><span class='line'>
</span><span class='line'>public static void main(String[] args) {
</span><span class='line'>SpringApplication.run(DemoddfApplication.class, args);
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>@SpringBootApplication 起到了过去3个标注的作用，打开了自动配置和自动扫描。如果有新的配置要求，@Configuration用在其他配置类中进行配置的扩充。而主class可以不必修改</p>

<p>用starter定义可实现更高度的抽象，也不必给出每个组件的版本号。通过<code>mvn dependency:tree</code>可查看实际的包依赖关系.
starter就是普通的maven或gradle依赖，所以可以exclude也可以指定更直接的版本。</p>

<h3>自动配置定制化的举例</h3>

<p>安全是最好的需要自己自行设置的例子，not one&#8211;size-fits-all。
这是yml方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server:
</span><span class='line'>port: 8443
</span><span class='line'>ssl:
</span><span class='line'>key-store: file:///path/to/mykeys.jks
</span><span class='line'>key-store-password: letmein
</span><span class='line'>key-password: letmein</span></code></pre></td></tr></table></div></figure>


<p>配置数据源</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring:
</span><span class='line'>datasource:
</span><span class='line'>url: jdbc:mysql://localhost/readinglist
</span><span class='line'>username: dbuser
</span><span class='line'>password: dbpass
</span><span class='line'>driver-class-name: com.mysql.jdbc.Driver</span></code></pre></td></tr></table></div></figure>


<h3>属性信息的几种来源</h3>

<ol>
<li>Command-line arguments</li>
<li>JNDI attributes from java:comp/env</li>
<li>JVM system properties</li>
<li>Operating system environment variables</li>
<li>Randomly generated values for properties prefixed with random.* (referenced when setting other properties, such as `${random.long})</li>
<li>An application.properties or application.yml file outside of the application</li>
<li>An application.properties or application.yml file packaged inside of the application</li>
<li>Property sources specified by @PropertySource</li>
<li>Default properties</li>
</ol>


<p>在application.properties中指定<code>spring.profiles.active</code>的值后，boot就会读取application-{active}.properties的值</p>

<h3>自动化测试</h3>

<p>@WebIntegrationTest Test class有这个标注就会让spring启动一个测试的tomcat或jetty进程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RunWith(SpringJUnit4ClassRunner.class)
</span><span class='line'>@SpringApplicationConfiguration(
</span><span class='line'>classes=ReadingListApplication.class)
</span><span class='line'>@WebIntegrationTest
</span><span class='line'>
</span><span class='line'>public class SimpleWebTest {
</span><span class='line'>@Test(expected=HttpClientErrorException.class)
</span><span class='line'>public void pageNotFound() {
</span><span class='line'>try {
</span><span class='line'>RestTemplate rest = new RestTemplate();
</span><span class='line'>rest.getForObject(
</span><span class='line'>"http://localhost:8080/bogusPage", String.class);
</span><span class='line'>fail("Should result in HTTP 404");
</span><span class='line'>} catch (HttpClientErrorException e) {
</span><span class='line'>assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
</span><span class='line'>throw e;
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>代入参数
<code>@WebIntegrationTest(value={"server.port=0"})</code> 和 <code>@WebIntegrationTest("server.port=0")</code></p>

<p>selenium的用ie模拟访问自己的服务很有意思，值得制作一个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="n">FirefoxDriver</span> <span class="n">browser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">timeouts</span><span class="o">().</span><span class="na">implicitlyWait</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">&quot;http://www.baidu.com/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">baseUrl</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">currentUrl</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="na">getCurrentUrl</span><span class="o">();</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">baseUrl</span> <span class="o">+</span><span class="s">&quot;/readingList&quot;</span><span class="o">,</span> <span class="n">currentUrl</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;You have no books in your book list&quot;</span><span class="o">,</span>
</span><span class='line'>             <span class="n">browser</span><span class="o">.</span><span class="na">findElementByTagName</span><span class="o">(</span><span class="s">&quot;div&quot;</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">findElementByName</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">).</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;BOOK TITLE&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">findElementByName</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">).</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;BOOK AUTHOR&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">findElementByName</span><span class="o">(</span><span class="s">&quot;isbn&quot;</span><span class="o">).</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;1234567890&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">findElementByName</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">).</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">&quot;DESCRIPTION&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">browser</span><span class="o">.</span><span class="na">findElementByTagName</span><span class="o">(</span><span class="s">&quot;form&quot;</span><span class="o">).</span><span class="na">submit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">WebElement</span> <span class="n">dl</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">browser</span><span class="o">.</span><span class="na">findElementByCssSelector</span><span class="o">(</span><span class="s">&quot;dt.bookHeadline&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;BOOK TITLE by BOOK AUTHOR (ISBN: 1234567890)&quot;</span><span class="o">,</span>
</span><span class='line'>             <span class="n">dl</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="n">WebElement</span> <span class="n">dt</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">browser</span><span class="o">.</span><span class="na">findElementByCssSelector</span><span class="o">(</span><span class="s">&quot;dd.bookDescription&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;DESCRIPTION&quot;</span><span class="o">,</span> <span class="n">dt</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>《Selenium WebDriver in Practice》但还没完成，可能要到2016年10月份才能出版</p>

<p>/beans 列出创建的全部bean<br/>
/autoconfig 列出自动配置生效和未生效的内容<br/>
/env 列出设置的环境<br/>
/configprops 列出所有的参数<br/>
/metrics 列出访问的指标<br/>
/trace 给出近100个http请求的处理信息<br/>
/dump 给出所有线程的情况<br/>
/health 表明是否UP<br/>
/info 列出属性文件中info.开头的信息，但似乎有乱码</p>

<p>actuator的remote shell
默认启动一个端口在2000，每次启动时会生成一个密码，可以用ssh访问</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ssh</span> <span class="n">user</span><span class="nd">@localhost</span> <span class="o">-</span><span class="n">p</span> <span class="mi">2000</span>
</span><span class='line'><span class="n">Password</span> <span class="n">authentication</span>
</span><span class='line'><span class="nl">Password:</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己定义metrics：</p>

<p>actuator有CounterService服务，可以用于增加值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CounterService</span> <span class="o">{</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">increment</span><span class="o">(</span><span class="n">String</span> <span class="n">metricName</span><span class="o">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">decrement</span><span class="o">(</span><span class="n">String</span> <span class="n">metricName</span><span class="o">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">reset</span><span class="o">(</span><span class="n">String</span> <span class="n">metricName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>GaugeService是记录值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GaugeService</span> <span class="o">{</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">submit</span><span class="o">(</span><span class="n">String</span> <span class="n">metricName</span><span class="o">,</span> <span class="kt">double</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义Health</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmazonHealth</span> <span class="kd">implements</span> <span class="n">HealthIndicator</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Health</span> <span class="nf">health</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="n">RestTemplate</span> <span class="n">rest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span><span class='line'><span class="n">rest</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s">&quot;http://www.amazon.com&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">Health</span><span class="o">.</span><span class="na">up</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">Health</span><span class="o">.</span><span class="na">down</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//还可以加入更多的细节内容，使用withDetail</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">Health</span><span class="o">.</span><span class="na">down</span><span class="o">().</span><span class="na">withDetail</span><span class="o">(</span><span class="s">&quot;reason&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述endPoint的保护需采用所有spring暴露的链接一致的方式</p>

<p><code>management.context-path=/mgmt</code>，其中的<code>management.context-path</code>可以给spring actuator定义全部的前缀</p>

<p>这样可便于统一控制
<code>.antMatchers("/mgmt/**").access("hasRole('ADMIN')")</code></p>

<h3>部署时调整production环境变量</h3>

<p><code>@Profile("production")</code></p>

<p><code>export SPRING_PROFILES_ACTIVE=production</code></p>

<p>最简单的是export active的环境变量为<code>production</code></p>

<h3>spring的db migrate，不算很实用吧</h3>

<p>Spring Boot includes auto-configuration support for two popular database migration
libraries:<br/>
■ Flyway (http://flywaydb.org)  &#8212; 直接采用SQL编写ddl<br/>
■ Liquibase (www.liquibase.org) &#8212; 使用yaml json等</p>

<h3>附录</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">devtools</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>开发工具具备自动重启的功能，但下面这些静态资源默认是exclude的: /META-INF/resources, /resources, /static, /
public, /templates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于冠道]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/08/27/guan-yu-guan-dao/"/>
    <updated>2016-08-27T15:37:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/08/27/guan-yu-guan-dao</id>
    <content type="html"><![CDATA[<p>本田的冠道近日宣传的比较多，虽然价格还没最后公布，但车还是造成了足够的话题。
因为这车既是本田目前的旗舰suv，也是首次使用了2.0T发动机的中国产本田车型。</p>

<p>其实这个车挺像昂科威的，只是更高级也更大些。CRV相对这类车，最大的优势还是在于尺寸、操控，尤其是尺寸相对冠道的优势更大。毕竟CRV这种4米6以下的长度，1米8左右的宽度，在城市开还是挺舒服的，再搭配一个装载能力很大的尾箱，是各方面都很均衡的车型。
而冠道，对拥挤的中国城市来讲，它的尺寸还是大了些。而尺寸大的车，操控必然是要打折扣的。
而从空间看，尾箱部分因为溜背造型，并不如crv的尾箱实惠。
油耗、可靠性方面可能也是crv更有优势些。
当然，同昂科威一样，冠道内饰的高级感、拥有税金更省的涡轮、拥有at变速箱、静音等方面都是对crv碾压了。</p>

<p>不过问我会不会买冠道？只要这个车不是比crv便宜，那肯定还是crv，毕竟crv开着更舒服。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 通过Lua输出response body]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/08/25/nginx-tong-guo-luashu-chu-response-body/"/>
    <updated>2016-08-25T23:03:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/08/25/nginx-tong-guo-luashu-chu-response-body</id>
    <content type="html"><![CDATA[<p>Nginx默认是不只支持<code>$request_body</code> 而不支持response的body输出的。这个设定是合理的，因为大量的html响应或者静态文件的内容输出将使得整个日志毫无意义。
然而，response body输出对api的请求来讲，则很多时候、尤其是在调试的时候是很有必要的。取代了抓包的作用，且简单直观许多。
搜寻之下，发现使用lua的话，可以达到此目的。</p>

<ol>
<li>下载并安装lua语言的安装包</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> wget http://luajit.org/download/LuaJIT-2.0.3.tar.gz
</span><span class='line'>tar -zxvf LuaJIT-2.0.3.tar.gz
</span><span class='line'>cd LuaJIT-2.0.3.tar.gz
</span><span class='line'>make && make install</span></code></pre></td></tr></table></div></figure>


<p>注意，可能你的服务器的wget会实际下载一个html到本地导致tar解压失败，此时可以用浏览器下载完毕后再次上传到服务器上。</p>

<ol>
<li>下载并解压ngx_devel_kit套件</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://github.com/simpl/ngx_devel_kit/archive/v0.2.19.tar.gz
</span><span class='line'>tar v0.2.19</span></code></pre></td></tr></table></div></figure>


<ol>
<li>下载并解压lua-nginx-module模块</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://github.com/chaoslawful/lua-nginx-module/archive/v0.9.6.tar.gz
</span><span class='line'>tar v0.9.6</span></code></pre></td></tr></table></div></figure>


<ol>
<li>下载并解压nginx后，使用下面的命令重新编译nginx</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_flv_module --with-http_gzip_static_module --with-pcre --sbin-path=/usr/sbin/nginx --add-module=/root/lua-nginx-module-0.9.6 --add-module=/root/ngx_devel_kit-0.2.19 
</span><span class='line'>make && make install
</span><span class='line'>cp /usr/sbin/nginx /usr/local/nginx/sbin/
</span></code></pre></td></tr></table></div></figure>


<p>最后，在nginx的conf文件中的<code>server{}</code>上下文里加入下面代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>log_format  main_with_response  '$remote_addr - $remote_user [$time_local] "$request" '
</span><span class='line'>                      '$status $body_bytes_sent "$http_referer" '
</span><span class='line'>                      '"$http_user_agent" "$http_x_forwarded_for"'
</span><span class='line'>                      'request: "$request_body"' 'response: $resp_body';
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>   lua_need_request_body on;
</span><span class='line'>    set $resp_body "";
</span><span class='line'>    body_filter_by_lua '
</span><span class='line'>        local resp_body = string.sub(ngx.arg[1], 1, 1000)
</span><span class='line'>        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
</span><span class='line'>        if ngx.arg[2] then
</span><span class='line'>             ngx.var.resp_body = ngx.ctx.buffered
</span><span class='line'>        end
</span><span class='line'>    ';
</span><span class='line'>
</span><span class='line'>       location /xxxx {
</span><span class='line'>            root   html;
</span><span class='line'>            access_log  logs/access.log  main_with_response;
</span><span class='line'>            proxy_pass http://192.168.203.198:8080;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>为避免response溢出整个日志，可选择在特定的location中使用输出response body。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[车险]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/05/31/che-xian/"/>
    <updated>2016-05-31T22:49:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/05/31/che-xian</id>
    <content type="html"><![CDATA[<p>时间很快，CRV买了快要一年了，又到了车险续保的日子。过去的11个月还算基本顺利，车子没遇到大的损害，
只有一些小的刮蹭。本来想用划痕险统一处理一下，但又担心来年保费政策大变化，所以还是没用。</p>

<p>因为没有出险，所以商业险给打了七折，下面是对比</p>

<ul>
<li>车损：现2109.58，原3514.15</li>
<li>三责：现1176，   原1689.48</li>
<li>盗抢：现取消，    原977.02</li>
<li>划痕：现339.5,   原486.35</li>
<li>各项不计免赔：现543.77，原1049.04</li>
</ul>


<p>总体折扣尤其是车损的折扣比7折还是要低不少的。那么问题来了，明明是7折，怎么反而会更低呢？难道政府控制的
保险公司是活雷锋？</p>

<p>非也。差的多的主要是车损，而对比两份保单，可以发现原先的保额是249441元，然而新的是224475元，这就
差了近10%。经过一番搜索，发现其实保额的计算是这么来的：车厂的出厂原价+10%的购置税。所以从天籁到crv，
甚至是跑在中国马路上的其他私家车，金额都会稍大。CRV今年比去年车损保额降了10%，应该是总理新政的功劳。</p>

<p>与去年不同，盗抢险这次取消掉了，毕竟生活在上海，发生车辆被盗又不被找回的概率是很低很低的，还是不买了吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StringHttpMessageConverter的头属性]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing/"/>
    <updated>2016-05-19T17:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing</id>
    <content type="html"><![CDATA[<p>使用Spring MVC中的<code>@ResponseBody</code>或者<code>@RestController</code>产生的json消息格式会产生一个很大的响应头。
其主要内容就是<code>Accept-Charset</code>会罗列几乎所有的charset变量，从utf到gbk再到iso等等。而这很大程度上是无谓的开销。</p>

<p>要解决可以在xml的配置中设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;mvc:annotation-driven&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mvc:message-converters</span> <span class="na">register-defaults=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- 将StringHttpMessageConverter的默认编码设为UTF-8 --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">&quot;UTF-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;writeAcceptCharset&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mvc:message-converters&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/mvc:annotation-driven&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意给<code>StringHttpMessageConverter</code>的属性<code>writeAcceptCharset</code>设置成<code>false</code></p>

<p>&#8212;- update on 2016.10.17</p>

<p><code>RestTemplate</code>作为客户端发送请求时也有类似的问题，会带出一串过长的Charset。解决办法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">converts</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getMessageConverters</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">HttpMessageConverter</span><span class="o">&lt;?&gt;</span> <span class="n">convert</span> <span class="o">:</span> <span class="n">converts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">convert</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">==</span> <span class="n">StringHttpMessageConverter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">((</span><span class="n">StringHttpMessageConverter</span><span class="o">)</span> <span class="n">convert</span><span class="o">).</span><span class="na">setWriteAcceptCharset</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获得converts，然后对String的Convert进行设置</p>
]]></content>
  </entry>
  
</feed>
