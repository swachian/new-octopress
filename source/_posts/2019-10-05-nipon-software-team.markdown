---
layout: post
title: "日式高效团队开发"
date: 2019-10-05 16:48
comments: true
categories: 
- 技术
- 项目管理
---

日式《高效团队开发》

成书于2014年上半年，作者是日本人，参与了Play这个框架的开发。在日本，做到了书中提供的版本管理、缺陷管理、CI、CD公司的生产效率高很多，原因在于两点：1. 基础设施本身的效率 2. 对优秀工程师的吸引力。

死亡行军状态的项目---项目岌岌可危，人员身心俱疲

问题1：邮件内容多 -- 引入缺陷管理  
问题2：没有仿真环境  -- 搭建持续、自动地向验证环境、staging 环境以及正式环 境进行发布，并一直保持正常运行的环境  
问题3：没有分支和tag管理  -- 利用分支和标签  
问题4：重新制作数据库的困难  -- 数据库变更管理  

问题5: 不运行就就无法察觉问题  -- CI  
问题6：代码合并后产生了degrade  -- CI+merge  
问题7：重构代码没信心  -- CI+测试代码  
问题9：环境依赖

日本的信息技术传入比美国晚3-4年，貌似中国也差不多。

分布式版本控制系统的缺点：  
1. 没有真正的版本号  
2. 没有最新的版本  
3. 过于灵活，容易混乱  
4. 思维方式  

git中，应该避免分支和标签使用相同的名字，可以大致类似但细节之处有所区别

如果不经过长期的回归测试就不能发布，那么发布分支和开发分支应该分开来。
反之，都使用一个master为好。

使用Play框架的Evolution对数据库sql进行管理。类似ror的migrate，但直接使用sql。其对比语句文件是否已执行也比较巧妙。

缺陷驱动开发(TiDD),即以Ticket驱动开发。怎么建立gitlab和ticket之间的关联？

epic采用excel管理，story介于采用excel或ticket工具之间，task采用ticket工具管理

因成本收益和市场变化，才使得CI流行起来。
Jenkins是事实上CI工具的标准，其前身是Oracle收购Sun之前的Hudson。它的作者是一个日本人。

Ant、Maven、Gradle三者的关系。Ant最灵活，Maven是基于CoC后的简化版的Ant，Gradle则介于二者之间，使用groovy来完成其中灵活的那部分。

CI集成的测试对象：  

* 单元测试  
* 集成测试  
* 用户验收测试UAT  
* 回归测试  

.git/hooks/post-receive 用于触发向jenkins push构建请求

CI -> CD，直接把代码库中的代码发布到产线环境

A 要全部采用版本管理  
B 所有的环境都要用同样的方式来构建  
C 要实现发布工作的自动化，并事先进行验证  
D 要反复多次进行测试  

Chef是配置并启动虚机里面的服务的，例如nginx、apache等等

Infrastructure as Code 

编配（Orchestration）：  
即让多个组件一起演奏起来。主要有Capistrano、Fabric（python编写）和Jenkins几种工具。
Jenkins的buidl periodically可以从多台机器上收集日志
如果采用K8S + Docker, 那么很多玩法又将大大的不同了。

测试四象限：

```

                业务层面
                |
                |
团队的支持------- | -------产品的评价    
                |
                |
                技术层面
```

单元测试属于技术和团队方面的支持，集成测试属于业务和团队方面的支持

总体来讲，这本书讲的日式团队软件开发，和我目前接触的有很多类似的地方。作者提到的版本管理、CI、CD我们也做了一部分，可以提高和借鉴的地方确实不少。不过时代毕竟在前进，实现栈方面作者是不提及docker和k8s的，然而这些的存在确实可以让CI/CD更进一步。