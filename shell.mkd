### 命令别名

`alias`, `alias ls='ls --color=auto'`

### 连接符

重定向 管道

`;`: 命令顺序执行, `&&`: 执行成功后再执行, `||` 执行失败后再执行

` ` 命令替换符

## shell 组成部分

1. `#!` 指定执行脚本的shell
2. `#` 注释行
3. 命令和控制结构

### 临时变量和永久变量(环境变量)

使用时用`$`, `=`两边不得空格, 变量的其他规则其实和ruby差不多,比如单引号双引号等

### 位置变量和特殊变量

**位置变量** 是执行命令时的第n个参数的变量, 最大为`$9`.

`$?`: 执行上一命令的返回值, 有0和非0两个结果, 0表示成功
`$*`: 列出所有的位置变量
`$#`: 产出的个数
`$$`: 进程的pid
`$0`: 命令本身

## Shell命令


`read first second third`: 读取输入, `sh -x` 会显示执行过程

`expr $var1 - 5`: 整数型算数运算, 符号中间要有空格, `*`需要转义

### 测试条件

`test`: 测试条件

    test str1=str2 测试字符串
    test str1!=str2 不相等
    test str1  测试是否不为空
    test -n str1 测试是否不为空
    test -z str1 测试是否为空

    test int1 -eq int2 相等
    test int1 -ge ints >=
    -gt -le -lt -ne(不相等)

    test -d file 是否为目录
    test -f file 是否为常规文件
    test -x file 是否可执行, -r -w
    test -a file 是否存在(可访问)
    test -s file 文件的大小是否非0

`if [ str1=str2] ` 等价于 `if test str1=str2`

## 流控制语句

`if []; then elif else fi`

`-a` `-o` 做逻辑与或

    for 变量 in 名字表
    do
        命令列表
    done

例子: kill一个用户的全部进程

### select

    select var in list list2
    do
       break
    done
    # 会列出内容共大家选择

### case

    case  变量 in
        字符串1) 命令列表
            ;;
        字符串n) 命令列表n
            ;;
         *)
    esac

### while

    while
    do
        ...
    done

循环里面有 `break` 和`continue`

### 屏蔽交互式的命令

`echo 123456 | passwd --stdin shedon`

## 函数应用

    start() {

    }

    start # 不带()

## awk

awk -F分隔符 `命令`

